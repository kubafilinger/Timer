
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001102  00001196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080006a  0080006a  000011a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f5  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033e  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e8  00000000  00000000  00001fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f9c  00000000  00000000  00002b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00003b17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_4>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_9>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	65 01       	movw	r12, r10
      56:	63 01       	movw	r12, r6
      58:	6b 01       	movw	r12, r22
      5a:	21 01       	movw	r4, r2
      5c:	6d 01       	movw	r12, r26
      5e:	23 01       	movw	r4, r6
      60:	25 01       	movw	r4, r10
      62:	27 01       	movw	r4, r14
      64:	29 01       	movw	r4, r18
      66:	2b 01       	movw	r4, r22
      68:	2d 01       	movw	r4, r26
      6a:	2f 01       	movw	r4, r30
      6c:	31 01       	movw	r6, r2
      6e:	6b 01       	movw	r12, r22
      70:	6b 01       	movw	r12, r22
      72:	6b 01       	movw	r12, r22
      74:	69 01       	movw	r12, r18
      76:	6b 01       	movw	r12, r22
      78:	6b 01       	movw	r12, r22
      7a:	6b 01       	movw	r12, r22
      7c:	33 01       	movw	r6, r6
      7e:	35 01       	movw	r6, r10
      80:	39 01       	movw	r6, r18
      82:	6b 01       	movw	r12, r22
      84:	3f 01       	movw	r6, r30
      86:	41 01       	movw	r8, r2
      88:	43 01       	movw	r8, r6
      8a:	45 01       	movw	r8, r10
      8c:	6d 01       	movw	r12, r26
      8e:	4b 01       	movw	r8, r22
      90:	6b 01       	movw	r12, r22
      92:	4f 01       	movw	r8, r30
      94:	6b 01       	movw	r12, r22
      96:	6b 01       	movw	r12, r22
      98:	21 01       	movw	r4, r2
      9a:	53 01       	movw	r10, r6
      9c:	6b 01       	movw	r12, r22
      9e:	6b 01       	movw	r12, r22
      a0:	55 01       	movw	r10, r10
      a2:	57 01       	movw	r10, r14
      a4:	5b 01       	movw	r10, r22
      a6:	6b 01       	movw	r12, r22
      a8:	6b 01       	movw	r12, r22
      aa:	6b 01       	movw	r12, r22
      ac:	5f 01       	movw	r10, r30
      ae:	61 01       	movw	r12, r2
      b0:	6b 01       	movw	r12, r22
      b2:	6b 01       	movw	r12, r22
      b4:	6b 01       	movw	r12, r22
      b6:	6b 01       	movw	r12, r22
      b8:	67 01       	movw	r12, r14
      ba:	6b 01       	movw	r12, r22
      bc:	6b 01       	movw	r12, r22
      be:	37 01       	movw	r6, r14
      c0:	3b 01       	movw	r6, r22
      c2:	3d 01       	movw	r6, r26
      c4:	6b 01       	movw	r12, r22
      c6:	6b 01       	movw	r12, r22
      c8:	6b 01       	movw	r12, r22
      ca:	47 01       	movw	r8, r14
      cc:	49 01       	movw	r8, r18
      ce:	4d 01       	movw	r8, r26
      d0:	6b 01       	movw	r12, r22
      d2:	6b 01       	movw	r12, r22
      d4:	6b 01       	movw	r12, r22
      d6:	6b 01       	movw	r12, r22
      d8:	51 01       	movw	r10, r2
      da:	6b 01       	movw	r12, r22
      dc:	6b 01       	movw	r12, r22
      de:	6b 01       	movw	r12, r22
      e0:	6b 01       	movw	r12, r22
      e2:	59 01       	movw	r10, r18
      e4:	5d 01       	movw	r10, r26

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d4 e0       	ldi	r29, 0x04	; 4
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e2 e0       	ldi	r30, 0x02	; 2
      fa:	f1 e1       	ldi	r31, 0x11	; 17
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	aa 36       	cpi	r26, 0x6A	; 106
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	aa e6       	ldi	r26, 0x6A	; 106
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a6 38       	cpi	r26, 0x86	; 134
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 39 04 	call	0x872	; 0x872 <main>
     11c:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
	static volatile int src_nr = 0, counter = 0;
	
	if(counter++ == 10)
     146:	80 91 6c 00 	lds	r24, 0x006C
     14a:	90 91 6d 00 	lds	r25, 0x006D
     14e:	9c 01       	movw	r18, r24
     150:	2f 5f       	subi	r18, 0xFF	; 255
     152:	3f 4f       	sbci	r19, 0xFF	; 255
     154:	30 93 6d 00 	sts	0x006D, r19
     158:	20 93 6c 00 	sts	0x006C, r18
     15c:	0a 97       	sbiw	r24, 0x0a	; 10
     15e:	09 f0       	breq	.+2      	; 0x162 <__vector_9+0x3e>
     160:	3f c0       	rjmp	.+126    	; 0x1e0 <__vector_9+0xbc>
	{
		src_nr = (src_nr + 1) % total_displays;
     162:	80 91 6a 00 	lds	r24, 0x006A
     166:	90 91 6b 00 	lds	r25, 0x006B
     16a:	01 96       	adiw	r24, 0x01	; 1
     16c:	60 91 83 00 	lds	r22, 0x0083
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	0e 94 48 05 	call	0xa90	; 0xa90 <__divmodhi4>
     176:	90 93 6b 00 	sts	0x006B, r25
     17a:	80 93 6a 00 	sts	0x006A, r24
		
		*display_port = (led_type & KATODA) ? (1 << src_nr) : ~(1 << src_nr);
     17e:	e0 91 75 00 	lds	r30, 0x0075
     182:	f0 91 76 00 	lds	r31, 0x0076
     186:	80 91 73 00 	lds	r24, 0x0073
     18a:	80 ff       	sbrs	r24, 0
     18c:	0a c0       	rjmp	.+20     	; 0x1a2 <__vector_9+0x7e>
     18e:	20 91 6a 00 	lds	r18, 0x006A
     192:	30 91 6b 00 	lds	r19, 0x006B
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <__vector_9+0x78>
     19a:	88 0f       	add	r24, r24
     19c:	2a 95       	dec	r18
     19e:	ea f7       	brpl	.-6      	; 0x19a <__vector_9+0x76>
     1a0:	0e c0       	rjmp	.+28     	; 0x1be <__vector_9+0x9a>
     1a2:	80 91 6a 00 	lds	r24, 0x006A
     1a6:	90 91 6b 00 	lds	r25, 0x006B
     1aa:	21 e0       	ldi	r18, 0x01	; 1
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	a9 01       	movw	r20, r18
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__vector_9+0x92>
     1b2:	44 0f       	add	r20, r20
     1b4:	55 1f       	adc	r21, r21
     1b6:	8a 95       	dec	r24
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <__vector_9+0x8e>
     1ba:	ca 01       	movw	r24, r20
     1bc:	80 95       	com	r24
     1be:	80 83       	st	Z, r24
		*digit_port = number[src_nr];
     1c0:	e0 91 7f 00 	lds	r30, 0x007F
     1c4:	f0 91 80 00 	lds	r31, 0x0080
     1c8:	a0 91 6a 00 	lds	r26, 0x006A
     1cc:	b0 91 6b 00 	lds	r27, 0x006B
     1d0:	a9 58       	subi	r26, 0x89	; 137
     1d2:	bf 4f       	sbci	r27, 0xFF	; 255
     1d4:	8c 91       	ld	r24, X
     1d6:	80 83       	st	Z, r24
	
		counter = 0;
     1d8:	10 92 6d 00 	sts	0x006D, r1
     1dc:	10 92 6c 00 	sts	0x006C, r1
	}
}
     1e0:	ff 91       	pop	r31
     1e2:	ef 91       	pop	r30
     1e4:	bf 91       	pop	r27
     1e6:	af 91       	pop	r26
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	7f 91       	pop	r23
     1ee:	6f 91       	pop	r22
     1f0:	5f 91       	pop	r21
     1f2:	4f 91       	pop	r20
     1f4:	3f 91       	pop	r19
     1f6:	2f 91       	pop	r18
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <clearDisplay>:

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
     202:	20 91 83 00 	lds	r18, 0x0083
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	12 16       	cp	r1, r18
     20a:	13 06       	cpc	r1, r19
     20c:	74 f4       	brge	.+28     	; 0x22a <clearDisplay+0x28>
		number[i] = (led_type & KATODA) ? ~0 : 0;
     20e:	40 91 73 00 	lds	r20, 0x0073
     212:	41 70       	andi	r20, 0x01	; 1
     214:	41 95       	neg	r20

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
		number[i] = (led_type & KATODA) ? ~0 : 0;
     21a:	fc 01       	movw	r30, r24
     21c:	e9 58       	subi	r30, 0x89	; 137
     21e:	ff 4f       	sbci	r31, 0xFF	; 255
     220:	40 83       	st	Z, r20

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	82 17       	cp	r24, r18
     226:	93 07       	cpc	r25, r19
     228:	c4 f3       	brlt	.-16     	; 0x21a <clearDisplay+0x18>
     22a:	08 95       	ret

0000022c <convertChar>:

uint8_t convertChar(char s)
{
	uint8_t result = 0;
	
	switch(s)
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	bd 97       	sbiw	r30, 0x2d	; 45
     232:	e9 34       	cpi	r30, 0x49	; 73
     234:	f1 05       	cpc	r31, r1
     236:	08 f0       	brcs	.+2      	; 0x23a <convertChar+0xe>
     238:	4e c0       	rjmp	.+156    	; 0x2d6 <convertChar+0xaa>
     23a:	e6 5d       	subi	r30, 0xD6	; 214
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__tablejump2__>
	{
		case '0':
			result = 0b00111111;
     242:	8f e3       	ldi	r24, 0x3F	; 63
     244:	08 95       	ret
		case '1':
			result = 0b00000110;
			break;
		
		case '2':
			result = 0b01011011;
     246:	8b e5       	ldi	r24, 0x5B	; 91
			break;
     248:	08 95       	ret
		
		case '3':
			result = 0b01001111;
     24a:	8f e4       	ldi	r24, 0x4F	; 79
			break;
     24c:	08 95       	ret
		
		case '4':
			result = 0b01100110;
     24e:	86 e6       	ldi	r24, 0x66	; 102
			break;
     250:	08 95       	ret
		
		case '5':
			result = 0b01101101;
     252:	8d e6       	ldi	r24, 0x6D	; 109
			break;
     254:	08 95       	ret
		
		case '6':
			result = 0b01111101;
     256:	8d e7       	ldi	r24, 0x7D	; 125
			break;
     258:	08 95       	ret
		
		case '7':
			result = 0b00000111;
     25a:	87 e0       	ldi	r24, 0x07	; 7
			break;
     25c:	08 95       	ret
		
		case '8':
			result = 0b01111111;
     25e:	8f e7       	ldi	r24, 0x7F	; 127
			break;
     260:	08 95       	ret
		
		case '9':
			result = 0b01101111;
     262:	8f e6       	ldi	r24, 0x6F	; 111
			break;
     264:	08 95       	ret
			
		case 'A':
			result = 0b01110111;
     266:	87 e7       	ldi	r24, 0x77	; 119
			break;
     268:	08 95       	ret
		
		case 'B':
			result = 0b01111111;
     26a:	8f e7       	ldi	r24, 0x7F	; 127
			break;
     26c:	08 95       	ret
		
		case 'b':
			result = 0b01111100;
     26e:	8c e7       	ldi	r24, 0x7C	; 124
			break;
     270:	08 95       	ret
		
		case 'C':
			result = 0b111001;
     272:	89 e3       	ldi	r24, 0x39	; 57
			break;
     274:	08 95       	ret
		
		case 'c':
			result = 0b1011000;
     276:	88 e5       	ldi	r24, 0x58	; 88
			break;
     278:	08 95       	ret
		
		case 'd':
			result = 0b1011110;
     27a:	8e e5       	ldi	r24, 0x5E	; 94
			break;
     27c:	08 95       	ret
		
		case 'E':
			result = 0b1111001;
     27e:	89 e7       	ldi	r24, 0x79	; 121
			break;
     280:	08 95       	ret
		
		case 'F':
			result = 0b1110001;
     282:	81 e7       	ldi	r24, 0x71	; 113
			break;
     284:	08 95       	ret
		
		case 'G':
			result = 0b111101;
     286:	8d e3       	ldi	r24, 0x3D	; 61
			break;
     288:	08 95       	ret
		
		case 'H':
			result = 0b1110110;
     28a:	86 e7       	ldi	r24, 0x76	; 118
			break;
     28c:	08 95       	ret
		
		case 'h':
			result = 0b1110100;
     28e:	84 e7       	ldi	r24, 0x74	; 116
			break;
     290:	08 95       	ret
		case 'I':
			result = 0b110;
			break;
		
		case 'i':
			result = 0b100;
     292:	84 e0       	ldi	r24, 0x04	; 4
			break;
     294:	08 95       	ret
		
		case 'J':
			result = 0b1111;
     296:	8f e0       	ldi	r24, 0x0F	; 15
			break;
     298:	08 95       	ret
		
		case 'j':
			result = 0b1110;
     29a:	8e e0       	ldi	r24, 0x0E	; 14
			break;
     29c:	08 95       	ret
		
		case 'L':
			result = 0b111000;
     29e:	88 e3       	ldi	r24, 0x38	; 56
			break;
     2a0:	08 95       	ret
		case 'O':
			result = 0b111111;
			break;
		
		case 'o':
			result = 0b1011100;
     2a2:	8c e5       	ldi	r24, 0x5C	; 92
			break;
     2a4:	08 95       	ret
		
		case 'P':
			result = 0b1110011;
     2a6:	83 e7       	ldi	r24, 0x73	; 115
			break;
     2a8:	08 95       	ret
		
		case 'S':
			result = 0b1101101;
     2aa:	8d e6       	ldi	r24, 0x6D	; 109
			break;
     2ac:	08 95       	ret
		
		case 'T':
			result = 0b110001;
     2ae:	81 e3       	ldi	r24, 0x31	; 49
			break;
     2b0:	08 95       	ret
		
		case 't':
			result = 0b1111000;
     2b2:	88 e7       	ldi	r24, 0x78	; 120
			break;
     2b4:	08 95       	ret
		
		case 'U':
			result = 0b111110;
     2b6:	8e e3       	ldi	r24, 0x3E	; 62
			break;
     2b8:	08 95       	ret
		
		case 'u':
			result = 0b11100;
     2ba:	8c e1       	ldi	r24, 0x1C	; 28
			break;
     2bc:	08 95       	ret
		
		case 'Y':
			result = 0b1100110;
     2be:	86 e6       	ldi	r24, 0x66	; 102
			break;
     2c0:	08 95       	ret
		
		case 'Z':
			result = 0b1011011;
     2c2:	8b e5       	ldi	r24, 0x5B	; 91
			break;
     2c4:	08 95       	ret
		
		case '.':
			result = 0b10000000;
     2c6:	80 e8       	ldi	r24, 0x80	; 128
			break;
     2c8:	08 95       	ret
		
		case '-':
			result = 0b1000000;
     2ca:	80 e4       	ldi	r24, 0x40	; 64
			break;
     2cc:	08 95       	ret
		
		case '_':
			result = 0b1000;
     2ce:	88 e0       	ldi	r24, 0x08	; 8
			break;
     2d0:	08 95       	ret
		
		case '=':
			result = 0b1001000;
     2d2:	88 e4       	ldi	r24, 0x48	; 72
			break;
     2d4:	08 95       	ret
		
		default:
			result = 0;
     2d6:	80 e0       	ldi	r24, 0x00	; 0
			break;
     2d8:	08 95       	ret
		case '0':
			result = 0b00111111;
			break;
		
		case '1':
			result = 0b00000110;
     2da:	86 e0       	ldi	r24, 0x06	; 6
			result = 0;
			break;
	}
	
	return result;
}
     2dc:	08 95       	ret

000002de <LEDSetValue>:
	position = 0;
	set_timer0();
}

void LEDSetValue(char *val)
{
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	fc 01       	movw	r30, r24
	int i;
	
	for(i = 0; i < total_displays; i++)
     2f6:	00 91 83 00 	lds	r16, 0x0083
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	10 16       	cp	r1, r16
     2fe:	11 06       	cpc	r1, r17
     300:	7c f5       	brge	.+94     	; 0x360 <LEDSetValue+0x82>
	{
		if(val[i] == '\0')
     302:	20 81       	ld	r18, Z
     304:	22 23       	and	r18, r18
     306:	61 f1       	breq	.+88     	; 0x360 <LEDSetValue+0x82>
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
     308:	a0 90 74 00 	lds	r10, 0x0074
     30c:	80 91 73 00 	lds	r24, 0x0073
     310:	81 70       	andi	r24, 0x01	; 1
     312:	98 2e       	mov	r9, r24
     314:	6f 01       	movw	r12, r30
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	c8 1a       	sub	r12, r24
     31a:	d8 0a       	sbc	r13, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
     31c:	c0 e0       	ldi	r28, 0x00	; 0
     31e:	d0 e0       	ldi	r29, 0x00	; 0
     320:	b1 2c       	mov	r11, r1
     322:	05 c0       	rjmp	.+10     	; 0x32e <LEDSetValue+0x50>
	{
		if(val[i] == '\0')
     324:	f6 01       	movw	r30, r12
     326:	21 91       	ld	r18, Z+
     328:	6f 01       	movw	r12, r30
     32a:	22 23       	and	r18, r18
     32c:	c9 f0       	breq	.+50     	; 0x360 <LEDSetValue+0x82>
     32e:	ce 01       	movw	r24, r28
     330:	8a 0d       	add	r24, r10
     332:	9b 1d       	adc	r25, r11
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
     334:	b8 01       	movw	r22, r16
     336:	0e 94 48 05 	call	0xa90	; 0xa90 <__divmodhi4>
     33a:	7c 01       	movw	r14, r24
     33c:	99 20       	and	r9, r9
     33e:	29 f0       	breq	.+10     	; 0x34a <LEDSetValue+0x6c>
     340:	82 2f       	mov	r24, r18
     342:	0e 94 16 01 	call	0x22c	; 0x22c <convertChar>
     346:	80 95       	com	r24
     348:	03 c0       	rjmp	.+6      	; 0x350 <LEDSetValue+0x72>
     34a:	82 2f       	mov	r24, r18
     34c:	0e 94 16 01 	call	0x22c	; 0x22c <convertChar>
     350:	f7 01       	movw	r30, r14
     352:	e9 58       	subi	r30, 0x89	; 137
     354:	ff 4f       	sbci	r31, 0xFF	; 255
     356:	80 83       	st	Z, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
     358:	21 96       	adiw	r28, 0x01	; 1
     35a:	c0 17       	cp	r28, r16
     35c:	d1 07       	cpc	r29, r17
     35e:	14 f3       	brlt	.-60     	; 0x324 <LEDSetValue+0x46>
		if(val[i] == '\0')
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
	}
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	bf 90       	pop	r11
     372:	af 90       	pop	r10
     374:	9f 90       	pop	r9
     376:	08 95       	ret

00000378 <LEDSetNumberWithZero>:
	sprintf(s, "%d\0", nr);
	LEDSetValue(s);
}

void LEDSetNumberWithZero(int nr)
{
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	29 97       	sbiw	r28, 0x09	; 9
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
	char s[MAX_NUM_DISPLAY + 1]; // +1 end char
	
	if(nr < 10)
     38c:	8a 30       	cpi	r24, 0x0A	; 10
     38e:	91 05       	cpc	r25, r1
     390:	9c f4       	brge	.+38     	; 0x3b8 <LEDSetNumberWithZero+0x40>
		sprintf(s, "0%d\0", nr);
     392:	9f 93       	push	r25
     394:	8f 93       	push	r24
     396:	84 e6       	ldi	r24, 0x64	; 100
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	9f 93       	push	r25
     39c:	8f 93       	push	r24
     39e:	ce 01       	movw	r24, r28
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	9f 93       	push	r25
     3a4:	8f 93       	push	r24
     3a6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sprintf>
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	12 c0       	rjmp	.+36     	; 0x3dc <LEDSetNumberWithZero+0x64>
	else
		sprintf(s, "%d\0", nr);
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	80 e6       	ldi	r24, 0x60	; 96
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	ce 01       	movw	r24, r28
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	0e 94 ae 05 	call	0xb5c	; 0xb5c <sprintf>
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
	
	LEDSetValue(s);
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 6f 01 	call	0x2de	; 0x2de <LEDSetValue>
}
     3e4:	29 96       	adiw	r28, 0x09	; 9
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <set_timer0>:
	return result;
}

void set_timer0()
{
	TCCR0 = 1 << CS01;
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
     3fa:	89 b7       	in	r24, 0x39	; 57
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	89 bf       	out	0x39, r24	; 57
     400:	08 95       	ret

00000402 <LEDInit>:
		counter = 0;
	}
}

void LEDInit(uint8_t total_displays_f, uint8_t led_type_f, volatile uint8_t *digit_ddr_wsk, volatile uint8_t *digit_port_wsk, volatile uint8_t *display_ddr_wsk, volatile uint8_t *display_port_wsk)
{
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
	total_displays = total_displays_f;
     40a:	80 93 83 00 	sts	0x0083, r24
	led_type = led_type_f % 2;
     40e:	61 70       	andi	r22, 0x01	; 1
     410:	60 93 73 00 	sts	0x0073, r22
	digit_ddr = digit_ddr_wsk;
     414:	50 93 85 00 	sts	0x0085, r21
     418:	40 93 84 00 	sts	0x0084, r20
	digit_port = digit_port_wsk;
     41c:	30 93 80 00 	sts	0x0080, r19
     420:	20 93 7f 00 	sts	0x007F, r18
	display_ddr = display_ddr_wsk;
     424:	10 93 82 00 	sts	0x0082, r17
     428:	00 93 81 00 	sts	0x0081, r16
	display_port = display_port_wsk;
     42c:	f0 92 76 00 	sts	0x0076, r15
     430:	e0 92 75 00 	sts	0x0075, r14
	
	*digit_ddr = 0xFF;
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	fa 01       	movw	r30, r20
     438:	80 83       	st	Z, r24
	*digit_port = 0;
     43a:	e0 91 7f 00 	lds	r30, 0x007F
     43e:	f0 91 80 00 	lds	r31, 0x0080
     442:	10 82       	st	Z, r1
	*display_ddr = 0;
     444:	e0 91 81 00 	lds	r30, 0x0081
     448:	f0 91 82 00 	lds	r31, 0x0082
     44c:	10 82       	st	Z, r1
	*display_port = 0xFF;
     44e:	e0 91 75 00 	lds	r30, 0x0075
     452:	f0 91 76 00 	lds	r31, 0x0076
     456:	80 83       	st	Z, r24
	
	int i;
	for(i = 0; i < total_displays; i++)
     458:	80 91 83 00 	lds	r24, 0x0083
     45c:	88 23       	and	r24, r24
     45e:	c9 f0       	breq	.+50     	; 0x492 <__stack+0x33>
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
	{
		*display_ddr |= (1 << i);
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	e0 91 81 00 	lds	r30, 0x0081
     46c:	f0 91 82 00 	lds	r31, 0x0082
     470:	60 81       	ld	r22, Z
     472:	9a 01       	movw	r18, r20
     474:	08 2e       	mov	r0, r24
     476:	02 c0       	rjmp	.+4      	; 0x47c <__stack+0x1d>
     478:	22 0f       	add	r18, r18
     47a:	33 1f       	adc	r19, r19
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <__stack+0x19>
     480:	26 2b       	or	r18, r22
     482:	20 83       	st	Z, r18
	*digit_port = 0;
	*display_ddr = 0;
	*display_port = 0xFF;
	
	int i;
	for(i = 0; i < total_displays; i++)
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	20 91 83 00 	lds	r18, 0x0083
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	82 17       	cp	r24, r18
     48e:	93 07       	cpc	r25, r19
     490:	5c f3       	brlt	.-42     	; 0x468 <__stack+0x9>
	{
		*display_ddr |= (1 << i);
	}
	
	position = 0;
     492:	10 92 74 00 	sts	0x0074, r1
	set_timer0();
     496:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <set_timer0>
}
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	08 95       	ret

000004a4 <LEDDot>:
	TCCR0 = 1 << CS01;
	TIMSK |= 1 << TOIE0;
}

void LEDDot(uint8_t dot)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
	uint8_t result;
	
	result = (led_type & KATODA) ? ~number[position] : number[position];
     4a8:	90 91 73 00 	lds	r25, 0x0073
     4ac:	c9 2f       	mov	r28, r25
     4ae:	c1 70       	andi	r28, 0x01	; 1
     4b0:	90 ff       	sbrs	r25, 0
     4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <LEDDot+0x20>
     4b4:	e0 91 74 00 	lds	r30, 0x0074
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	e9 58       	subi	r30, 0x89	; 137
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	d0 81       	ld	r29, Z
     4c0:	d0 95       	com	r29
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <LEDDot+0x2c>
     4c4:	e0 91 74 00 	lds	r30, 0x0074
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	e9 58       	subi	r30, 0x89	; 137
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	d0 81       	ld	r29, Z
	
	if(dot == DEL_DOT)
     4d0:	81 11       	cpse	r24, r1
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <LEDDot+0x3c>
	{
		result &= ~convertChar('.');
     4d4:	8e e2       	ldi	r24, 0x2E	; 46
     4d6:	0e 94 16 01 	call	0x22c	; 0x22c <convertChar>
     4da:	80 95       	com	r24
     4dc:	8d 23       	and	r24, r29
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <LEDDot+0x44>
	}
	else
	{
		result |= convertChar('.');
     4e0:	8e e2       	ldi	r24, 0x2E	; 46
     4e2:	0e 94 16 01 	call	0x22c	; 0x22c <convertChar>
     4e6:	8d 2b       	or	r24, r29
	}
	
	number[position] = (led_type & KATODA) ? ~result : result;
     4e8:	e0 91 74 00 	lds	r30, 0x0074
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	cc 23       	and	r28, r28
     4f0:	19 f0       	breq	.+6      	; 0x4f8 <LEDDot+0x54>
     4f2:	d8 2f       	mov	r29, r24
     4f4:	d0 95       	com	r29
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <LEDDot+0x56>
     4f8:	d8 2f       	mov	r29, r24
     4fa:	e9 58       	subi	r30, 0x89	; 137
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	d0 83       	st	Z, r29
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
     506:	1f 92       	push	r1
     508:	0f 92       	push	r0
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	af 93       	push	r26
     516:	bf 93       	push	r27
	TCCR2 = (1 << CS22) | (1 << CS20);
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	85 bd       	out	0x25, r24	; 37
	
	if(CLOCKStatus & (1 << ACTIVE_STATUS))
     51c:	80 91 6e 00 	lds	r24, 0x006E
     520:	81 ff       	sbrs	r24, 1
     522:	40 c0       	rjmp	.+128    	; 0x5a4 <__vector_4+0x9e>
	{
		if(CLOCKStatus & (1 << REVERSE_CLOCK))
     524:	80 91 6e 00 	lds	r24, 0x006E
     528:	82 ff       	sbrs	r24, 2
     52a:	20 c0       	rjmp	.+64     	; 0x56c <__vector_4+0x66>
		{
			if(CLOCKTime > 0)
     52c:	80 91 6f 00 	lds	r24, 0x006F
     530:	90 91 70 00 	lds	r25, 0x0070
     534:	a0 91 71 00 	lds	r26, 0x0071
     538:	b0 91 72 00 	lds	r27, 0x0072
     53c:	89 2b       	or	r24, r25
     53e:	8a 2b       	or	r24, r26
     540:	8b 2b       	or	r24, r27
     542:	39 f1       	breq	.+78     	; 0x592 <__vector_4+0x8c>
			CLOCKTime -= 1;
     544:	80 91 6f 00 	lds	r24, 0x006F
     548:	90 91 70 00 	lds	r25, 0x0070
     54c:	a0 91 71 00 	lds	r26, 0x0071
     550:	b0 91 72 00 	lds	r27, 0x0072
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	a1 09       	sbc	r26, r1
     558:	b1 09       	sbc	r27, r1
     55a:	80 93 6f 00 	sts	0x006F, r24
     55e:	90 93 70 00 	sts	0x0070, r25
     562:	a0 93 71 00 	sts	0x0071, r26
     566:	b0 93 72 00 	sts	0x0072, r27
     56a:	13 c0       	rjmp	.+38     	; 0x592 <__vector_4+0x8c>
		}
		else
			CLOCKTime = (CLOCKTime + 1);
     56c:	80 91 6f 00 	lds	r24, 0x006F
     570:	90 91 70 00 	lds	r25, 0x0070
     574:	a0 91 71 00 	lds	r26, 0x0071
     578:	b0 91 72 00 	lds	r27, 0x0072
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	a1 1d       	adc	r26, r1
     580:	b1 1d       	adc	r27, r1
     582:	80 93 6f 00 	sts	0x006F, r24
     586:	90 93 70 00 	sts	0x0070, r25
     58a:	a0 93 71 00 	sts	0x0071, r26
     58e:	b0 93 72 00 	sts	0x0072, r27
		
		if(!(CLOCKStatus & (1 << CHANGE_STATUS)))
     592:	80 91 6e 00 	lds	r24, 0x006E
     596:	80 fd       	sbrc	r24, 0
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <__vector_4+0x9e>
			CLOCKStatus |= (1 << CHANGE_STATUS);	
     59a:	80 91 6e 00 	lds	r24, 0x006E
     59e:	81 60       	ori	r24, 0x01	; 1
     5a0:	80 93 6e 00 	sts	0x006E, r24
	}
}
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	0f 90       	pop	r0
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	0f 90       	pop	r0
     5b2:	1f 90       	pop	r1
     5b4:	18 95       	reti

000005b6 <getSeconds>:

int getSeconds()
{
	return (int)((CLOCKTime % HOUR_SECONDS) % MINUTE_SECONDS);
     5b6:	60 91 6f 00 	lds	r22, 0x006F
     5ba:	70 91 70 00 	lds	r23, 0x0070
     5be:	80 91 71 00 	lds	r24, 0x0071
     5c2:	90 91 72 00 	lds	r25, 0x0072
     5c6:	20 e1       	ldi	r18, 0x10	; 16
     5c8:	3e e0       	ldi	r19, 0x0E	; 14
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
     5d2:	2c e3       	ldi	r18, 0x3C	; 60
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
}
     5de:	cb 01       	movw	r24, r22
     5e0:	08 95       	ret

000005e2 <getMinutes>:

int getMinutes()
{
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
     5e2:	60 91 6f 00 	lds	r22, 0x006F
     5e6:	70 91 70 00 	lds	r23, 0x0070
     5ea:	80 91 71 00 	lds	r24, 0x0071
     5ee:	90 91 72 00 	lds	r25, 0x0072
     5f2:	20 e1       	ldi	r18, 0x10	; 16
     5f4:	3e e0       	ldi	r19, 0x0E	; 14
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
     5fe:	2c e3       	ldi	r18, 0x3C	; 60
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
}
     60a:	c9 01       	movw	r24, r18
     60c:	08 95       	ret

0000060e <setSeconds>:
{
	return (int)(CLOCKTime / HOUR_SECONDS);
}

void setSeconds(int new_seconds)
{
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	00 d0       	rcall	.+0      	; 0x61c <setSeconds+0xe>
     61c:	00 d0       	rcall	.+0      	; 0x61e <setSeconds+0x10>
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	7c 01       	movw	r14, r24
	int seconds = getSeconds();
     624:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getSeconds>
     628:	8c 01       	movw	r16, r24
	volatile uint32_t tmpTime = CLOCKTime;
     62a:	40 91 6f 00 	lds	r20, 0x006F
     62e:	50 91 70 00 	lds	r21, 0x0070
     632:	60 91 71 00 	lds	r22, 0x0071
     636:	70 91 72 00 	lds	r23, 0x0072
     63a:	49 83       	std	Y+1, r20	; 0x01
     63c:	5a 83       	std	Y+2, r21	; 0x02
     63e:	6b 83       	std	Y+3, r22	; 0x03
     640:	7c 83       	std	Y+4, r23	; 0x04
	
	new_seconds %= 60;
     642:	c7 01       	movw	r24, r14
     644:	6c e3       	ldi	r22, 0x3C	; 60
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	0e 94 48 05 	call	0xa90	; 0xa90 <__divmodhi4>
	
	if(new_seconds < 0)
     64c:	99 23       	and	r25, r25
     64e:	64 f1       	brlt	.+88     	; 0x6a8 <setSeconds+0x9a>
		return;
	
	tmpTime -= (uint32_t)seconds;
     650:	49 81       	ldd	r20, Y+1	; 0x01
     652:	5a 81       	ldd	r21, Y+2	; 0x02
     654:	6b 81       	ldd	r22, Y+3	; 0x03
     656:	7c 81       	ldd	r23, Y+4	; 0x04
     658:	22 27       	eor	r18, r18
     65a:	17 fd       	sbrc	r17, 7
     65c:	20 95       	com	r18
     65e:	32 2f       	mov	r19, r18
     660:	40 1b       	sub	r20, r16
     662:	51 0b       	sbc	r21, r17
     664:	62 0b       	sbc	r22, r18
     666:	73 0b       	sbc	r23, r19
     668:	49 83       	std	Y+1, r20	; 0x01
     66a:	5a 83       	std	Y+2, r21	; 0x02
     66c:	6b 83       	std	Y+3, r22	; 0x03
     66e:	7c 83       	std	Y+4, r23	; 0x04
	tmpTime += (uint32_t)new_seconds;
     670:	49 81       	ldd	r20, Y+1	; 0x01
     672:	5a 81       	ldd	r21, Y+2	; 0x02
     674:	6b 81       	ldd	r22, Y+3	; 0x03
     676:	7c 81       	ldd	r23, Y+4	; 0x04
     678:	aa 27       	eor	r26, r26
     67a:	97 fd       	sbrc	r25, 7
     67c:	a0 95       	com	r26
     67e:	ba 2f       	mov	r27, r26
     680:	84 0f       	add	r24, r20
     682:	95 1f       	adc	r25, r21
     684:	a6 1f       	adc	r26, r22
     686:	b7 1f       	adc	r27, r23
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	9a 83       	std	Y+2, r25	; 0x02
     68c:	ab 83       	std	Y+3, r26	; 0x03
     68e:	bc 83       	std	Y+4, r27	; 0x04
	
	CLOCKTime = tmpTime;
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	ab 81       	ldd	r26, Y+3	; 0x03
     696:	bc 81       	ldd	r27, Y+4	; 0x04
     698:	80 93 6f 00 	sts	0x006F, r24
     69c:	90 93 70 00 	sts	0x0070, r25
     6a0:	a0 93 71 00 	sts	0x0071, r26
     6a4:	b0 93 72 00 	sts	0x0072, r27
}
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	08 95       	ret

000006be <setMinutes>:

void setMinutes(int new_minutes)
{
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <setMinutes+0xe>
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <setMinutes+0x10>
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	7c 01       	movw	r14, r24
	int minutes = getMinutes();
     6d4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <getMinutes>
     6d8:	fc 01       	movw	r30, r24
	volatile uint32_t tmpTime = CLOCKTime;
     6da:	40 91 6f 00 	lds	r20, 0x006F
     6de:	50 91 70 00 	lds	r21, 0x0070
     6e2:	60 91 71 00 	lds	r22, 0x0071
     6e6:	70 91 72 00 	lds	r23, 0x0072
     6ea:	49 83       	std	Y+1, r20	; 0x01
     6ec:	5a 83       	std	Y+2, r21	; 0x02
     6ee:	6b 83       	std	Y+3, r22	; 0x03
     6f0:	7c 83       	std	Y+4, r23	; 0x04
	
	new_minutes %= 60;
     6f2:	c7 01       	movw	r24, r14
     6f4:	6c e3       	ldi	r22, 0x3C	; 60
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	0e 94 48 05 	call	0xa90	; 0xa90 <__divmodhi4>
     6fc:	ac 01       	movw	r20, r24
	
	if(new_minutes < 0)
     6fe:	99 23       	and	r25, r25
     700:	64 f1       	brlt	.+88     	; 0x75a <setMinutes+0x9c>
		return;
	
	tmpTime -= (uint32_t)minutes * MINUTE_SECONDS;
     702:	c9 80       	ldd	r12, Y+1	; 0x01
     704:	da 80       	ldd	r13, Y+2	; 0x02
     706:	eb 80       	ldd	r14, Y+3	; 0x03
     708:	fc 80       	ldd	r15, Y+4	; 0x04
     70a:	2c e3       	ldi	r18, 0x3C	; 60
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	df 01       	movw	r26, r30
     710:	0e 94 84 05 	call	0xb08	; 0xb08 <__usmulhisi3>
     714:	c6 1a       	sub	r12, r22
     716:	d7 0a       	sbc	r13, r23
     718:	e8 0a       	sbc	r14, r24
     71a:	f9 0a       	sbc	r15, r25
     71c:	c9 82       	std	Y+1, r12	; 0x01
     71e:	da 82       	std	Y+2, r13	; 0x02
     720:	eb 82       	std	Y+3, r14	; 0x03
     722:	fc 82       	std	Y+4, r15	; 0x04
	tmpTime += (uint32_t)new_minutes * MINUTE_SECONDS;
     724:	c9 80       	ldd	r12, Y+1	; 0x01
     726:	da 80       	ldd	r13, Y+2	; 0x02
     728:	eb 80       	ldd	r14, Y+3	; 0x03
     72a:	fc 80       	ldd	r15, Y+4	; 0x04
     72c:	da 01       	movw	r26, r20
     72e:	0e 94 84 05 	call	0xb08	; 0xb08 <__usmulhisi3>
     732:	c6 0e       	add	r12, r22
     734:	d7 1e       	adc	r13, r23
     736:	e8 1e       	adc	r14, r24
     738:	f9 1e       	adc	r15, r25
     73a:	c9 82       	std	Y+1, r12	; 0x01
     73c:	da 82       	std	Y+2, r13	; 0x02
     73e:	eb 82       	std	Y+3, r14	; 0x03
     740:	fc 82       	std	Y+4, r15	; 0x04
	
	CLOCKTime = tmpTime;
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	ab 81       	ldd	r26, Y+3	; 0x03
     748:	bc 81       	ldd	r27, Y+4	; 0x04
     74a:	80 93 6f 00 	sts	0x006F, r24
     74e:	90 93 70 00 	sts	0x0070, r25
     752:	a0 93 71 00 	sts	0x0071, r26
     756:	b0 93 72 00 	sts	0x0072, r27
}
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	08 95       	ret

00000770 <setHours>:

void setHours(int new_hours)
{
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <setHours+0x12>
     782:	00 d0       	rcall	.+0      	; 0x784 <setHours+0x14>
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	8c 01       	movw	r16, r24
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
}

int getHours()
{
	return (int)(CLOCKTime / HOUR_SECONDS);
     78a:	60 91 6f 00 	lds	r22, 0x006F
     78e:	70 91 70 00 	lds	r23, 0x0070
     792:	80 91 71 00 	lds	r24, 0x0071
     796:	90 91 72 00 	lds	r25, 0x0072
     79a:	20 e1       	ldi	r18, 0x10	; 16
     79c:	3e e0       	ldi	r19, 0x0E	; 14
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
}

void setHours(int new_hours)
{
	int hours = getHours();
	volatile uint32_t tmpTime = CLOCKTime;
     7a6:	80 91 6f 00 	lds	r24, 0x006F
     7aa:	90 91 70 00 	lds	r25, 0x0070
     7ae:	a0 91 71 00 	lds	r26, 0x0071
     7b2:	b0 91 72 00 	lds	r27, 0x0072
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	9a 83       	std	Y+2, r25	; 0x02
     7ba:	ab 83       	std	Y+3, r26	; 0x03
     7bc:	bc 83       	std	Y+4, r27	; 0x04
	
	if(new_hours < 0)
     7be:	11 23       	and	r17, r17
     7c0:	64 f1       	brlt	.+88     	; 0x81a <setHours+0xaa>
		return;
		
	tmpTime -= (uint32_t)hours * HOUR_SECONDS;	
     7c2:	c9 80       	ldd	r12, Y+1	; 0x01
     7c4:	da 80       	ldd	r13, Y+2	; 0x02
     7c6:	eb 80       	ldd	r14, Y+3	; 0x03
     7c8:	fc 80       	ldd	r15, Y+4	; 0x04
     7ca:	d9 01       	movw	r26, r18
     7cc:	20 e1       	ldi	r18, 0x10	; 16
     7ce:	3e e0       	ldi	r19, 0x0E	; 14
     7d0:	0e 94 84 05 	call	0xb08	; 0xb08 <__usmulhisi3>
     7d4:	c6 1a       	sub	r12, r22
     7d6:	d7 0a       	sbc	r13, r23
     7d8:	e8 0a       	sbc	r14, r24
     7da:	f9 0a       	sbc	r15, r25
     7dc:	c9 82       	std	Y+1, r12	; 0x01
     7de:	da 82       	std	Y+2, r13	; 0x02
     7e0:	eb 82       	std	Y+3, r14	; 0x03
     7e2:	fc 82       	std	Y+4, r15	; 0x04
	tmpTime += (uint32_t)new_hours * HOUR_SECONDS;
     7e4:	c9 80       	ldd	r12, Y+1	; 0x01
     7e6:	da 80       	ldd	r13, Y+2	; 0x02
     7e8:	eb 80       	ldd	r14, Y+3	; 0x03
     7ea:	fc 80       	ldd	r15, Y+4	; 0x04
     7ec:	d8 01       	movw	r26, r16
     7ee:	0e 94 84 05 	call	0xb08	; 0xb08 <__usmulhisi3>
     7f2:	c6 0e       	add	r12, r22
     7f4:	d7 1e       	adc	r13, r23
     7f6:	e8 1e       	adc	r14, r24
     7f8:	f9 1e       	adc	r15, r25
     7fa:	c9 82       	std	Y+1, r12	; 0x01
     7fc:	da 82       	std	Y+2, r13	; 0x02
     7fe:	eb 82       	std	Y+3, r14	; 0x03
     800:	fc 82       	std	Y+4, r15	; 0x04
	
	CLOCKTime = tmpTime;
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	9a 81       	ldd	r25, Y+2	; 0x02
     806:	ab 81       	ldd	r26, Y+3	; 0x03
     808:	bc 81       	ldd	r27, Y+4	; 0x04
     80a:	80 93 6f 00 	sts	0x006F, r24
     80e:	90 93 70 00 	sts	0x0070, r25
     812:	a0 93 71 00 	sts	0x0071, r26
     816:	b0 93 72 00 	sts	0x0072, r27
}
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	08 95       	ret

00000834 <CLOCKStart>:
void CLOCKStart()
{
	/*
		this must be before set CLOCKStatus, because in otherwise timer will increase its value twice
	*/
	TIMSK |= (1 << TOIE2);
     834:	89 b7       	in	r24, 0x39	; 57
     836:	80 64       	ori	r24, 0x40	; 64
     838:	89 bf       	out	0x39, r24	; 57
	CLOCKStatus |= (1 << ACTIVE_STATUS);
     83a:	80 91 6e 00 	lds	r24, 0x006E
     83e:	82 60       	ori	r24, 0x02	; 2
     840:	80 93 6e 00 	sts	0x006E, r24
     844:	08 95       	ret

00000846 <CLOCKStop>:
void CLOCKStop()
{
	/*
		this must be before set CLOCKStatus, because in otherwise timer will increase its value twice
	*/
	TIMSK &= ~(1 << TOIE2);
     846:	89 b7       	in	r24, 0x39	; 57
     848:	8f 7b       	andi	r24, 0xBF	; 191
     84a:	89 bf       	out	0x39, r24	; 57
	CLOCKStatus &= ~(1 << ACTIVE_STATUS);
     84c:	80 91 6e 00 	lds	r24, 0x006E
     850:	8d 7f       	andi	r24, 0xFD	; 253
     852:	80 93 6e 00 	sts	0x006E, r24
     856:	08 95       	ret

00000858 <CLOCKIsActive>:
}

int CLOCKIsActive()
{
	if(CLOCKStatus & (1 << ACTIVE_STATUS))
     858:	80 91 6e 00 	lds	r24, 0x006E
		return 1;
	else
		return 0;
}
     85c:	86 95       	lsr	r24
     85e:	81 70       	andi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	08 95       	ret

00000864 <CLOCKInit>:

void CLOCKInit()
{
	ASSR |= (1 << AS2); // set timer in async mode
     864:	82 b5       	in	r24, 0x22	; 34
     866:	88 60       	ori	r24, 0x08	; 8
     868:	82 bd       	out	0x22, r24	; 34
	
	TCNT2 = 0;
     86a:	14 bc       	out	0x24, r1	; 36
	TCCR2 = (1 << CS22) | (1 << CS20);
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	85 bd       	out	0x25, r24	; 37
     870:	08 95       	ret

00000872 <main>:
#include <util/delay.h>

int main(void)
{
	// przekaznik
	DDRB = 0x00000001;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
     876:	18 ba       	out	0x18, r1	; 24
	
	uint8_t set_time_mode = 1; // set default: hour_mod
	uint8_t modyfi_mode = 1; // set default: true
	uint8_t dot = 0;
	
	LEDInit(4, 1, &DDRD, &PORTD, &DDRC, &PORTC);
     878:	0f 2e       	mov	r0, r31
     87a:	f5 e3       	ldi	r31, 0x35	; 53
     87c:	ef 2e       	mov	r14, r31
     87e:	f1 2c       	mov	r15, r1
     880:	f0 2d       	mov	r31, r0
     882:	04 e3       	ldi	r16, 0x34	; 52
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	22 e3       	ldi	r18, 0x32	; 50
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	41 e3       	ldi	r20, 0x31	; 49
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	0e 94 01 02 	call	0x402	; 0x402 <LEDInit>
	CLOCKInit();
     896:	0e 94 32 04 	call	0x864	; 0x864 <CLOCKInit>
	CLOCKStatus |= (1 << REVERSE_CLOCK);
     89a:	80 91 6e 00 	lds	r24, 0x006E
     89e:	84 60       	ori	r24, 0x04	; 4
     8a0:	80 93 6e 00 	sts	0x006E, r24
	setHours(12);
     8a4:	8c e0       	ldi	r24, 0x0C	; 12
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 b8 03 	call	0x770	; 0x770 <setHours>
	
	sei();
     8ac:	78 94       	sei
	
	clearDisplay();
     8ae:	0e 94 01 01 	call	0x202	; 0x202 <clearDisplay>
	DDRB = 0x00000001;
	PORTB = 0;
	
	uint8_t set_time_mode = 1; // set default: hour_mod
	uint8_t modyfi_mode = 1; // set default: true
	uint8_t dot = 0;
     8b2:	d0 e0       	ldi	r29, 0x00	; 0
	// przekaznik
	DDRB = 0x00000001;
	PORTB = 0;
	
	uint8_t set_time_mode = 1; // set default: hour_mod
	uint8_t modyfi_mode = 1; // set default: true
     8b4:	bb 24       	eor	r11, r11
     8b6:	b3 94       	inc	r11
{
	// przekaznik
	DDRB = 0x00000001;
	PORTB = 0;
	
	uint8_t set_time_mode = 1; // set default: hour_mod
     8b8:	11 e0       	ldi	r17, 0x01	; 1
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
			modyfi_mode = 1;
     8ba:	c1 e0       	ldi	r28, 0x01	; 1
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
}

int getHours()
{
	return (int)(CLOCKTime / HOUR_SECONDS);
     8bc:	0f 2e       	mov	r0, r31
     8be:	f0 e1       	ldi	r31, 0x10	; 16
     8c0:	cf 2e       	mov	r12, r31
     8c2:	fe e0       	ldi	r31, 0x0E	; 14
     8c4:	df 2e       	mov	r13, r31
     8c6:	e1 2c       	mov	r14, r1
     8c8:	f1 2c       	mov	r15, r1
     8ca:	f0 2d       	mov	r31, r0
	}
}

void LEDSetPosition(uint8_t pos)
{
	position = pos % MAX_NUM_DISPLAY;
     8cc:	02 e0       	ldi	r16, 0x02	; 2
	clearDisplay();
	
	while(1)
	{
		// finish time
		if(CLOCKTime == 0 && CLOCKIsActive())
     8ce:	80 91 6f 00 	lds	r24, 0x006F
     8d2:	90 91 70 00 	lds	r25, 0x0070
     8d6:	a0 91 71 00 	lds	r26, 0x0071
     8da:	b0 91 72 00 	lds	r27, 0x0072
     8de:	89 2b       	or	r24, r25
     8e0:	8a 2b       	or	r24, r26
     8e2:	8b 2b       	or	r24, r27
     8e4:	49 f4       	brne	.+18     	; 0x8f8 <main+0x86>
     8e6:	0e 94 2c 04 	call	0x858	; 0x858 <CLOCKIsActive>
     8ea:	89 2b       	or	r24, r25
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <main+0x86>
		{
			CLOCKStop();
     8ee:	0e 94 23 04 	call	0x846	; 0x846 <CLOCKStop>
			
			set_time_mode = 1;
			modyfi_mode = 1;
			
			PORTB &= ~(1 << RELAY); // RELAY OFF
     8f2:	c0 98       	cbi	0x18, 0	; 24
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
			modyfi_mode = 1;
     8f4:	bc 2e       	mov	r11, r28
		// finish time
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
     8f6:	1c 2f       	mov	r17, r28
     8f8:	10 92 74 00 	sts	0x0074, r1
     8fc:	60 91 6f 00 	lds	r22, 0x006F
     900:	70 91 70 00 	lds	r23, 0x0070
     904:	80 91 71 00 	lds	r24, 0x0071
     908:	90 91 72 00 	lds	r25, 0x0072
     90c:	a7 01       	movw	r20, r14
     90e:	96 01       	movw	r18, r12
     910:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
			PORTB &= ~(1 << RELAY); // RELAY OFF
		}
		
		// LED
		LEDSetPosition(0);
		LEDSetNumberWithZero(getHours());
     914:	c9 01       	movw	r24, r18
     916:	0e 94 bc 01 	call	0x378	; 0x378 <LEDSetNumberWithZero>
     91a:	c0 93 74 00 	sts	0x0074, r28
		
		LEDSetPosition(1);
		
		if(CLOCKIsActive())
     91e:	0e 94 2c 04 	call	0x858	; 0x858 <CLOCKIsActive>
     922:	89 2b       	or	r24, r25
     924:	b1 f0       	breq	.+44     	; 0x952 <main+0xe0>
		{
			if(CLOCKStatus & (1 << CHANGE_STATUS))
     926:	80 91 6e 00 	lds	r24, 0x006E
     92a:	80 ff       	sbrs	r24, 0
     92c:	07 c0       	rjmp	.+14     	; 0x93c <main+0xca>
			{
				dot += 1;
     92e:	df 5f       	subi	r29, 0xFF	; 255
				dot %= 2;
     930:	d1 70       	andi	r29, 0x01	; 1
				
				CLOCKStatus &= ~(1 << CHANGE_STATUS);
     932:	80 91 6e 00 	lds	r24, 0x006E
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	80 93 6e 00 	sts	0x006E, r24
			}
			
			(dot % 2) ? LEDDot(PUT_DOT) : LEDDot(DEL_DOT);
     93c:	8d 2f       	mov	r24, r29
     93e:	81 70       	andi	r24, 0x01	; 1
     940:	21 f0       	breq	.+8      	; 0x94a <main+0xd8>
     942:	8c 2f       	mov	r24, r28
     944:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LEDDot>
     948:	07 c0       	rjmp	.+14     	; 0x958 <main+0xe6>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LEDDot>
     950:	03 c0       	rjmp	.+6      	; 0x958 <main+0xe6>
		}
		else
		{
			LEDDot(PUT_DOT);
     952:	8c 2f       	mov	r24, r28
     954:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LEDDot>
     958:	00 93 74 00 	sts	0x0074, r16
		}
		
		LEDSetPosition(2);
		LEDSetNumberWithZero(getMinutes());
     95c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <getMinutes>
     960:	0e 94 bc 01 	call	0x378	; 0x378 <LEDSetNumberWithZero>
		
		// Switches
		if(!(PINB & (1 << 2)) && !CLOCKIsActive()) // UP
     964:	b2 99       	sbic	0x16, 2	; 22
     966:	38 c0       	rjmp	.+112    	; 0x9d8 <main+0x166>
     968:	0e 94 2c 04 	call	0x858	; 0x858 <CLOCKIsActive>
     96c:	89 2b       	or	r24, r25
     96e:	a1 f5       	brne	.+104    	; 0x9d8 <main+0x166>
		{
			if(!CLOCKIsActive())
     970:	0e 94 2c 04 	call	0x858	; 0x858 <CLOCKIsActive>
     974:	89 2b       	or	r24, r25
     976:	39 f5       	brne	.+78     	; 0x9c6 <main+0x154>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
     978:	10 ff       	sbrs	r17, 0
     97a:	12 c0       	rjmp	.+36     	; 0x9a0 <main+0x12e>
     97c:	60 91 6f 00 	lds	r22, 0x006F
     980:	70 91 70 00 	lds	r23, 0x0070
     984:	80 91 71 00 	lds	r24, 0x0071
     988:	90 91 72 00 	lds	r25, 0x0072
     98c:	a7 01       	movw	r20, r14
     98e:	96 01       	movw	r18, r12
     990:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
				{
					setHours(getHours() + 1);
     994:	c9 01       	movw	r24, r18
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	0e 94 b8 03 	call	0x770	; 0x770 <setHours>
				else if(set_time_mode & (1 << SET_SEC_MOD))
				{
					setSeconds(getSeconds() + 1);
				}

				modyfi_mode = 1;
     99c:	bc 2e       	mov	r11, r28
     99e:	13 c0       	rjmp	.+38     	; 0x9c6 <main+0x154>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				{
					setHours(getHours() + 1);
				}
				else if(set_time_mode & (1 << SET_MIN_MOD))
     9a0:	11 ff       	sbrs	r17, 1
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <main+0x140>
				{
					setMinutes(getMinutes() + 1);
     9a4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <getMinutes>
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 5f 03 	call	0x6be	; 0x6be <setMinutes>
				else if(set_time_mode & (1 << SET_SEC_MOD))
				{
					setSeconds(getSeconds() + 1);
				}

				modyfi_mode = 1;
     9ae:	bc 2e       	mov	r11, r28
     9b0:	0a c0       	rjmp	.+20     	; 0x9c6 <main+0x154>
				}
				else if(set_time_mode & (1 << SET_MIN_MOD))
				{
					setMinutes(getMinutes() + 1);
				}
				else if(set_time_mode & (1 << SET_SEC_MOD))
     9b2:	12 ff       	sbrs	r17, 2
     9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <main+0x152>
				{
					setSeconds(getSeconds() + 1);
     9b6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getSeconds>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	0e 94 07 03 	call	0x60e	; 0x60e <setSeconds>
				}

				modyfi_mode = 1;
     9c0:	bc 2e       	mov	r11, r28
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <main+0x154>
     9c4:	bc 2e       	mov	r11, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c6:	8f e3       	ldi	r24, 0x3F	; 63
     9c8:	9c e9       	ldi	r25, 0x9C	; 156
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <main+0x158>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <main+0x15e>
     9d0:	00 00       	nop
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 2)));
     9d2:	b2 9b       	sbis	0x16, 2	; 22
     9d4:	fe cf       	rjmp	.-4      	; 0x9d2 <main+0x160>
     9d6:	7b cf       	rjmp	.-266    	; 0x8ce <main+0x5c>
		}
		else if(!(PINB & (1 << 3)) && !CLOCKIsActive()) // DOWN
     9d8:	b3 99       	sbic	0x16, 3	; 22
     9da:	38 c0       	rjmp	.+112    	; 0xa4c <main+0x1da>
     9dc:	0e 94 2c 04 	call	0x858	; 0x858 <CLOCKIsActive>
     9e0:	89 2b       	or	r24, r25
     9e2:	a1 f5       	brne	.+104    	; 0xa4c <main+0x1da>
		{
			if(!CLOCKIsActive())
     9e4:	0e 94 2c 04 	call	0x858	; 0x858 <CLOCKIsActive>
     9e8:	89 2b       	or	r24, r25
     9ea:	39 f5       	brne	.+78     	; 0xa3a <main+0x1c8>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
     9ec:	10 ff       	sbrs	r17, 0
     9ee:	12 c0       	rjmp	.+36     	; 0xa14 <main+0x1a2>
     9f0:	60 91 6f 00 	lds	r22, 0x006F
     9f4:	70 91 70 00 	lds	r23, 0x0070
     9f8:	80 91 71 00 	lds	r24, 0x0071
     9fc:	90 91 72 00 	lds	r25, 0x0072
     a00:	a7 01       	movw	r20, r14
     a02:	96 01       	movw	r18, r12
     a04:	0e 94 5c 05 	call	0xab8	; 0xab8 <__udivmodsi4>
				setHours(getHours() - 1);
     a08:	c9 01       	movw	r24, r18
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	0e 94 b8 03 	call	0x770	; 0x770 <setHours>
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() - 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() - 1);

				modyfi_mode = 1;
     a10:	bc 2e       	mov	r11, r28
     a12:	13 c0       	rjmp	.+38     	; 0xa3a <main+0x1c8>
		{
			if(!CLOCKIsActive())
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() - 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
     a14:	11 ff       	sbrs	r17, 1
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <main+0x1b4>
				setMinutes(getMinutes() - 1);
     a18:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <getMinutes>
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	0e 94 5f 03 	call	0x6be	; 0x6be <setMinutes>
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() - 1);

				modyfi_mode = 1;
     a22:	bc 2e       	mov	r11, r28
     a24:	0a c0       	rjmp	.+20     	; 0xa3a <main+0x1c8>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() - 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() - 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
     a26:	12 ff       	sbrs	r17, 2
     a28:	07 c0       	rjmp	.+14     	; 0xa38 <main+0x1c6>
				setSeconds(getSeconds() - 1);
     a2a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <getSeconds>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	0e 94 07 03 	call	0x60e	; 0x60e <setSeconds>

				modyfi_mode = 1;
     a34:	bc 2e       	mov	r11, r28
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <main+0x1c8>
     a38:	bc 2e       	mov	r11, r28
     a3a:	8f e3       	ldi	r24, 0x3F	; 63
     a3c:	9c e9       	ldi	r25, 0x9C	; 156
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <main+0x1cc>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <main+0x1d2>
     a44:	00 00       	nop
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 3)));
     a46:	b3 9b       	sbis	0x16, 3	; 22
     a48:	fe cf       	rjmp	.-4      	; 0xa46 <main+0x1d4>
     a4a:	41 cf       	rjmp	.-382    	; 0x8ce <main+0x5c>
		}
		else if(!(PINB & (1 << 4))) // OK, STOP, START
     a4c:	b4 99       	sbic	0x16, 4	; 22
     a4e:	3f cf       	rjmp	.-386    	; 0x8ce <main+0x5c>
		{
			if(CLOCKIsActive()) // STOP
     a50:	0e 94 2c 04 	call	0x858	; 0x858 <CLOCKIsActive>
     a54:	89 2b       	or	r24, r25
     a56:	29 f0       	breq	.+10     	; 0xa62 <main+0x1f0>
			{
				CLOCKStop();
     a58:	0e 94 23 04 	call	0x846	; 0x846 <CLOCKStop>
				
				set_time_mode = 1;
				modyfi_mode = 1;
     a5c:	bc 2e       	mov	r11, r28
		{
			if(CLOCKIsActive()) // STOP
			{
				CLOCKStop();
				
				set_time_mode = 1;
     a5e:	1c 2f       	mov	r17, r28
     a60:	0e c0       	rjmp	.+28     	; 0xa7e <main+0x20c>
				modyfi_mode = 1;
			}
			else
			{
				if(modyfi_mode) // CHANGE SET TIME
     a62:	bb 20       	and	r11, r11
     a64:	49 f0       	breq	.+18     	; 0xa78 <main+0x206>
				{
					set_time_mode <<= 1;
     a66:	11 0f       	add	r17, r17
					
					if(set_time_mode & (1 << SET_END_MOD))
     a68:	12 ff       	sbrs	r17, 2
     a6a:	09 c0       	rjmp	.+18     	; 0xa7e <main+0x20c>
					{
						set_time_mode = 0;
						modyfi_mode = 0;
						
						CLOCKStart();
     a6c:	0e 94 1a 04 	call	0x834	; 0x834 <CLOCKStart>
						PORTB |= (1 << RELAY); // RELAY ON
     a70:	c0 9a       	sbi	0x18, 0	; 24
					set_time_mode <<= 1;
					
					if(set_time_mode & (1 << SET_END_MOD))
					{
						set_time_mode = 0;
						modyfi_mode = 0;
     a72:	b1 2c       	mov	r11, r1
				{
					set_time_mode <<= 1;
					
					if(set_time_mode & (1 << SET_END_MOD))
					{
						set_time_mode = 0;
     a74:	10 e0       	ldi	r17, 0x00	; 0
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <main+0x20c>
						CLOCKStart();
						PORTB |= (1 << RELAY); // RELAY ON
					}
				}
				else { // START
					CLOCKStart();
     a78:	0e 94 1a 04 	call	0x834	; 0x834 <CLOCKStart>
					PORTB |= (1 << RELAY); // RELAY ON
     a7c:	c0 9a       	sbi	0x18, 0	; 24
     a7e:	8f e3       	ldi	r24, 0x3F	; 63
     a80:	9c e9       	ldi	r25, 0x9C	; 156
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <main+0x210>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <main+0x216>
     a88:	00 00       	nop
				}
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 4)));
     a8a:	b4 9b       	sbis	0x16, 4	; 22
     a8c:	fe cf       	rjmp	.-4      	; 0xa8a <main+0x218>
     a8e:	1f cf       	rjmp	.-450    	; 0x8ce <main+0x5c>

00000a90 <__divmodhi4>:
     a90:	97 fb       	bst	r25, 7
     a92:	07 2e       	mov	r0, r23
     a94:	16 f4       	brtc	.+4      	; 0xa9a <__divmodhi4+0xa>
     a96:	00 94       	com	r0
     a98:	07 d0       	rcall	.+14     	; 0xaa8 <__divmodhi4_neg1>
     a9a:	77 fd       	sbrc	r23, 7
     a9c:	09 d0       	rcall	.+18     	; 0xab0 <__divmodhi4_neg2>
     a9e:	0e 94 8b 05 	call	0xb16	; 0xb16 <__udivmodhi4>
     aa2:	07 fc       	sbrc	r0, 7
     aa4:	05 d0       	rcall	.+10     	; 0xab0 <__divmodhi4_neg2>
     aa6:	3e f4       	brtc	.+14     	; 0xab6 <__divmodhi4_exit>

00000aa8 <__divmodhi4_neg1>:
     aa8:	90 95       	com	r25
     aaa:	81 95       	neg	r24
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	08 95       	ret

00000ab0 <__divmodhi4_neg2>:
     ab0:	70 95       	com	r23
     ab2:	61 95       	neg	r22
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ab6 <__divmodhi4_exit>:
     ab6:	08 95       	ret

00000ab8 <__udivmodsi4>:
     ab8:	a1 e2       	ldi	r26, 0x21	; 33
     aba:	1a 2e       	mov	r1, r26
     abc:	aa 1b       	sub	r26, r26
     abe:	bb 1b       	sub	r27, r27
     ac0:	fd 01       	movw	r30, r26
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__udivmodsi4_ep>

00000ac4 <__udivmodsi4_loop>:
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	ee 1f       	adc	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	a2 17       	cp	r26, r18
     ace:	b3 07       	cpc	r27, r19
     ad0:	e4 07       	cpc	r30, r20
     ad2:	f5 07       	cpc	r31, r21
     ad4:	20 f0       	brcs	.+8      	; 0xade <__udivmodsi4_ep>
     ad6:	a2 1b       	sub	r26, r18
     ad8:	b3 0b       	sbc	r27, r19
     ada:	e4 0b       	sbc	r30, r20
     adc:	f5 0b       	sbc	r31, r21

00000ade <__udivmodsi4_ep>:
     ade:	66 1f       	adc	r22, r22
     ae0:	77 1f       	adc	r23, r23
     ae2:	88 1f       	adc	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	1a 94       	dec	r1
     ae8:	69 f7       	brne	.-38     	; 0xac4 <__udivmodsi4_loop>
     aea:	60 95       	com	r22
     aec:	70 95       	com	r23
     aee:	80 95       	com	r24
     af0:	90 95       	com	r25
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	bd 01       	movw	r22, r26
     af8:	cf 01       	movw	r24, r30
     afa:	08 95       	ret

00000afc <__tablejump2__>:
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31

00000b00 <__tablejump__>:
     b00:	05 90       	lpm	r0, Z+
     b02:	f4 91       	lpm	r31, Z
     b04:	e0 2d       	mov	r30, r0
     b06:	09 94       	ijmp

00000b08 <__usmulhisi3>:
     b08:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__umulhisi3>

00000b0c <__usmulhisi3_tail>:
     b0c:	b7 ff       	sbrs	r27, 7
     b0e:	08 95       	ret
     b10:	82 1b       	sub	r24, r18
     b12:	93 0b       	sbc	r25, r19
     b14:	08 95       	ret

00000b16 <__udivmodhi4>:
     b16:	aa 1b       	sub	r26, r26
     b18:	bb 1b       	sub	r27, r27
     b1a:	51 e1       	ldi	r21, 0x11	; 17
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <__udivmodhi4_ep>

00000b1e <__udivmodhi4_loop>:
     b1e:	aa 1f       	adc	r26, r26
     b20:	bb 1f       	adc	r27, r27
     b22:	a6 17       	cp	r26, r22
     b24:	b7 07       	cpc	r27, r23
     b26:	10 f0       	brcs	.+4      	; 0xb2c <__udivmodhi4_ep>
     b28:	a6 1b       	sub	r26, r22
     b2a:	b7 0b       	sbc	r27, r23

00000b2c <__udivmodhi4_ep>:
     b2c:	88 1f       	adc	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	5a 95       	dec	r21
     b32:	a9 f7       	brne	.-22     	; 0xb1e <__udivmodhi4_loop>
     b34:	80 95       	com	r24
     b36:	90 95       	com	r25
     b38:	bc 01       	movw	r22, r24
     b3a:	cd 01       	movw	r24, r26
     b3c:	08 95       	ret

00000b3e <__umulhisi3>:
     b3e:	a2 9f       	mul	r26, r18
     b40:	b0 01       	movw	r22, r0
     b42:	b3 9f       	mul	r27, r19
     b44:	c0 01       	movw	r24, r0
     b46:	a3 9f       	mul	r26, r19
     b48:	70 0d       	add	r23, r0
     b4a:	81 1d       	adc	r24, r1
     b4c:	11 24       	eor	r1, r1
     b4e:	91 1d       	adc	r25, r1
     b50:	b2 9f       	mul	r27, r18
     b52:	70 0d       	add	r23, r0
     b54:	81 1d       	adc	r24, r1
     b56:	11 24       	eor	r1, r1
     b58:	91 1d       	adc	r25, r1
     b5a:	08 95       	ret

00000b5c <sprintf>:
     b5c:	ae e0       	ldi	r26, 0x0E	; 14
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e4 eb       	ldi	r30, 0xB4	; 180
     b62:	f5 e0       	ldi	r31, 0x05	; 5
     b64:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__prologue_saves__+0x1c>
     b68:	0d 89       	ldd	r16, Y+21	; 0x15
     b6a:	1e 89       	ldd	r17, Y+22	; 0x16
     b6c:	86 e0       	ldi	r24, 0x06	; 6
     b6e:	8c 83       	std	Y+4, r24	; 0x04
     b70:	1a 83       	std	Y+2, r17	; 0x02
     b72:	09 83       	std	Y+1, r16	; 0x01
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	9f e7       	ldi	r25, 0x7F	; 127
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	8d 83       	std	Y+5, r24	; 0x05
     b7c:	ae 01       	movw	r20, r28
     b7e:	47 5e       	subi	r20, 0xE7	; 231
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	6f 89       	ldd	r22, Y+23	; 0x17
     b84:	78 8d       	ldd	r23, Y+24	; 0x18
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 d0 05 	call	0xba0	; 0xba0 <vfprintf>
     b8e:	ef 81       	ldd	r30, Y+7	; 0x07
     b90:	f8 85       	ldd	r31, Y+8	; 0x08
     b92:	e0 0f       	add	r30, r16
     b94:	f1 1f       	adc	r31, r17
     b96:	10 82       	st	Z, r1
     b98:	2e 96       	adiw	r28, 0x0e	; 14
     b9a:	e4 e0       	ldi	r30, 0x04	; 4
     b9c:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__epilogue_restores__+0x1c>

00000ba0 <vfprintf>:
     ba0:	ac e0       	ldi	r26, 0x0C	; 12
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 ed       	ldi	r30, 0xD6	; 214
     ba6:	f5 e0       	ldi	r31, 0x05	; 5
     ba8:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__prologue_saves__>
     bac:	7c 01       	movw	r14, r24
     bae:	6b 01       	movw	r12, r22
     bb0:	8a 01       	movw	r16, r20
     bb2:	fc 01       	movw	r30, r24
     bb4:	17 82       	std	Z+7, r1	; 0x07
     bb6:	16 82       	std	Z+6, r1	; 0x06
     bb8:	83 81       	ldd	r24, Z+3	; 0x03
     bba:	81 ff       	sbrs	r24, 1
     bbc:	bd c1       	rjmp	.+890    	; 0xf38 <vfprintf+0x398>
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	4c 01       	movw	r8, r24
     bc4:	f7 01       	movw	r30, r14
     bc6:	93 81       	ldd	r25, Z+3	; 0x03
     bc8:	f6 01       	movw	r30, r12
     bca:	93 fd       	sbrc	r25, 3
     bcc:	85 91       	lpm	r24, Z+
     bce:	93 ff       	sbrs	r25, 3
     bd0:	81 91       	ld	r24, Z+
     bd2:	6f 01       	movw	r12, r30
     bd4:	88 23       	and	r24, r24
     bd6:	09 f4       	brne	.+2      	; 0xbda <vfprintf+0x3a>
     bd8:	ab c1       	rjmp	.+854    	; 0xf30 <vfprintf+0x390>
     bda:	85 32       	cpi	r24, 0x25	; 37
     bdc:	39 f4       	brne	.+14     	; 0xbec <vfprintf+0x4c>
     bde:	93 fd       	sbrc	r25, 3
     be0:	85 91       	lpm	r24, Z+
     be2:	93 ff       	sbrs	r25, 3
     be4:	81 91       	ld	r24, Z+
     be6:	6f 01       	movw	r12, r30
     be8:	85 32       	cpi	r24, 0x25	; 37
     bea:	29 f4       	brne	.+10     	; 0xbf6 <vfprintf+0x56>
     bec:	b7 01       	movw	r22, r14
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     bf4:	e7 cf       	rjmp	.-50     	; 0xbc4 <vfprintf+0x24>
     bf6:	51 2c       	mov	r5, r1
     bf8:	31 2c       	mov	r3, r1
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	20 32       	cpi	r18, 0x20	; 32
     bfe:	a0 f4       	brcc	.+40     	; 0xc28 <vfprintf+0x88>
     c00:	8b 32       	cpi	r24, 0x2B	; 43
     c02:	69 f0       	breq	.+26     	; 0xc1e <vfprintf+0x7e>
     c04:	30 f4       	brcc	.+12     	; 0xc12 <vfprintf+0x72>
     c06:	80 32       	cpi	r24, 0x20	; 32
     c08:	59 f0       	breq	.+22     	; 0xc20 <vfprintf+0x80>
     c0a:	83 32       	cpi	r24, 0x23	; 35
     c0c:	69 f4       	brne	.+26     	; 0xc28 <vfprintf+0x88>
     c0e:	20 61       	ori	r18, 0x10	; 16
     c10:	2c c0       	rjmp	.+88     	; 0xc6a <vfprintf+0xca>
     c12:	8d 32       	cpi	r24, 0x2D	; 45
     c14:	39 f0       	breq	.+14     	; 0xc24 <vfprintf+0x84>
     c16:	80 33       	cpi	r24, 0x30	; 48
     c18:	39 f4       	brne	.+14     	; 0xc28 <vfprintf+0x88>
     c1a:	21 60       	ori	r18, 0x01	; 1
     c1c:	26 c0       	rjmp	.+76     	; 0xc6a <vfprintf+0xca>
     c1e:	22 60       	ori	r18, 0x02	; 2
     c20:	24 60       	ori	r18, 0x04	; 4
     c22:	23 c0       	rjmp	.+70     	; 0xc6a <vfprintf+0xca>
     c24:	28 60       	ori	r18, 0x08	; 8
     c26:	21 c0       	rjmp	.+66     	; 0xc6a <vfprintf+0xca>
     c28:	27 fd       	sbrc	r18, 7
     c2a:	27 c0       	rjmp	.+78     	; 0xc7a <vfprintf+0xda>
     c2c:	30 ed       	ldi	r19, 0xD0	; 208
     c2e:	38 0f       	add	r19, r24
     c30:	3a 30       	cpi	r19, 0x0A	; 10
     c32:	78 f4       	brcc	.+30     	; 0xc52 <vfprintf+0xb2>
     c34:	26 ff       	sbrs	r18, 6
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <vfprintf+0xa4>
     c38:	fa e0       	ldi	r31, 0x0A	; 10
     c3a:	5f 9e       	mul	r5, r31
     c3c:	30 0d       	add	r19, r0
     c3e:	11 24       	eor	r1, r1
     c40:	53 2e       	mov	r5, r19
     c42:	13 c0       	rjmp	.+38     	; 0xc6a <vfprintf+0xca>
     c44:	8a e0       	ldi	r24, 0x0A	; 10
     c46:	38 9e       	mul	r3, r24
     c48:	30 0d       	add	r19, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	33 2e       	mov	r3, r19
     c4e:	20 62       	ori	r18, 0x20	; 32
     c50:	0c c0       	rjmp	.+24     	; 0xc6a <vfprintf+0xca>
     c52:	8e 32       	cpi	r24, 0x2E	; 46
     c54:	21 f4       	brne	.+8      	; 0xc5e <vfprintf+0xbe>
     c56:	26 fd       	sbrc	r18, 6
     c58:	6b c1       	rjmp	.+726    	; 0xf30 <vfprintf+0x390>
     c5a:	20 64       	ori	r18, 0x40	; 64
     c5c:	06 c0       	rjmp	.+12     	; 0xc6a <vfprintf+0xca>
     c5e:	8c 36       	cpi	r24, 0x6C	; 108
     c60:	11 f4       	brne	.+4      	; 0xc66 <vfprintf+0xc6>
     c62:	20 68       	ori	r18, 0x80	; 128
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0xca>
     c66:	88 36       	cpi	r24, 0x68	; 104
     c68:	41 f4       	brne	.+16     	; 0xc7a <vfprintf+0xda>
     c6a:	f6 01       	movw	r30, r12
     c6c:	93 fd       	sbrc	r25, 3
     c6e:	85 91       	lpm	r24, Z+
     c70:	93 ff       	sbrs	r25, 3
     c72:	81 91       	ld	r24, Z+
     c74:	6f 01       	movw	r12, r30
     c76:	81 11       	cpse	r24, r1
     c78:	c1 cf       	rjmp	.-126    	; 0xbfc <vfprintf+0x5c>
     c7a:	98 2f       	mov	r25, r24
     c7c:	9f 7d       	andi	r25, 0xDF	; 223
     c7e:	95 54       	subi	r25, 0x45	; 69
     c80:	93 30       	cpi	r25, 0x03	; 3
     c82:	28 f4       	brcc	.+10     	; 0xc8e <vfprintf+0xee>
     c84:	0c 5f       	subi	r16, 0xFC	; 252
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	ff e3       	ldi	r31, 0x3F	; 63
     c8a:	f9 83       	std	Y+1, r31	; 0x01
     c8c:	0d c0       	rjmp	.+26     	; 0xca8 <vfprintf+0x108>
     c8e:	83 36       	cpi	r24, 0x63	; 99
     c90:	31 f0       	breq	.+12     	; 0xc9e <vfprintf+0xfe>
     c92:	83 37       	cpi	r24, 0x73	; 115
     c94:	71 f0       	breq	.+28     	; 0xcb2 <vfprintf+0x112>
     c96:	83 35       	cpi	r24, 0x53	; 83
     c98:	09 f0       	breq	.+2      	; 0xc9c <vfprintf+0xfc>
     c9a:	5b c0       	rjmp	.+182    	; 0xd52 <vfprintf+0x1b2>
     c9c:	22 c0       	rjmp	.+68     	; 0xce2 <vfprintf+0x142>
     c9e:	f8 01       	movw	r30, r16
     ca0:	80 81       	ld	r24, Z
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	0e 5f       	subi	r16, 0xFE	; 254
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	44 24       	eor	r4, r4
     caa:	43 94       	inc	r4
     cac:	51 2c       	mov	r5, r1
     cae:	54 01       	movw	r10, r8
     cb0:	15 c0       	rjmp	.+42     	; 0xcdc <vfprintf+0x13c>
     cb2:	38 01       	movw	r6, r16
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	6f 0e       	add	r6, r31
     cb8:	71 1c       	adc	r7, r1
     cba:	f8 01       	movw	r30, r16
     cbc:	a0 80       	ld	r10, Z
     cbe:	b1 80       	ldd	r11, Z+1	; 0x01
     cc0:	26 ff       	sbrs	r18, 6
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <vfprintf+0x12a>
     cc4:	65 2d       	mov	r22, r5
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <vfprintf+0x12e>
     cca:	6f ef       	ldi	r22, 0xFF	; 255
     ccc:	7f ef       	ldi	r23, 0xFF	; 255
     cce:	c5 01       	movw	r24, r10
     cd0:	2c 87       	std	Y+12, r18	; 0x0c
     cd2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <strnlen>
     cd6:	2c 01       	movw	r4, r24
     cd8:	83 01       	movw	r16, r6
     cda:	2c 85       	ldd	r18, Y+12	; 0x0c
     cdc:	2f 77       	andi	r18, 0x7F	; 127
     cde:	22 2e       	mov	r2, r18
     ce0:	17 c0       	rjmp	.+46     	; 0xd10 <vfprintf+0x170>
     ce2:	38 01       	movw	r6, r16
     ce4:	f2 e0       	ldi	r31, 0x02	; 2
     ce6:	6f 0e       	add	r6, r31
     ce8:	71 1c       	adc	r7, r1
     cea:	f8 01       	movw	r30, r16
     cec:	a0 80       	ld	r10, Z
     cee:	b1 80       	ldd	r11, Z+1	; 0x01
     cf0:	26 ff       	sbrs	r18, 6
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <vfprintf+0x15a>
     cf4:	65 2d       	mov	r22, r5
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x15e>
     cfa:	6f ef       	ldi	r22, 0xFF	; 255
     cfc:	7f ef       	ldi	r23, 0xFF	; 255
     cfe:	c5 01       	movw	r24, r10
     d00:	2c 87       	std	Y+12, r18	; 0x0c
     d02:	0e 94 a2 07 	call	0xf44	; 0xf44 <strnlen_P>
     d06:	2c 01       	movw	r4, r24
     d08:	2c 85       	ldd	r18, Y+12	; 0x0c
     d0a:	20 68       	ori	r18, 0x80	; 128
     d0c:	22 2e       	mov	r2, r18
     d0e:	83 01       	movw	r16, r6
     d10:	23 fc       	sbrc	r2, 3
     d12:	1b c0       	rjmp	.+54     	; 0xd4a <vfprintf+0x1aa>
     d14:	83 2d       	mov	r24, r3
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	48 16       	cp	r4, r24
     d1a:	59 06       	cpc	r5, r25
     d1c:	b0 f4       	brcc	.+44     	; 0xd4a <vfprintf+0x1aa>
     d1e:	b7 01       	movw	r22, r14
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     d28:	3a 94       	dec	r3
     d2a:	f4 cf       	rjmp	.-24     	; 0xd14 <vfprintf+0x174>
     d2c:	f5 01       	movw	r30, r10
     d2e:	27 fc       	sbrc	r2, 7
     d30:	85 91       	lpm	r24, Z+
     d32:	27 fe       	sbrs	r2, 7
     d34:	81 91       	ld	r24, Z+
     d36:	5f 01       	movw	r10, r30
     d38:	b7 01       	movw	r22, r14
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     d40:	31 10       	cpse	r3, r1
     d42:	3a 94       	dec	r3
     d44:	f1 e0       	ldi	r31, 0x01	; 1
     d46:	4f 1a       	sub	r4, r31
     d48:	51 08       	sbc	r5, r1
     d4a:	41 14       	cp	r4, r1
     d4c:	51 04       	cpc	r5, r1
     d4e:	71 f7       	brne	.-36     	; 0xd2c <vfprintf+0x18c>
     d50:	e5 c0       	rjmp	.+458    	; 0xf1c <vfprintf+0x37c>
     d52:	84 36       	cpi	r24, 0x64	; 100
     d54:	11 f0       	breq	.+4      	; 0xd5a <vfprintf+0x1ba>
     d56:	89 36       	cpi	r24, 0x69	; 105
     d58:	39 f5       	brne	.+78     	; 0xda8 <vfprintf+0x208>
     d5a:	f8 01       	movw	r30, r16
     d5c:	27 ff       	sbrs	r18, 7
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <vfprintf+0x1ce>
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	0c 5f       	subi	r16, 0xFC	; 252
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <vfprintf+0x1de>
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	88 27       	eor	r24, r24
     d74:	77 fd       	sbrc	r23, 7
     d76:	80 95       	com	r24
     d78:	98 2f       	mov	r25, r24
     d7a:	0e 5f       	subi	r16, 0xFE	; 254
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	2f 76       	andi	r18, 0x6F	; 111
     d80:	b2 2e       	mov	r11, r18
     d82:	97 ff       	sbrs	r25, 7
     d84:	09 c0       	rjmp	.+18     	; 0xd98 <vfprintf+0x1f8>
     d86:	90 95       	com	r25
     d88:	80 95       	com	r24
     d8a:	70 95       	com	r23
     d8c:	61 95       	neg	r22
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	20 68       	ori	r18, 0x80	; 128
     d96:	b2 2e       	mov	r11, r18
     d98:	2a e0       	ldi	r18, 0x0A	; 10
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	a4 01       	movw	r20, r8
     d9e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__ultoa_invert>
     da2:	a8 2e       	mov	r10, r24
     da4:	a8 18       	sub	r10, r8
     da6:	44 c0       	rjmp	.+136    	; 0xe30 <vfprintf+0x290>
     da8:	85 37       	cpi	r24, 0x75	; 117
     daa:	29 f4       	brne	.+10     	; 0xdb6 <vfprintf+0x216>
     dac:	2f 7e       	andi	r18, 0xEF	; 239
     dae:	b2 2e       	mov	r11, r18
     db0:	2a e0       	ldi	r18, 0x0A	; 10
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	25 c0       	rjmp	.+74     	; 0xe00 <vfprintf+0x260>
     db6:	f2 2f       	mov	r31, r18
     db8:	f9 7f       	andi	r31, 0xF9	; 249
     dba:	bf 2e       	mov	r11, r31
     dbc:	8f 36       	cpi	r24, 0x6F	; 111
     dbe:	c1 f0       	breq	.+48     	; 0xdf0 <vfprintf+0x250>
     dc0:	18 f4       	brcc	.+6      	; 0xdc8 <vfprintf+0x228>
     dc2:	88 35       	cpi	r24, 0x58	; 88
     dc4:	79 f0       	breq	.+30     	; 0xde4 <vfprintf+0x244>
     dc6:	b4 c0       	rjmp	.+360    	; 0xf30 <vfprintf+0x390>
     dc8:	80 37       	cpi	r24, 0x70	; 112
     dca:	19 f0       	breq	.+6      	; 0xdd2 <vfprintf+0x232>
     dcc:	88 37       	cpi	r24, 0x78	; 120
     dce:	21 f0       	breq	.+8      	; 0xdd8 <vfprintf+0x238>
     dd0:	af c0       	rjmp	.+350    	; 0xf30 <vfprintf+0x390>
     dd2:	2f 2f       	mov	r18, r31
     dd4:	20 61       	ori	r18, 0x10	; 16
     dd6:	b2 2e       	mov	r11, r18
     dd8:	b4 fe       	sbrs	r11, 4
     dda:	0d c0       	rjmp	.+26     	; 0xdf6 <vfprintf+0x256>
     ddc:	8b 2d       	mov	r24, r11
     dde:	84 60       	ori	r24, 0x04	; 4
     de0:	b8 2e       	mov	r11, r24
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <vfprintf+0x256>
     de4:	24 ff       	sbrs	r18, 4
     de6:	0a c0       	rjmp	.+20     	; 0xdfc <vfprintf+0x25c>
     de8:	9f 2f       	mov	r25, r31
     dea:	96 60       	ori	r25, 0x06	; 6
     dec:	b9 2e       	mov	r11, r25
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <vfprintf+0x25c>
     df0:	28 e0       	ldi	r18, 0x08	; 8
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <vfprintf+0x260>
     df6:	20 e1       	ldi	r18, 0x10	; 16
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <vfprintf+0x260>
     dfc:	20 e1       	ldi	r18, 0x10	; 16
     dfe:	32 e0       	ldi	r19, 0x02	; 2
     e00:	f8 01       	movw	r30, r16
     e02:	b7 fe       	sbrs	r11, 7
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <vfprintf+0x274>
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	0c 5f       	subi	r16, 0xFC	; 252
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x280>
     e14:	60 81       	ld	r22, Z
     e16:	71 81       	ldd	r23, Z+1	; 0x01
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 5f       	subi	r16, 0xFE	; 254
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
     e20:	a4 01       	movw	r20, r8
     e22:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__ultoa_invert>
     e26:	a8 2e       	mov	r10, r24
     e28:	a8 18       	sub	r10, r8
     e2a:	fb 2d       	mov	r31, r11
     e2c:	ff 77       	andi	r31, 0x7F	; 127
     e2e:	bf 2e       	mov	r11, r31
     e30:	b6 fe       	sbrs	r11, 6
     e32:	0b c0       	rjmp	.+22     	; 0xe4a <vfprintf+0x2aa>
     e34:	2b 2d       	mov	r18, r11
     e36:	2e 7f       	andi	r18, 0xFE	; 254
     e38:	a5 14       	cp	r10, r5
     e3a:	50 f4       	brcc	.+20     	; 0xe50 <vfprintf+0x2b0>
     e3c:	b4 fe       	sbrs	r11, 4
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <vfprintf+0x2b4>
     e40:	b2 fc       	sbrc	r11, 2
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <vfprintf+0x2b4>
     e44:	2b 2d       	mov	r18, r11
     e46:	2e 7e       	andi	r18, 0xEE	; 238
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <vfprintf+0x2b4>
     e4a:	7a 2c       	mov	r7, r10
     e4c:	2b 2d       	mov	r18, r11
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x2b6>
     e50:	7a 2c       	mov	r7, r10
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <vfprintf+0x2b6>
     e54:	75 2c       	mov	r7, r5
     e56:	24 ff       	sbrs	r18, 4
     e58:	0d c0       	rjmp	.+26     	; 0xe74 <vfprintf+0x2d4>
     e5a:	fe 01       	movw	r30, r28
     e5c:	ea 0d       	add	r30, r10
     e5e:	f1 1d       	adc	r31, r1
     e60:	80 81       	ld	r24, Z
     e62:	80 33       	cpi	r24, 0x30	; 48
     e64:	11 f4       	brne	.+4      	; 0xe6a <vfprintf+0x2ca>
     e66:	29 7e       	andi	r18, 0xE9	; 233
     e68:	09 c0       	rjmp	.+18     	; 0xe7c <vfprintf+0x2dc>
     e6a:	22 ff       	sbrs	r18, 2
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <vfprintf+0x2da>
     e6e:	73 94       	inc	r7
     e70:	73 94       	inc	r7
     e72:	04 c0       	rjmp	.+8      	; 0xe7c <vfprintf+0x2dc>
     e74:	82 2f       	mov	r24, r18
     e76:	86 78       	andi	r24, 0x86	; 134
     e78:	09 f0       	breq	.+2      	; 0xe7c <vfprintf+0x2dc>
     e7a:	73 94       	inc	r7
     e7c:	23 fd       	sbrc	r18, 3
     e7e:	13 c0       	rjmp	.+38     	; 0xea6 <vfprintf+0x306>
     e80:	20 ff       	sbrs	r18, 0
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <vfprintf+0x2f0>
     e84:	5a 2c       	mov	r5, r10
     e86:	73 14       	cp	r7, r3
     e88:	18 f4       	brcc	.+6      	; 0xe90 <vfprintf+0x2f0>
     e8a:	53 0c       	add	r5, r3
     e8c:	57 18       	sub	r5, r7
     e8e:	73 2c       	mov	r7, r3
     e90:	73 14       	cp	r7, r3
     e92:	68 f4       	brcc	.+26     	; 0xeae <vfprintf+0x30e>
     e94:	b7 01       	movw	r22, r14
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	2c 87       	std	Y+12, r18	; 0x0c
     e9c:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     ea0:	73 94       	inc	r7
     ea2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea4:	f5 cf       	rjmp	.-22     	; 0xe90 <vfprintf+0x2f0>
     ea6:	73 14       	cp	r7, r3
     ea8:	10 f4       	brcc	.+4      	; 0xeae <vfprintf+0x30e>
     eaa:	37 18       	sub	r3, r7
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <vfprintf+0x310>
     eae:	31 2c       	mov	r3, r1
     eb0:	24 ff       	sbrs	r18, 4
     eb2:	12 c0       	rjmp	.+36     	; 0xed8 <vfprintf+0x338>
     eb4:	b7 01       	movw	r22, r14
     eb6:	80 e3       	ldi	r24, 0x30	; 48
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	2c 87       	std	Y+12, r18	; 0x0c
     ebc:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     ec0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec2:	22 ff       	sbrs	r18, 2
     ec4:	17 c0       	rjmp	.+46     	; 0xef4 <vfprintf+0x354>
     ec6:	21 ff       	sbrs	r18, 1
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <vfprintf+0x330>
     eca:	88 e5       	ldi	r24, 0x58	; 88
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x334>
     ed0:	88 e7       	ldi	r24, 0x78	; 120
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	b7 01       	movw	r22, r14
     ed6:	0c c0       	rjmp	.+24     	; 0xef0 <vfprintf+0x350>
     ed8:	82 2f       	mov	r24, r18
     eda:	86 78       	andi	r24, 0x86	; 134
     edc:	59 f0       	breq	.+22     	; 0xef4 <vfprintf+0x354>
     ede:	21 fd       	sbrc	r18, 1
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0x346>
     ee2:	80 e2       	ldi	r24, 0x20	; 32
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <vfprintf+0x348>
     ee6:	8b e2       	ldi	r24, 0x2B	; 43
     ee8:	27 fd       	sbrc	r18, 7
     eea:	8d e2       	ldi	r24, 0x2D	; 45
     eec:	b7 01       	movw	r22, r14
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     ef4:	a5 14       	cp	r10, r5
     ef6:	38 f4       	brcc	.+14     	; 0xf06 <vfprintf+0x366>
     ef8:	b7 01       	movw	r22, r14
     efa:	80 e3       	ldi	r24, 0x30	; 48
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     f02:	5a 94       	dec	r5
     f04:	f7 cf       	rjmp	.-18     	; 0xef4 <vfprintf+0x354>
     f06:	aa 94       	dec	r10
     f08:	f4 01       	movw	r30, r8
     f0a:	ea 0d       	add	r30, r10
     f0c:	f1 1d       	adc	r31, r1
     f0e:	80 81       	ld	r24, Z
     f10:	b7 01       	movw	r22, r14
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     f18:	a1 10       	cpse	r10, r1
     f1a:	f5 cf       	rjmp	.-22     	; 0xf06 <vfprintf+0x366>
     f1c:	33 20       	and	r3, r3
     f1e:	09 f4       	brne	.+2      	; 0xf22 <vfprintf+0x382>
     f20:	51 ce       	rjmp	.-862    	; 0xbc4 <vfprintf+0x24>
     f22:	b7 01       	movw	r22, r14
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 b8 07 	call	0xf70	; 0xf70 <fputc>
     f2c:	3a 94       	dec	r3
     f2e:	f6 cf       	rjmp	.-20     	; 0xf1c <vfprintf+0x37c>
     f30:	f7 01       	movw	r30, r14
     f32:	86 81       	ldd	r24, Z+6	; 0x06
     f34:	97 81       	ldd	r25, Z+7	; 0x07
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <vfprintf+0x39c>
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	2c 96       	adiw	r28, 0x0c	; 12
     f3e:	e2 e1       	ldi	r30, 0x12	; 18
     f40:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__epilogue_restores__>

00000f44 <strnlen_P>:
     f44:	fc 01       	movw	r30, r24
     f46:	05 90       	lpm	r0, Z+
     f48:	61 50       	subi	r22, 0x01	; 1
     f4a:	70 40       	sbci	r23, 0x00	; 0
     f4c:	01 10       	cpse	r0, r1
     f4e:	d8 f7       	brcc	.-10     	; 0xf46 <strnlen_P+0x2>
     f50:	80 95       	com	r24
     f52:	90 95       	com	r25
     f54:	8e 0f       	add	r24, r30
     f56:	9f 1f       	adc	r25, r31
     f58:	08 95       	ret

00000f5a <strnlen>:
     f5a:	fc 01       	movw	r30, r24
     f5c:	61 50       	subi	r22, 0x01	; 1
     f5e:	70 40       	sbci	r23, 0x00	; 0
     f60:	01 90       	ld	r0, Z+
     f62:	01 10       	cpse	r0, r1
     f64:	d8 f7       	brcc	.-10     	; 0xf5c <strnlen+0x2>
     f66:	80 95       	com	r24
     f68:	90 95       	com	r25
     f6a:	8e 0f       	add	r24, r30
     f6c:	9f 1f       	adc	r25, r31
     f6e:	08 95       	ret

00000f70 <fputc>:
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	18 2f       	mov	r17, r24
     f7a:	09 2f       	mov	r16, r25
     f7c:	eb 01       	movw	r28, r22
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 fd       	sbrc	r24, 1
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <fputc+0x1a>
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	9f ef       	ldi	r25, 0xFF	; 255
     f88:	20 c0       	rjmp	.+64     	; 0xfca <fputc+0x5a>
     f8a:	82 ff       	sbrs	r24, 2
     f8c:	10 c0       	rjmp	.+32     	; 0xfae <fputc+0x3e>
     f8e:	4e 81       	ldd	r20, Y+6	; 0x06
     f90:	5f 81       	ldd	r21, Y+7	; 0x07
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	42 17       	cp	r20, r18
     f98:	53 07       	cpc	r21, r19
     f9a:	7c f4       	brge	.+30     	; 0xfba <fputc+0x4a>
     f9c:	e8 81       	ld	r30, Y
     f9e:	f9 81       	ldd	r31, Y+1	; 0x01
     fa0:	9f 01       	movw	r18, r30
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	39 83       	std	Y+1, r19	; 0x01
     fa8:	28 83       	st	Y, r18
     faa:	10 83       	st	Z, r17
     fac:	06 c0       	rjmp	.+12     	; 0xfba <fputc+0x4a>
     fae:	e8 85       	ldd	r30, Y+8	; 0x08
     fb0:	f9 85       	ldd	r31, Y+9	; 0x09
     fb2:	81 2f       	mov	r24, r17
     fb4:	09 95       	icall
     fb6:	89 2b       	or	r24, r25
     fb8:	29 f7       	brne	.-54     	; 0xf84 <fputc+0x14>
     fba:	2e 81       	ldd	r18, Y+6	; 0x06
     fbc:	3f 81       	ldd	r19, Y+7	; 0x07
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	3f 83       	std	Y+7, r19	; 0x07
     fc4:	2e 83       	std	Y+6, r18	; 0x06
     fc6:	81 2f       	mov	r24, r17
     fc8:	90 2f       	mov	r25, r16
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <__ultoa_invert>:
     fd4:	fa 01       	movw	r30, r20
     fd6:	aa 27       	eor	r26, r26
     fd8:	28 30       	cpi	r18, 0x08	; 8
     fda:	51 f1       	breq	.+84     	; 0x1030 <__ultoa_invert+0x5c>
     fdc:	20 31       	cpi	r18, 0x10	; 16
     fde:	81 f1       	breq	.+96     	; 0x1040 <__ultoa_invert+0x6c>
     fe0:	e8 94       	clt
     fe2:	6f 93       	push	r22
     fe4:	6e 7f       	andi	r22, 0xFE	; 254
     fe6:	6e 5f       	subi	r22, 0xFE	; 254
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8f 4f       	sbci	r24, 0xFF	; 255
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	af 4f       	sbci	r26, 0xFF	; 255
     ff0:	b1 e0       	ldi	r27, 0x01	; 1
     ff2:	3e d0       	rcall	.+124    	; 0x1070 <__ultoa_invert+0x9c>
     ff4:	b4 e0       	ldi	r27, 0x04	; 4
     ff6:	3c d0       	rcall	.+120    	; 0x1070 <__ultoa_invert+0x9c>
     ff8:	67 0f       	add	r22, r23
     ffa:	78 1f       	adc	r23, r24
     ffc:	89 1f       	adc	r24, r25
     ffe:	9a 1f       	adc	r25, r26
    1000:	a1 1d       	adc	r26, r1
    1002:	68 0f       	add	r22, r24
    1004:	79 1f       	adc	r23, r25
    1006:	8a 1f       	adc	r24, r26
    1008:	91 1d       	adc	r25, r1
    100a:	a1 1d       	adc	r26, r1
    100c:	6a 0f       	add	r22, r26
    100e:	71 1d       	adc	r23, r1
    1010:	81 1d       	adc	r24, r1
    1012:	91 1d       	adc	r25, r1
    1014:	a1 1d       	adc	r26, r1
    1016:	20 d0       	rcall	.+64     	; 0x1058 <__ultoa_invert+0x84>
    1018:	09 f4       	brne	.+2      	; 0x101c <__ultoa_invert+0x48>
    101a:	68 94       	set
    101c:	3f 91       	pop	r19
    101e:	2a e0       	ldi	r18, 0x0A	; 10
    1020:	26 9f       	mul	r18, r22
    1022:	11 24       	eor	r1, r1
    1024:	30 19       	sub	r19, r0
    1026:	30 5d       	subi	r19, 0xD0	; 208
    1028:	31 93       	st	Z+, r19
    102a:	de f6       	brtc	.-74     	; 0xfe2 <__ultoa_invert+0xe>
    102c:	cf 01       	movw	r24, r30
    102e:	08 95       	ret
    1030:	46 2f       	mov	r20, r22
    1032:	47 70       	andi	r20, 0x07	; 7
    1034:	40 5d       	subi	r20, 0xD0	; 208
    1036:	41 93       	st	Z+, r20
    1038:	b3 e0       	ldi	r27, 0x03	; 3
    103a:	0f d0       	rcall	.+30     	; 0x105a <__ultoa_invert+0x86>
    103c:	c9 f7       	brne	.-14     	; 0x1030 <__ultoa_invert+0x5c>
    103e:	f6 cf       	rjmp	.-20     	; 0x102c <__ultoa_invert+0x58>
    1040:	46 2f       	mov	r20, r22
    1042:	4f 70       	andi	r20, 0x0F	; 15
    1044:	40 5d       	subi	r20, 0xD0	; 208
    1046:	4a 33       	cpi	r20, 0x3A	; 58
    1048:	18 f0       	brcs	.+6      	; 0x1050 <__ultoa_invert+0x7c>
    104a:	49 5d       	subi	r20, 0xD9	; 217
    104c:	31 fd       	sbrc	r19, 1
    104e:	40 52       	subi	r20, 0x20	; 32
    1050:	41 93       	st	Z+, r20
    1052:	02 d0       	rcall	.+4      	; 0x1058 <__ultoa_invert+0x84>
    1054:	a9 f7       	brne	.-22     	; 0x1040 <__ultoa_invert+0x6c>
    1056:	ea cf       	rjmp	.-44     	; 0x102c <__ultoa_invert+0x58>
    1058:	b4 e0       	ldi	r27, 0x04	; 4
    105a:	a6 95       	lsr	r26
    105c:	97 95       	ror	r25
    105e:	87 95       	ror	r24
    1060:	77 95       	ror	r23
    1062:	67 95       	ror	r22
    1064:	ba 95       	dec	r27
    1066:	c9 f7       	brne	.-14     	; 0x105a <__ultoa_invert+0x86>
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 05       	cpc	r22, r1
    106c:	71 05       	cpc	r23, r1
    106e:	08 95       	ret
    1070:	9b 01       	movw	r18, r22
    1072:	ac 01       	movw	r20, r24
    1074:	0a 2e       	mov	r0, r26
    1076:	06 94       	lsr	r0
    1078:	57 95       	ror	r21
    107a:	47 95       	ror	r20
    107c:	37 95       	ror	r19
    107e:	27 95       	ror	r18
    1080:	ba 95       	dec	r27
    1082:	c9 f7       	brne	.-14     	; 0x1076 <__ultoa_invert+0xa2>
    1084:	62 0f       	add	r22, r18
    1086:	73 1f       	adc	r23, r19
    1088:	84 1f       	adc	r24, r20
    108a:	95 1f       	adc	r25, r21
    108c:	a0 1d       	adc	r26, r0
    108e:	08 95       	ret

00001090 <__prologue_saves__>:
    1090:	2f 92       	push	r2
    1092:	3f 92       	push	r3
    1094:	4f 92       	push	r4
    1096:	5f 92       	push	r5
    1098:	6f 92       	push	r6
    109a:	7f 92       	push	r7
    109c:	8f 92       	push	r8
    109e:	9f 92       	push	r9
    10a0:	af 92       	push	r10
    10a2:	bf 92       	push	r11
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	ca 1b       	sub	r28, r26
    10ba:	db 0b       	sbc	r29, r27
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	09 94       	ijmp

000010c8 <__epilogue_restores__>:
    10c8:	2a 88       	ldd	r2, Y+18	; 0x12
    10ca:	39 88       	ldd	r3, Y+17	; 0x11
    10cc:	48 88       	ldd	r4, Y+16	; 0x10
    10ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    10d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    10d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    10d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    10d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    10d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    10da:	b9 84       	ldd	r11, Y+9	; 0x09
    10dc:	c8 84       	ldd	r12, Y+8	; 0x08
    10de:	df 80       	ldd	r13, Y+7	; 0x07
    10e0:	ee 80       	ldd	r14, Y+6	; 0x06
    10e2:	fd 80       	ldd	r15, Y+5	; 0x05
    10e4:	0c 81       	ldd	r16, Y+4	; 0x04
    10e6:	1b 81       	ldd	r17, Y+3	; 0x03
    10e8:	aa 81       	ldd	r26, Y+2	; 0x02
    10ea:	b9 81       	ldd	r27, Y+1	; 0x01
    10ec:	ce 0f       	add	r28, r30
    10ee:	d1 1d       	adc	r29, r1
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	ed 01       	movw	r28, r26
    10fc:	08 95       	ret

000010fe <_exit>:
    10fe:	f8 94       	cli

00001100 <__stop_program>:
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <__stop_program>
