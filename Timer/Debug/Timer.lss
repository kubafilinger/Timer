
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000f6c  00001000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080006a  0080006a  0000100a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000927  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f0  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000455  00000000  00000000  00001d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000abd  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000032c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	e1 00       	.word	0x00e1	; ????
  56:	f5 00       	.word	0x00f5	; ????
  58:	e3 00       	.word	0x00e3	; ????
  5a:	e5 00       	.word	0x00e5	; ????
  5c:	e7 00       	.word	0x00e7	; ????
  5e:	e9 00       	.word	0x00e9	; ????
  60:	eb 00       	.word	0x00eb	; ????
  62:	ed 00       	.word	0x00ed	; ????
  64:	ef 00       	.word	0x00ef	; ????
  66:	f1 00       	.word	0x00f1	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 36       	cpi	r26, 0x6A	; 106
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	aa e6       	ldi	r26, 0x6A	; 106
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 38       	cpi	r26, 0x86	; 134
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 03 	call	0x720	; 0x720 <main>
  9e:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	static volatile int src_nr = 0, counter = 0;
	
	if(counter++ == 10)
  c8:	80 91 6c 00 	lds	r24, 0x006C
  cc:	90 91 6d 00 	lds	r25, 0x006D
  d0:	9c 01       	movw	r18, r24
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	30 93 6d 00 	sts	0x006D, r19
  da:	20 93 6c 00 	sts	0x006C, r18
  de:	0a 97       	sbiw	r24, 0x0a	; 10
  e0:	09 f0       	breq	.+2      	; 0xe4 <__vector_9+0x3e>
  e2:	3f c0       	rjmp	.+126    	; 0x162 <__vector_9+0xbc>
	{
		src_nr = (src_nr + 1) % total_displays;
  e4:	80 91 6a 00 	lds	r24, 0x006A
  e8:	90 91 6b 00 	lds	r25, 0x006B
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	60 91 83 00 	lds	r22, 0x0083
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divmodhi4>
  f8:	90 93 6b 00 	sts	0x006B, r25
  fc:	80 93 6a 00 	sts	0x006A, r24
		
		*display_port = (led_type & KATODA) ? (1 << src_nr) : ~(1 << src_nr);
 100:	e0 91 75 00 	lds	r30, 0x0075
 104:	f0 91 76 00 	lds	r31, 0x0076
 108:	80 91 73 00 	lds	r24, 0x0073
 10c:	80 ff       	sbrs	r24, 0
 10e:	0a c0       	rjmp	.+20     	; 0x124 <__vector_9+0x7e>
 110:	20 91 6a 00 	lds	r18, 0x006A
 114:	30 91 6b 00 	lds	r19, 0x006B
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	01 c0       	rjmp	.+2      	; 0x11e <__vector_9+0x78>
 11c:	88 0f       	add	r24, r24
 11e:	2a 95       	dec	r18
 120:	ea f7       	brpl	.-6      	; 0x11c <__vector_9+0x76>
 122:	0e c0       	rjmp	.+28     	; 0x140 <__vector_9+0x9a>
 124:	80 91 6a 00 	lds	r24, 0x006A
 128:	90 91 6b 00 	lds	r25, 0x006B
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	a9 01       	movw	r20, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <__vector_9+0x92>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <__vector_9+0x8e>
 13c:	ca 01       	movw	r24, r20
 13e:	80 95       	com	r24
 140:	80 83       	st	Z, r24
		*digit_port = number[src_nr];
 142:	e0 91 7f 00 	lds	r30, 0x007F
 146:	f0 91 80 00 	lds	r31, 0x0080
 14a:	a0 91 6a 00 	lds	r26, 0x006A
 14e:	b0 91 6b 00 	lds	r27, 0x006B
 152:	a9 58       	subi	r26, 0x89	; 137
 154:	bf 4f       	sbci	r27, 0xFF	; 255
 156:	8c 91       	ld	r24, X
 158:	80 83       	st	Z, r24
	
		counter = 0;
 15a:	10 92 6d 00 	sts	0x006D, r1
 15e:	10 92 6c 00 	sts	0x006C, r1
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <clearDisplay>:

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 184:	20 91 83 00 	lds	r18, 0x0083
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	12 16       	cp	r1, r18
 18c:	13 06       	cpc	r1, r19
 18e:	74 f4       	brge	.+28     	; 0x1ac <clearDisplay+0x28>
		number[i] = (led_type & KATODA) ? ~0 : 0;
 190:	40 91 73 00 	lds	r20, 0x0073
 194:	41 70       	andi	r20, 0x01	; 1
 196:	41 95       	neg	r20

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
		number[i] = (led_type & KATODA) ? ~0 : 0;
 19c:	fc 01       	movw	r30, r24
 19e:	e9 58       	subi	r30, 0x89	; 137
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	40 83       	st	Z, r20

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	c4 f3       	brlt	.-16     	; 0x19c <clearDisplay+0x18>
 1ac:	08 95       	ret

000001ae <convertChar>:

uint8_t convertChar(char s)
{
	uint8_t result = 0;
	
	switch(s)
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	f0 97       	sbiw	r30, 0x30	; 48
 1b4:	ea 30       	cpi	r30, 0x0A	; 10
 1b6:	f1 05       	cpc	r31, r1
 1b8:	b0 f4       	brcc	.+44     	; 0x1e6 <convertChar+0x38>
 1ba:	e6 5d       	subi	r30, 0xD6	; 214
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	0c 94 b3 04 	jmp	0x966	; 0x966 <__tablejump2__>
	{
		case '0':
			result = 0b00111111;
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	08 95       	ret
		case '1':
			result = 0b00000110;
			break;
		
		case '2':
			result = 0b01011011;
 1c6:	8b e5       	ldi	r24, 0x5B	; 91
			break;
 1c8:	08 95       	ret
		
		case '3':
			result = 0b01001111;
 1ca:	8f e4       	ldi	r24, 0x4F	; 79
			break;
 1cc:	08 95       	ret
		
		case '4':
			result = 0b01100110;
 1ce:	86 e6       	ldi	r24, 0x66	; 102
			break;
 1d0:	08 95       	ret
		
		case '5':
			result = 0b01101101;
 1d2:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 1d4:	08 95       	ret
		
		case '6':
			result = 0b01111101;
 1d6:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 1d8:	08 95       	ret
		
		case '7':
			result = 0b00000111;
 1da:	87 e0       	ldi	r24, 0x07	; 7
			break;
 1dc:	08 95       	ret
		
		case '8':
			result = 0b01111111;
 1de:	8f e7       	ldi	r24, 0x7F	; 127
			break;
 1e0:	08 95       	ret
		
		case '9':
			result = 0b01101111;
 1e2:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 1e4:	08 95       	ret
			
		default:
			result = 0;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1e8:	08 95       	ret
		case '0':
			result = 0b00111111;
			break;
		
		case '1':
			result = 0b00000110;
 1ea:	86 e0       	ldi	r24, 0x06	; 6
			result = 0;
			break;
	}
	
	return result;
}
 1ec:	08 95       	ret

000001ee <LEDSetValue>:
	position = 0;
	set_timer0();
}

void LEDSetValue(char *val)
{
 1ee:	9f 92       	push	r9
 1f0:	af 92       	push	r10
 1f2:	bf 92       	push	r11
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	fc 01       	movw	r30, r24
	int i;
	
	for(i = 0; i < total_displays; i++)
 206:	00 91 83 00 	lds	r16, 0x0083
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	10 16       	cp	r1, r16
 20e:	11 06       	cpc	r1, r17
 210:	7c f5       	brge	.+94     	; 0x270 <LEDSetValue+0x82>
	{
		if(val[i] == '\0')
 212:	20 81       	ld	r18, Z
 214:	22 23       	and	r18, r18
 216:	61 f1       	breq	.+88     	; 0x270 <LEDSetValue+0x82>
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
 218:	a0 90 74 00 	lds	r10, 0x0074
 21c:	80 91 73 00 	lds	r24, 0x0073
 220:	81 70       	andi	r24, 0x01	; 1
 222:	98 2e       	mov	r9, r24
 224:	6f 01       	movw	r12, r30
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	c8 1a       	sub	r12, r24
 22a:	d8 0a       	sbc	r13, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	b1 2c       	mov	r11, r1
 232:	05 c0       	rjmp	.+10     	; 0x23e <LEDSetValue+0x50>
	{
		if(val[i] == '\0')
 234:	f6 01       	movw	r30, r12
 236:	21 91       	ld	r18, Z+
 238:	6f 01       	movw	r12, r30
 23a:	22 23       	and	r18, r18
 23c:	c9 f0       	breq	.+50     	; 0x270 <LEDSetValue+0x82>
 23e:	ce 01       	movw	r24, r28
 240:	8a 0d       	add	r24, r10
 242:	9b 1d       	adc	r25, r11
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
 244:	b8 01       	movw	r22, r16
 246:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divmodhi4>
 24a:	7c 01       	movw	r14, r24
 24c:	99 20       	and	r9, r9
 24e:	29 f0       	breq	.+10     	; 0x25a <LEDSetValue+0x6c>
 250:	82 2f       	mov	r24, r18
 252:	0e 94 d7 00 	call	0x1ae	; 0x1ae <convertChar>
 256:	80 95       	com	r24
 258:	03 c0       	rjmp	.+6      	; 0x260 <LEDSetValue+0x72>
 25a:	82 2f       	mov	r24, r18
 25c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <convertChar>
 260:	f7 01       	movw	r30, r14
 262:	e9 58       	subi	r30, 0x89	; 137
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	80 83       	st	Z, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	c0 17       	cp	r28, r16
 26c:	d1 07       	cpc	r29, r17
 26e:	14 f3       	brlt	.-60     	; 0x234 <LEDSetValue+0x46>
		if(val[i] == '\0')
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	9f 90       	pop	r9
 286:	08 95       	ret

00000288 <LEDSetNumberWithZero>:
	sprintf(s, "%d\0", nr);
	LEDSetValue(s);
}

void LEDSetNumberWithZero(int nr)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	29 97       	sbiw	r28, 0x09	; 9
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
	char s[MAX_NUM_DISPLAY + 1]; // +1 end char
	
	if(nr < 10)
 29c:	8a 30       	cpi	r24, 0x0A	; 10
 29e:	91 05       	cpc	r25, r1
 2a0:	9c f4       	brge	.+38     	; 0x2c8 <LEDSetNumberWithZero+0x40>
		sprintf(s, "0%d\0", nr);
 2a2:	9f 93       	push	r25
 2a4:	8f 93       	push	r24
 2a6:	84 e6       	ldi	r24, 0x64	; 100
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9f 93       	push	r25
 2ac:	8f 93       	push	r24
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	9f 93       	push	r25
 2b4:	8f 93       	push	r24
 2b6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	12 c0       	rjmp	.+36     	; 0x2ec <LEDSetNumberWithZero+0x64>
	else
		sprintf(s, "%d\0", nr);
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	80 e6       	ldi	r24, 0x60	; 96
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	9f 93       	push	r25
 2d2:	8f 93       	push	r24
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	9f 93       	push	r25
 2da:	8f 93       	push	r24
 2dc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
	
	LEDSetValue(s);
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LEDSetValue>
}
 2f4:	29 96       	adiw	r28, 0x09	; 9
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <set_timer0>:
	return result;
}

void set_timer0()
{
	TCCR0 = 1 << CS01;
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
 30a:	89 b7       	in	r24, 0x39	; 57
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	89 bf       	out	0x39, r24	; 57
 310:	08 95       	ret

00000312 <LEDInit>:
		counter = 0;
	}
}

void LEDInit(uint8_t total_displays_f, uint8_t led_type_f, volatile uint8_t *digit_ddr_wsk, volatile uint8_t *digit_port_wsk, volatile uint8_t *display_ddr_wsk, volatile uint8_t *display_port_wsk)
{
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
	total_displays = total_displays_f;
 31a:	80 93 83 00 	sts	0x0083, r24
	led_type = led_type_f % 2;
 31e:	61 70       	andi	r22, 0x01	; 1
 320:	60 93 73 00 	sts	0x0073, r22
	digit_ddr = digit_ddr_wsk;
 324:	50 93 85 00 	sts	0x0085, r21
 328:	40 93 84 00 	sts	0x0084, r20
	digit_port = digit_port_wsk;
 32c:	30 93 80 00 	sts	0x0080, r19
 330:	20 93 7f 00 	sts	0x007F, r18
	display_ddr = display_ddr_wsk;
 334:	10 93 82 00 	sts	0x0082, r17
 338:	00 93 81 00 	sts	0x0081, r16
	display_port = display_port_wsk;
 33c:	f0 92 76 00 	sts	0x0076, r15
 340:	e0 92 75 00 	sts	0x0075, r14
	
	*digit_ddr = 0xFF;
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	fa 01       	movw	r30, r20
 348:	80 83       	st	Z, r24
	*digit_port = 0;
 34a:	e0 91 7f 00 	lds	r30, 0x007F
 34e:	f0 91 80 00 	lds	r31, 0x0080
 352:	10 82       	st	Z, r1
	*display_ddr = 0;
 354:	e0 91 81 00 	lds	r30, 0x0081
 358:	f0 91 82 00 	lds	r31, 0x0082
 35c:	10 82       	st	Z, r1
	*display_port = 0xFF;
 35e:	e0 91 75 00 	lds	r30, 0x0075
 362:	f0 91 76 00 	lds	r31, 0x0076
 366:	80 83       	st	Z, r24
	
	int i;
	for(i = 0; i < total_displays; i++)
 368:	80 91 83 00 	lds	r24, 0x0083
 36c:	88 23       	and	r24, r24
 36e:	c9 f0       	breq	.+50     	; 0x3a2 <LEDInit+0x90>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
	{
		*display_ddr |= (1 << i);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	e0 91 81 00 	lds	r30, 0x0081
 37c:	f0 91 82 00 	lds	r31, 0x0082
 380:	60 81       	ld	r22, Z
 382:	9a 01       	movw	r18, r20
 384:	08 2e       	mov	r0, r24
 386:	02 c0       	rjmp	.+4      	; 0x38c <LEDInit+0x7a>
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <LEDInit+0x76>
 390:	26 2b       	or	r18, r22
 392:	20 83       	st	Z, r18
	*digit_port = 0;
	*display_ddr = 0;
	*display_port = 0xFF;
	
	int i;
	for(i = 0; i < total_displays; i++)
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	20 91 83 00 	lds	r18, 0x0083
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	82 17       	cp	r24, r18
 39e:	93 07       	cpc	r25, r19
 3a0:	5c f3       	brlt	.-42     	; 0x378 <LEDInit+0x66>
	{
		*display_ddr |= (1 << i);
	}
	
	position = 0;
 3a2:	10 92 74 00 	sts	0x0074, r1
	set_timer0();
 3a6:	0e 94 83 01 	call	0x306	; 0x306 <set_timer0>
}
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	08 95       	ret

000003b4 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
	TCCR2 = (1 << CS22) | (1 << CS20);
 3c6:	85 e0       	ldi	r24, 0x05	; 5
 3c8:	85 bd       	out	0x25, r24	; 37
	
	if(CLOCKStatus & (1 << ACTIVE_STATUS))
 3ca:	80 91 6e 00 	lds	r24, 0x006E
 3ce:	81 ff       	sbrs	r24, 1
 3d0:	40 c0       	rjmp	.+128    	; 0x452 <__vector_4+0x9e>
	{
		if(CLOCKStatus & (1 << REVERSE_CLOCK))
 3d2:	80 91 6e 00 	lds	r24, 0x006E
 3d6:	82 ff       	sbrs	r24, 2
 3d8:	20 c0       	rjmp	.+64     	; 0x41a <__vector_4+0x66>
		{
			if(CLOCKTime > 0)
 3da:	80 91 6f 00 	lds	r24, 0x006F
 3de:	90 91 70 00 	lds	r25, 0x0070
 3e2:	a0 91 71 00 	lds	r26, 0x0071
 3e6:	b0 91 72 00 	lds	r27, 0x0072
 3ea:	89 2b       	or	r24, r25
 3ec:	8a 2b       	or	r24, r26
 3ee:	8b 2b       	or	r24, r27
 3f0:	39 f1       	breq	.+78     	; 0x440 <__vector_4+0x8c>
			CLOCKTime -= 1;
 3f2:	80 91 6f 00 	lds	r24, 0x006F
 3f6:	90 91 70 00 	lds	r25, 0x0070
 3fa:	a0 91 71 00 	lds	r26, 0x0071
 3fe:	b0 91 72 00 	lds	r27, 0x0072
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	a1 09       	sbc	r26, r1
 406:	b1 09       	sbc	r27, r1
 408:	80 93 6f 00 	sts	0x006F, r24
 40c:	90 93 70 00 	sts	0x0070, r25
 410:	a0 93 71 00 	sts	0x0071, r26
 414:	b0 93 72 00 	sts	0x0072, r27
 418:	13 c0       	rjmp	.+38     	; 0x440 <__vector_4+0x8c>
		}
		else
			CLOCKTime = (CLOCKTime + 1);
 41a:	80 91 6f 00 	lds	r24, 0x006F
 41e:	90 91 70 00 	lds	r25, 0x0070
 422:	a0 91 71 00 	lds	r26, 0x0071
 426:	b0 91 72 00 	lds	r27, 0x0072
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	a1 1d       	adc	r26, r1
 42e:	b1 1d       	adc	r27, r1
 430:	80 93 6f 00 	sts	0x006F, r24
 434:	90 93 70 00 	sts	0x0070, r25
 438:	a0 93 71 00 	sts	0x0071, r26
 43c:	b0 93 72 00 	sts	0x0072, r27
		
		if(!(CLOCKStatus & (1 << CHANGE_STATUS)))
 440:	80 91 6e 00 	lds	r24, 0x006E
 444:	80 fd       	sbrc	r24, 0
 446:	05 c0       	rjmp	.+10     	; 0x452 <__vector_4+0x9e>
			CLOCKStatus |= (1 << CHANGE_STATUS);	
 448:	80 91 6e 00 	lds	r24, 0x006E
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	80 93 6e 00 	sts	0x006E, r24
	}
}
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <getSeconds>:

int getSeconds()
{
	return (int)((CLOCKTime % HOUR_SECONDS) % MINUTE_SECONDS);
 464:	60 91 6f 00 	lds	r22, 0x006F
 468:	70 91 70 00 	lds	r23, 0x0070
 46c:	80 91 71 00 	lds	r24, 0x0071
 470:	90 91 72 00 	lds	r25, 0x0072
 474:	20 e1       	ldi	r18, 0x10	; 16
 476:	3e e0       	ldi	r19, 0x0E	; 14
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
 480:	2c e3       	ldi	r18, 0x3C	; 60
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
}
 48c:	cb 01       	movw	r24, r22
 48e:	08 95       	ret

00000490 <getMinutes>:

int getMinutes()
{
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
 490:	60 91 6f 00 	lds	r22, 0x006F
 494:	70 91 70 00 	lds	r23, 0x0070
 498:	80 91 71 00 	lds	r24, 0x0071
 49c:	90 91 72 00 	lds	r25, 0x0072
 4a0:	20 e1       	ldi	r18, 0x10	; 16
 4a2:	3e e0       	ldi	r19, 0x0E	; 14
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
 4ac:	2c e3       	ldi	r18, 0x3C	; 60
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
}
 4b8:	c9 01       	movw	r24, r18
 4ba:	08 95       	ret

000004bc <setSeconds>:
{
	return (int)(CLOCKTime / HOUR_SECONDS);
}

void setSeconds(int new_seconds)
{
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <setSeconds+0xe>
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <setSeconds+0x10>
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	7c 01       	movw	r14, r24
	int seconds = getSeconds();
 4d2:	0e 94 32 02 	call	0x464	; 0x464 <getSeconds>
 4d6:	8c 01       	movw	r16, r24
	volatile uint32_t tmpTime = CLOCKTime;
 4d8:	40 91 6f 00 	lds	r20, 0x006F
 4dc:	50 91 70 00 	lds	r21, 0x0070
 4e0:	60 91 71 00 	lds	r22, 0x0071
 4e4:	70 91 72 00 	lds	r23, 0x0072
 4e8:	49 83       	std	Y+1, r20	; 0x01
 4ea:	5a 83       	std	Y+2, r21	; 0x02
 4ec:	6b 83       	std	Y+3, r22	; 0x03
 4ee:	7c 83       	std	Y+4, r23	; 0x04
	
	new_seconds %= 60;
 4f0:	c7 01       	movw	r24, r14
 4f2:	6c e3       	ldi	r22, 0x3C	; 60
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divmodhi4>
	
	if(new_seconds < 0)
 4fa:	99 23       	and	r25, r25
 4fc:	64 f1       	brlt	.+88     	; 0x556 <setSeconds+0x9a>
		return;
	
	tmpTime -= (uint32_t)seconds;
 4fe:	49 81       	ldd	r20, Y+1	; 0x01
 500:	5a 81       	ldd	r21, Y+2	; 0x02
 502:	6b 81       	ldd	r22, Y+3	; 0x03
 504:	7c 81       	ldd	r23, Y+4	; 0x04
 506:	22 27       	eor	r18, r18
 508:	17 fd       	sbrc	r17, 7
 50a:	20 95       	com	r18
 50c:	32 2f       	mov	r19, r18
 50e:	40 1b       	sub	r20, r16
 510:	51 0b       	sbc	r21, r17
 512:	62 0b       	sbc	r22, r18
 514:	73 0b       	sbc	r23, r19
 516:	49 83       	std	Y+1, r20	; 0x01
 518:	5a 83       	std	Y+2, r21	; 0x02
 51a:	6b 83       	std	Y+3, r22	; 0x03
 51c:	7c 83       	std	Y+4, r23	; 0x04
	tmpTime += (uint32_t)new_seconds;
 51e:	49 81       	ldd	r20, Y+1	; 0x01
 520:	5a 81       	ldd	r21, Y+2	; 0x02
 522:	6b 81       	ldd	r22, Y+3	; 0x03
 524:	7c 81       	ldd	r23, Y+4	; 0x04
 526:	aa 27       	eor	r26, r26
 528:	97 fd       	sbrc	r25, 7
 52a:	a0 95       	com	r26
 52c:	ba 2f       	mov	r27, r26
 52e:	84 0f       	add	r24, r20
 530:	95 1f       	adc	r25, r21
 532:	a6 1f       	adc	r26, r22
 534:	b7 1f       	adc	r27, r23
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	9a 83       	std	Y+2, r25	; 0x02
 53a:	ab 83       	std	Y+3, r26	; 0x03
 53c:	bc 83       	std	Y+4, r27	; 0x04
	
	CLOCKTime = tmpTime;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	ab 81       	ldd	r26, Y+3	; 0x03
 544:	bc 81       	ldd	r27, Y+4	; 0x04
 546:	80 93 6f 00 	sts	0x006F, r24
 54a:	90 93 70 00 	sts	0x0070, r25
 54e:	a0 93 71 00 	sts	0x0071, r26
 552:	b0 93 72 00 	sts	0x0072, r27
}
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	08 95       	ret

0000056c <setMinutes>:

void setMinutes(int new_minutes)
{
 56c:	cf 92       	push	r12
 56e:	df 92       	push	r13
 570:	ef 92       	push	r14
 572:	ff 92       	push	r15
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	00 d0       	rcall	.+0      	; 0x57a <setMinutes+0xe>
 57a:	00 d0       	rcall	.+0      	; 0x57c <setMinutes+0x10>
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	7c 01       	movw	r14, r24
	int minutes = getMinutes();
 582:	0e 94 48 02 	call	0x490	; 0x490 <getMinutes>
 586:	fc 01       	movw	r30, r24
	volatile uint32_t tmpTime = CLOCKTime;
 588:	40 91 6f 00 	lds	r20, 0x006F
 58c:	50 91 70 00 	lds	r21, 0x0070
 590:	60 91 71 00 	lds	r22, 0x0071
 594:	70 91 72 00 	lds	r23, 0x0072
 598:	49 83       	std	Y+1, r20	; 0x01
 59a:	5a 83       	std	Y+2, r21	; 0x02
 59c:	6b 83       	std	Y+3, r22	; 0x03
 59e:	7c 83       	std	Y+4, r23	; 0x04
	
	new_minutes %= 60;
 5a0:	c7 01       	movw	r24, r14
 5a2:	6c e3       	ldi	r22, 0x3C	; 60
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divmodhi4>
 5aa:	ac 01       	movw	r20, r24
	
	if(new_minutes < 0)
 5ac:	99 23       	and	r25, r25
 5ae:	64 f1       	brlt	.+88     	; 0x608 <setMinutes+0x9c>
		return;
	
	tmpTime -= (uint32_t)minutes * MINUTE_SECONDS;
 5b0:	c9 80       	ldd	r12, Y+1	; 0x01
 5b2:	da 80       	ldd	r13, Y+2	; 0x02
 5b4:	eb 80       	ldd	r14, Y+3	; 0x03
 5b6:	fc 80       	ldd	r15, Y+4	; 0x04
 5b8:	2c e3       	ldi	r18, 0x3C	; 60
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	df 01       	movw	r26, r30
 5be:	0e 94 b9 04 	call	0x972	; 0x972 <__usmulhisi3>
 5c2:	c6 1a       	sub	r12, r22
 5c4:	d7 0a       	sbc	r13, r23
 5c6:	e8 0a       	sbc	r14, r24
 5c8:	f9 0a       	sbc	r15, r25
 5ca:	c9 82       	std	Y+1, r12	; 0x01
 5cc:	da 82       	std	Y+2, r13	; 0x02
 5ce:	eb 82       	std	Y+3, r14	; 0x03
 5d0:	fc 82       	std	Y+4, r15	; 0x04
	tmpTime += (uint32_t)new_minutes * MINUTE_SECONDS;
 5d2:	c9 80       	ldd	r12, Y+1	; 0x01
 5d4:	da 80       	ldd	r13, Y+2	; 0x02
 5d6:	eb 80       	ldd	r14, Y+3	; 0x03
 5d8:	fc 80       	ldd	r15, Y+4	; 0x04
 5da:	da 01       	movw	r26, r20
 5dc:	0e 94 b9 04 	call	0x972	; 0x972 <__usmulhisi3>
 5e0:	c6 0e       	add	r12, r22
 5e2:	d7 1e       	adc	r13, r23
 5e4:	e8 1e       	adc	r14, r24
 5e6:	f9 1e       	adc	r15, r25
 5e8:	c9 82       	std	Y+1, r12	; 0x01
 5ea:	da 82       	std	Y+2, r13	; 0x02
 5ec:	eb 82       	std	Y+3, r14	; 0x03
 5ee:	fc 82       	std	Y+4, r15	; 0x04
	
	CLOCKTime = tmpTime;
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	9a 81       	ldd	r25, Y+2	; 0x02
 5f4:	ab 81       	ldd	r26, Y+3	; 0x03
 5f6:	bc 81       	ldd	r27, Y+4	; 0x04
 5f8:	80 93 6f 00 	sts	0x006F, r24
 5fc:	90 93 70 00 	sts	0x0070, r25
 600:	a0 93 71 00 	sts	0x0071, r26
 604:	b0 93 72 00 	sts	0x0072, r27
}
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	ff 90       	pop	r15
 616:	ef 90       	pop	r14
 618:	df 90       	pop	r13
 61a:	cf 90       	pop	r12
 61c:	08 95       	ret

0000061e <setHours>:

void setHours(int new_hours)
{
 61e:	cf 92       	push	r12
 620:	df 92       	push	r13
 622:	ef 92       	push	r14
 624:	ff 92       	push	r15
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	00 d0       	rcall	.+0      	; 0x630 <setHours+0x12>
 630:	00 d0       	rcall	.+0      	; 0x632 <setHours+0x14>
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	8c 01       	movw	r16, r24
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
}

int getHours()
{
	return (int)(CLOCKTime / HOUR_SECONDS);
 638:	60 91 6f 00 	lds	r22, 0x006F
 63c:	70 91 70 00 	lds	r23, 0x0070
 640:	80 91 71 00 	lds	r24, 0x0071
 644:	90 91 72 00 	lds	r25, 0x0072
 648:	20 e1       	ldi	r18, 0x10	; 16
 64a:	3e e0       	ldi	r19, 0x0E	; 14
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
}

void setHours(int new_hours)
{
	int hours = getHours();
	volatile uint32_t tmpTime = CLOCKTime;
 654:	80 91 6f 00 	lds	r24, 0x006F
 658:	90 91 70 00 	lds	r25, 0x0070
 65c:	a0 91 71 00 	lds	r26, 0x0071
 660:	b0 91 72 00 	lds	r27, 0x0072
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	9a 83       	std	Y+2, r25	; 0x02
 668:	ab 83       	std	Y+3, r26	; 0x03
 66a:	bc 83       	std	Y+4, r27	; 0x04
	
	if(new_hours < 0)
 66c:	11 23       	and	r17, r17
 66e:	64 f1       	brlt	.+88     	; 0x6c8 <setHours+0xaa>
		return;
		
	tmpTime -= (uint32_t)hours * HOUR_SECONDS;	
 670:	c9 80       	ldd	r12, Y+1	; 0x01
 672:	da 80       	ldd	r13, Y+2	; 0x02
 674:	eb 80       	ldd	r14, Y+3	; 0x03
 676:	fc 80       	ldd	r15, Y+4	; 0x04
 678:	d9 01       	movw	r26, r18
 67a:	20 e1       	ldi	r18, 0x10	; 16
 67c:	3e e0       	ldi	r19, 0x0E	; 14
 67e:	0e 94 b9 04 	call	0x972	; 0x972 <__usmulhisi3>
 682:	c6 1a       	sub	r12, r22
 684:	d7 0a       	sbc	r13, r23
 686:	e8 0a       	sbc	r14, r24
 688:	f9 0a       	sbc	r15, r25
 68a:	c9 82       	std	Y+1, r12	; 0x01
 68c:	da 82       	std	Y+2, r13	; 0x02
 68e:	eb 82       	std	Y+3, r14	; 0x03
 690:	fc 82       	std	Y+4, r15	; 0x04
	tmpTime += (uint32_t)new_hours * HOUR_SECONDS;
 692:	c9 80       	ldd	r12, Y+1	; 0x01
 694:	da 80       	ldd	r13, Y+2	; 0x02
 696:	eb 80       	ldd	r14, Y+3	; 0x03
 698:	fc 80       	ldd	r15, Y+4	; 0x04
 69a:	d8 01       	movw	r26, r16
 69c:	0e 94 b9 04 	call	0x972	; 0x972 <__usmulhisi3>
 6a0:	c6 0e       	add	r12, r22
 6a2:	d7 1e       	adc	r13, r23
 6a4:	e8 1e       	adc	r14, r24
 6a6:	f9 1e       	adc	r15, r25
 6a8:	c9 82       	std	Y+1, r12	; 0x01
 6aa:	da 82       	std	Y+2, r13	; 0x02
 6ac:	eb 82       	std	Y+3, r14	; 0x03
 6ae:	fc 82       	std	Y+4, r15	; 0x04
	
	CLOCKTime = tmpTime;
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	9a 81       	ldd	r25, Y+2	; 0x02
 6b4:	ab 81       	ldd	r26, Y+3	; 0x03
 6b6:	bc 81       	ldd	r27, Y+4	; 0x04
 6b8:	80 93 6f 00 	sts	0x006F, r24
 6bc:	90 93 70 00 	sts	0x0070, r25
 6c0:	a0 93 71 00 	sts	0x0071, r26
 6c4:	b0 93 72 00 	sts	0x0072, r27
}
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	1f 91       	pop	r17
 6d6:	0f 91       	pop	r16
 6d8:	ff 90       	pop	r15
 6da:	ef 90       	pop	r14
 6dc:	df 90       	pop	r13
 6de:	cf 90       	pop	r12
 6e0:	08 95       	ret

000006e2 <CLOCKStart>:
void CLOCKStart()
{
	/*
		this must be before set CLOCKStatus, because in otherwise timer will increase its value twice
	*/
	TIMSK |= (1 << TOIE2);
 6e2:	89 b7       	in	r24, 0x39	; 57
 6e4:	80 64       	ori	r24, 0x40	; 64
 6e6:	89 bf       	out	0x39, r24	; 57
	CLOCKStatus |= (1 << ACTIVE_STATUS);
 6e8:	80 91 6e 00 	lds	r24, 0x006E
 6ec:	82 60       	ori	r24, 0x02	; 2
 6ee:	80 93 6e 00 	sts	0x006E, r24
 6f2:	08 95       	ret

000006f4 <CLOCKStop>:
void CLOCKStop()
{
	/*
		this must be before set CLOCKStatus, because in otherwise timer will increase its value twice
	*/
	TIMSK &= ~(1 << TOIE2);
 6f4:	89 b7       	in	r24, 0x39	; 57
 6f6:	8f 7b       	andi	r24, 0xBF	; 191
 6f8:	89 bf       	out	0x39, r24	; 57
	CLOCKStatus &= ~(1 << ACTIVE_STATUS);
 6fa:	80 91 6e 00 	lds	r24, 0x006E
 6fe:	8d 7f       	andi	r24, 0xFD	; 253
 700:	80 93 6e 00 	sts	0x006E, r24
 704:	08 95       	ret

00000706 <CLOCKIsActive>:
}

int CLOCKIsActive()
{
	if(CLOCKStatus & (1 << ACTIVE_STATUS))
 706:	80 91 6e 00 	lds	r24, 0x006E
		return 1;
	else
		return 0;
}
 70a:	86 95       	lsr	r24
 70c:	81 70       	andi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	08 95       	ret

00000712 <CLOCKInit>:

void CLOCKInit()
{
	ASSR |= (1 << AS2); // set timer in async mode
 712:	82 b5       	in	r24, 0x22	; 34
 714:	88 60       	ori	r24, 0x08	; 8
 716:	82 bd       	out	0x22, r24	; 34
	
	TCNT2 = 0;
 718:	14 bc       	out	0x24, r1	; 36
	TCCR2 = (1 << CS22) | (1 << CS20);
 71a:	85 e0       	ldi	r24, 0x05	; 5
 71c:	85 bd       	out	0x25, r24	; 37
 71e:	08 95       	ret

00000720 <main>:
#include <util/delay.h>

int main(void)
{
	// przekaznik
	DDRB = 0x00000001;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00011110;
 724:	80 e1       	ldi	r24, 0x10	; 16
 726:	88 bb       	out	0x18, r24	; 24
	
	uint8_t set_time_mode = 1; // set default: hour_mod
	uint8_t modyfi_mode = 1; // set default: true
	
	LEDInit(4, 1, &DDRD, &PORTD, &DDRC, &PORTC);
 728:	0f 2e       	mov	r0, r31
 72a:	f5 e3       	ldi	r31, 0x35	; 53
 72c:	ef 2e       	mov	r14, r31
 72e:	f1 2c       	mov	r15, r1
 730:	f0 2d       	mov	r31, r0
 732:	04 e3       	ldi	r16, 0x34	; 52
 734:	10 e0       	ldi	r17, 0x00	; 0
 736:	22 e3       	ldi	r18, 0x32	; 50
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	41 e3       	ldi	r20, 0x31	; 49
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	0e 94 89 01 	call	0x312	; 0x312 <LEDInit>
	CLOCKInit();
 746:	0e 94 89 03 	call	0x712	; 0x712 <CLOCKInit>
	CLOCKStatus |= (1 << REVERSE_CLOCK);
 74a:	80 91 6e 00 	lds	r24, 0x006E
 74e:	84 60       	ori	r24, 0x04	; 4
 750:	80 93 6e 00 	sts	0x006E, r24
	setHours(12);
 754:	8c e0       	ldi	r24, 0x0C	; 12
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 0f 03 	call	0x61e	; 0x61e <setHours>
	
	sei();
 75c:	78 94       	sei
	
	clearDisplay();
 75e:	0e 94 c2 00 	call	0x184	; 0x184 <clearDisplay>
	// przekaznik
	DDRB = 0x00000001;
	PORTB = 0x00011110;
	
	uint8_t set_time_mode = 1; // set default: hour_mod
	uint8_t modyfi_mode = 1; // set default: true
 762:	11 e0       	ldi	r17, 0x01	; 1
{
	// przekaznik
	DDRB = 0x00000001;
	PORTB = 0x00011110;
	
	uint8_t set_time_mode = 1; // set default: hour_mod
 764:	c1 e0       	ldi	r28, 0x01	; 1
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
			modyfi_mode = 1;
 766:	01 e0       	ldi	r16, 0x01	; 1
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
}

int getHours()
{
	return (int)(CLOCKTime / HOUR_SECONDS);
 768:	0f 2e       	mov	r0, r31
 76a:	f0 e1       	ldi	r31, 0x10	; 16
 76c:	cf 2e       	mov	r12, r31
 76e:	fe e0       	ldi	r31, 0x0E	; 14
 770:	df 2e       	mov	r13, r31
 772:	e1 2c       	mov	r14, r1
 774:	f1 2c       	mov	r15, r1
 776:	f0 2d       	mov	r31, r0
	}
}

void LEDSetPosition(uint8_t pos)
{
	position = pos % MAX_NUM_DISPLAY;
 778:	d2 e0       	ldi	r29, 0x02	; 2
	clearDisplay();
	
	while(1)
	{
		// finish time
		if(CLOCKTime == 0 && CLOCKIsActive())
 77a:	80 91 6f 00 	lds	r24, 0x006F
 77e:	90 91 70 00 	lds	r25, 0x0070
 782:	a0 91 71 00 	lds	r26, 0x0071
 786:	b0 91 72 00 	lds	r27, 0x0072
 78a:	89 2b       	or	r24, r25
 78c:	8a 2b       	or	r24, r26
 78e:	8b 2b       	or	r24, r27
 790:	49 f4       	brne	.+18     	; 0x7a4 <main+0x84>
 792:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 796:	89 2b       	or	r24, r25
 798:	29 f0       	breq	.+10     	; 0x7a4 <main+0x84>
		{
			CLOCKStop();
 79a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <CLOCKStop>
			
			set_time_mode = 1;
			modyfi_mode = 1;
			
			PORTB |= (1 << RELAY);
 79e:	c0 9a       	sbi	0x18, 0	; 24
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
			modyfi_mode = 1;
 7a0:	10 2f       	mov	r17, r16
		// finish time
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
 7a2:	c0 2f       	mov	r28, r16
 7a4:	10 92 74 00 	sts	0x0074, r1
 7a8:	60 91 6f 00 	lds	r22, 0x006F
 7ac:	70 91 70 00 	lds	r23, 0x0070
 7b0:	80 91 71 00 	lds	r24, 0x0071
 7b4:	90 91 72 00 	lds	r25, 0x0072
 7b8:	a7 01       	movw	r20, r14
 7ba:	96 01       	movw	r18, r12
 7bc:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
			PORTB |= (1 << RELAY);
		}
		
		// LED
		LEDSetPosition(0);
		LEDSetNumberWithZero(getHours());
 7c0:	c9 01       	movw	r24, r18
 7c2:	0e 94 44 01 	call	0x288	; 0x288 <LEDSetNumberWithZero>
 7c6:	d0 93 74 00 	sts	0x0074, r29
		
		LEDSetPosition(2);
		LEDSetNumberWithZero(getMinutes());
 7ca:	0e 94 48 02 	call	0x490	; 0x490 <getMinutes>
 7ce:	0e 94 44 01 	call	0x288	; 0x288 <LEDSetNumberWithZero>

// 		LEDSetPosition(4);
// 		LEDSetNumberWithZero(getSeconds());
		
		// Switches
		if(!(PINB & (1 << 2)) && !CLOCKIsActive()) // UP
 7d2:	b2 99       	sbic	0x16, 2	; 22
 7d4:	38 c0       	rjmp	.+112    	; 0x846 <main+0x126>
 7d6:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 7da:	89 2b       	or	r24, r25
 7dc:	a1 f5       	brne	.+104    	; 0x846 <main+0x126>
		{
			if(!CLOCKIsActive())
 7de:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 7e2:	89 2b       	or	r24, r25
 7e4:	39 f5       	brne	.+78     	; 0x834 <main+0x114>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
 7e6:	c0 ff       	sbrs	r28, 0
 7e8:	12 c0       	rjmp	.+36     	; 0x80e <main+0xee>
 7ea:	60 91 6f 00 	lds	r22, 0x006F
 7ee:	70 91 70 00 	lds	r23, 0x0070
 7f2:	80 91 71 00 	lds	r24, 0x0071
 7f6:	90 91 72 00 	lds	r25, 0x0072
 7fa:	a7 01       	movw	r20, r14
 7fc:	96 01       	movw	r18, r12
 7fe:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
				setHours(getHours() + 1);
 802:	c9 01       	movw	r24, r18
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	0e 94 0f 03 	call	0x61e	; 0x61e <setHours>
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() + 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() + 1);

				modyfi_mode = 1;
 80a:	10 2f       	mov	r17, r16
 80c:	13 c0       	rjmp	.+38     	; 0x834 <main+0x114>
		{
			if(!CLOCKIsActive())
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() + 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
 80e:	c1 ff       	sbrs	r28, 1
 810:	07 c0       	rjmp	.+14     	; 0x820 <main+0x100>
				setMinutes(getMinutes() + 1);
 812:	0e 94 48 02 	call	0x490	; 0x490 <getMinutes>
 816:	01 96       	adiw	r24, 0x01	; 1
 818:	0e 94 b6 02 	call	0x56c	; 0x56c <setMinutes>
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() + 1);

				modyfi_mode = 1;
 81c:	10 2f       	mov	r17, r16
 81e:	0a c0       	rjmp	.+20     	; 0x834 <main+0x114>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() + 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() + 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
 820:	c2 ff       	sbrs	r28, 2
 822:	07 c0       	rjmp	.+14     	; 0x832 <main+0x112>
				setSeconds(getSeconds() + 1);
 824:	0e 94 32 02 	call	0x464	; 0x464 <getSeconds>
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <setSeconds>

				modyfi_mode = 1;
 82e:	10 2f       	mov	r17, r16
 830:	01 c0       	rjmp	.+2      	; 0x834 <main+0x114>
 832:	10 2f       	mov	r17, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 834:	8f e3       	ldi	r24, 0x3F	; 63
 836:	9c e9       	ldi	r25, 0x9C	; 156
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <main+0x118>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0x11e>
 83e:	00 00       	nop
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 2)));
 840:	b2 9b       	sbis	0x16, 2	; 22
 842:	fe cf       	rjmp	.-4      	; 0x840 <main+0x120>
 844:	9a cf       	rjmp	.-204    	; 0x77a <main+0x5a>
		}
		else if(!(PINB & (1 << 3)) && !CLOCKIsActive()) // DOWN
 846:	b3 99       	sbic	0x16, 3	; 22
 848:	38 c0       	rjmp	.+112    	; 0x8ba <main+0x19a>
 84a:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 84e:	89 2b       	or	r24, r25
 850:	a1 f5       	brne	.+104    	; 0x8ba <main+0x19a>
		{
			if(!CLOCKIsActive())
 852:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 856:	89 2b       	or	r24, r25
 858:	39 f5       	brne	.+78     	; 0x8a8 <main+0x188>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
 85a:	c0 ff       	sbrs	r28, 0
 85c:	12 c0       	rjmp	.+36     	; 0x882 <main+0x162>
 85e:	60 91 6f 00 	lds	r22, 0x006F
 862:	70 91 70 00 	lds	r23, 0x0070
 866:	80 91 71 00 	lds	r24, 0x0071
 86a:	90 91 72 00 	lds	r25, 0x0072
 86e:	a7 01       	movw	r20, r14
 870:	96 01       	movw	r18, r12
 872:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
				setHours(getHours() - 1);
 876:	c9 01       	movw	r24, r18
 878:	01 97       	sbiw	r24, 0x01	; 1
 87a:	0e 94 0f 03 	call	0x61e	; 0x61e <setHours>
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() - 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() - 1);

				modyfi_mode = 1;
 87e:	10 2f       	mov	r17, r16
 880:	13 c0       	rjmp	.+38     	; 0x8a8 <main+0x188>
		{
			if(!CLOCKIsActive())
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() - 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
 882:	c1 ff       	sbrs	r28, 1
 884:	07 c0       	rjmp	.+14     	; 0x894 <main+0x174>
				setMinutes(getMinutes() - 1);
 886:	0e 94 48 02 	call	0x490	; 0x490 <getMinutes>
 88a:	01 97       	sbiw	r24, 0x01	; 1
 88c:	0e 94 b6 02 	call	0x56c	; 0x56c <setMinutes>
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() - 1);

				modyfi_mode = 1;
 890:	10 2f       	mov	r17, r16
 892:	0a c0       	rjmp	.+20     	; 0x8a8 <main+0x188>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() - 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() - 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
 894:	c2 ff       	sbrs	r28, 2
 896:	07 c0       	rjmp	.+14     	; 0x8a6 <main+0x186>
				setSeconds(getSeconds() - 1);
 898:	0e 94 32 02 	call	0x464	; 0x464 <getSeconds>
 89c:	01 97       	sbiw	r24, 0x01	; 1
 89e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <setSeconds>

				modyfi_mode = 1;
 8a2:	10 2f       	mov	r17, r16
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <main+0x188>
 8a6:	10 2f       	mov	r17, r16
 8a8:	8f e3       	ldi	r24, 0x3F	; 63
 8aa:	9c e9       	ldi	r25, 0x9C	; 156
 8ac:	01 97       	sbiw	r24, 0x01	; 1
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <main+0x18c>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <main+0x192>
 8b2:	00 00       	nop
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 3)));
 8b4:	b3 9b       	sbis	0x16, 3	; 22
 8b6:	fe cf       	rjmp	.-4      	; 0x8b4 <main+0x194>
 8b8:	60 cf       	rjmp	.-320    	; 0x77a <main+0x5a>
		}
		else if(!(PINB & (1 << 4))) // OK, STOP, START
 8ba:	b4 99       	sbic	0x16, 4	; 22
 8bc:	5e cf       	rjmp	.-324    	; 0x77a <main+0x5a>
		{
			if(CLOCKIsActive())
 8be:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 8c2:	89 2b       	or	r24, r25
 8c4:	29 f0       	breq	.+10     	; 0x8d0 <main+0x1b0>
			{
				CLOCKStop();
 8c6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <CLOCKStop>
				
				set_time_mode = 1;
				modyfi_mode = 1;
 8ca:	10 2f       	mov	r17, r16
		{
			if(CLOCKIsActive())
			{
				CLOCKStop();
				
				set_time_mode = 1;
 8cc:	c0 2f       	mov	r28, r16
 8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <main+0x1c8>
				modyfi_mode = 1;
			}
			else
			{
				if(modyfi_mode)
 8d0:	11 23       	and	r17, r17
 8d2:	41 f0       	breq	.+16     	; 0x8e4 <main+0x1c4>
				{
					set_time_mode <<= 1;
 8d4:	cc 0f       	add	r28, r28
					
					if(set_time_mode & (1 << SET_END_MOD))
 8d6:	c3 ff       	sbrs	r28, 3
 8d8:	07 c0       	rjmp	.+14     	; 0x8e8 <main+0x1c8>
					{
						set_time_mode = 0;
						modyfi_mode = 0;
						
						CLOCKStart();
 8da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <CLOCKStart>
					set_time_mode <<= 1;
					
					if(set_time_mode & (1 << SET_END_MOD))
					{
						set_time_mode = 0;
						modyfi_mode = 0;
 8de:	10 e0       	ldi	r17, 0x00	; 0
				{
					set_time_mode <<= 1;
					
					if(set_time_mode & (1 << SET_END_MOD))
					{
						set_time_mode = 0;
 8e0:	c0 e0       	ldi	r28, 0x00	; 0
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <main+0x1c8>
						
						CLOCKStart();
					}
				}
				else
				CLOCKStart();
 8e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <CLOCKStart>
 8e8:	8f e3       	ldi	r24, 0x3F	; 63
 8ea:	9c e9       	ldi	r25, 0x9C	; 156
 8ec:	01 97       	sbiw	r24, 0x01	; 1
 8ee:	f1 f7       	brne	.-4      	; 0x8ec <main+0x1cc>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <main+0x1d2>
 8f2:	00 00       	nop
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 4)));
 8f4:	b4 9b       	sbis	0x16, 4	; 22
 8f6:	fe cf       	rjmp	.-4      	; 0x8f4 <main+0x1d4>
 8f8:	40 cf       	rjmp	.-384    	; 0x77a <main+0x5a>

000008fa <__divmodhi4>:
 8fa:	97 fb       	bst	r25, 7
 8fc:	07 2e       	mov	r0, r23
 8fe:	16 f4       	brtc	.+4      	; 0x904 <__divmodhi4+0xa>
 900:	00 94       	com	r0
 902:	07 d0       	rcall	.+14     	; 0x912 <__divmodhi4_neg1>
 904:	77 fd       	sbrc	r23, 7
 906:	09 d0       	rcall	.+18     	; 0x91a <__divmodhi4_neg2>
 908:	0e 94 c0 04 	call	0x980	; 0x980 <__udivmodhi4>
 90c:	07 fc       	sbrc	r0, 7
 90e:	05 d0       	rcall	.+10     	; 0x91a <__divmodhi4_neg2>
 910:	3e f4       	brtc	.+14     	; 0x920 <__divmodhi4_exit>

00000912 <__divmodhi4_neg1>:
 912:	90 95       	com	r25
 914:	81 95       	neg	r24
 916:	9f 4f       	sbci	r25, 0xFF	; 255
 918:	08 95       	ret

0000091a <__divmodhi4_neg2>:
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255

00000920 <__divmodhi4_exit>:
 920:	08 95       	ret

00000922 <__udivmodsi4>:
 922:	a1 e2       	ldi	r26, 0x21	; 33
 924:	1a 2e       	mov	r1, r26
 926:	aa 1b       	sub	r26, r26
 928:	bb 1b       	sub	r27, r27
 92a:	fd 01       	movw	r30, r26
 92c:	0d c0       	rjmp	.+26     	; 0x948 <__udivmodsi4_ep>

0000092e <__udivmodsi4_loop>:
 92e:	aa 1f       	adc	r26, r26
 930:	bb 1f       	adc	r27, r27
 932:	ee 1f       	adc	r30, r30
 934:	ff 1f       	adc	r31, r31
 936:	a2 17       	cp	r26, r18
 938:	b3 07       	cpc	r27, r19
 93a:	e4 07       	cpc	r30, r20
 93c:	f5 07       	cpc	r31, r21
 93e:	20 f0       	brcs	.+8      	; 0x948 <__udivmodsi4_ep>
 940:	a2 1b       	sub	r26, r18
 942:	b3 0b       	sbc	r27, r19
 944:	e4 0b       	sbc	r30, r20
 946:	f5 0b       	sbc	r31, r21

00000948 <__udivmodsi4_ep>:
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	1a 94       	dec	r1
 952:	69 f7       	brne	.-38     	; 0x92e <__udivmodsi4_loop>
 954:	60 95       	com	r22
 956:	70 95       	com	r23
 958:	80 95       	com	r24
 95a:	90 95       	com	r25
 95c:	9b 01       	movw	r18, r22
 95e:	ac 01       	movw	r20, r24
 960:	bd 01       	movw	r22, r26
 962:	cf 01       	movw	r24, r30
 964:	08 95       	ret

00000966 <__tablejump2__>:
 966:	ee 0f       	add	r30, r30
 968:	ff 1f       	adc	r31, r31

0000096a <__tablejump__>:
 96a:	05 90       	lpm	r0, Z+
 96c:	f4 91       	lpm	r31, Z
 96e:	e0 2d       	mov	r30, r0
 970:	09 94       	ijmp

00000972 <__usmulhisi3>:
 972:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__umulhisi3>

00000976 <__usmulhisi3_tail>:
 976:	b7 ff       	sbrs	r27, 7
 978:	08 95       	ret
 97a:	82 1b       	sub	r24, r18
 97c:	93 0b       	sbc	r25, r19
 97e:	08 95       	ret

00000980 <__udivmodhi4>:
 980:	aa 1b       	sub	r26, r26
 982:	bb 1b       	sub	r27, r27
 984:	51 e1       	ldi	r21, 0x11	; 17
 986:	07 c0       	rjmp	.+14     	; 0x996 <__udivmodhi4_ep>

00000988 <__udivmodhi4_loop>:
 988:	aa 1f       	adc	r26, r26
 98a:	bb 1f       	adc	r27, r27
 98c:	a6 17       	cp	r26, r22
 98e:	b7 07       	cpc	r27, r23
 990:	10 f0       	brcs	.+4      	; 0x996 <__udivmodhi4_ep>
 992:	a6 1b       	sub	r26, r22
 994:	b7 0b       	sbc	r27, r23

00000996 <__udivmodhi4_ep>:
 996:	88 1f       	adc	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	5a 95       	dec	r21
 99c:	a9 f7       	brne	.-22     	; 0x988 <__udivmodhi4_loop>
 99e:	80 95       	com	r24
 9a0:	90 95       	com	r25
 9a2:	bc 01       	movw	r22, r24
 9a4:	cd 01       	movw	r24, r26
 9a6:	08 95       	ret

000009a8 <__umulhisi3>:
 9a8:	a2 9f       	mul	r26, r18
 9aa:	b0 01       	movw	r22, r0
 9ac:	b3 9f       	mul	r27, r19
 9ae:	c0 01       	movw	r24, r0
 9b0:	a3 9f       	mul	r26, r19
 9b2:	70 0d       	add	r23, r0
 9b4:	81 1d       	adc	r24, r1
 9b6:	11 24       	eor	r1, r1
 9b8:	91 1d       	adc	r25, r1
 9ba:	b2 9f       	mul	r27, r18
 9bc:	70 0d       	add	r23, r0
 9be:	81 1d       	adc	r24, r1
 9c0:	11 24       	eor	r1, r1
 9c2:	91 1d       	adc	r25, r1
 9c4:	08 95       	ret

000009c6 <sprintf>:
 9c6:	ae e0       	ldi	r26, 0x0E	; 14
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e9 ee       	ldi	r30, 0xE9	; 233
 9cc:	f4 e0       	ldi	r31, 0x04	; 4
 9ce:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__prologue_saves__+0x1c>
 9d2:	0d 89       	ldd	r16, Y+21	; 0x15
 9d4:	1e 89       	ldd	r17, Y+22	; 0x16
 9d6:	86 e0       	ldi	r24, 0x06	; 6
 9d8:	8c 83       	std	Y+4, r24	; 0x04
 9da:	1a 83       	std	Y+2, r17	; 0x02
 9dc:	09 83       	std	Y+1, r16	; 0x01
 9de:	8f ef       	ldi	r24, 0xFF	; 255
 9e0:	9f e7       	ldi	r25, 0x7F	; 127
 9e2:	9e 83       	std	Y+6, r25	; 0x06
 9e4:	8d 83       	std	Y+5, r24	; 0x05
 9e6:	ae 01       	movw	r20, r28
 9e8:	47 5e       	subi	r20, 0xE7	; 231
 9ea:	5f 4f       	sbci	r21, 0xFF	; 255
 9ec:	6f 89       	ldd	r22, Y+23	; 0x17
 9ee:	78 8d       	ldd	r23, Y+24	; 0x18
 9f0:	ce 01       	movw	r24, r28
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	0e 94 05 05 	call	0xa0a	; 0xa0a <vfprintf>
 9f8:	ef 81       	ldd	r30, Y+7	; 0x07
 9fa:	f8 85       	ldd	r31, Y+8	; 0x08
 9fc:	e0 0f       	add	r30, r16
 9fe:	f1 1f       	adc	r31, r17
 a00:	10 82       	st	Z, r1
 a02:	2e 96       	adiw	r28, 0x0e	; 14
 a04:	e4 e0       	ldi	r30, 0x04	; 4
 a06:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__epilogue_restores__+0x1c>

00000a0a <vfprintf>:
 a0a:	ac e0       	ldi	r26, 0x0C	; 12
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	eb e0       	ldi	r30, 0x0B	; 11
 a10:	f5 e0       	ldi	r31, 0x05	; 5
 a12:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__prologue_saves__>
 a16:	7c 01       	movw	r14, r24
 a18:	6b 01       	movw	r12, r22
 a1a:	8a 01       	movw	r16, r20
 a1c:	fc 01       	movw	r30, r24
 a1e:	17 82       	std	Z+7, r1	; 0x07
 a20:	16 82       	std	Z+6, r1	; 0x06
 a22:	83 81       	ldd	r24, Z+3	; 0x03
 a24:	81 ff       	sbrs	r24, 1
 a26:	bd c1       	rjmp	.+890    	; 0xda2 <vfprintf+0x398>
 a28:	ce 01       	movw	r24, r28
 a2a:	01 96       	adiw	r24, 0x01	; 1
 a2c:	4c 01       	movw	r8, r24
 a2e:	f7 01       	movw	r30, r14
 a30:	93 81       	ldd	r25, Z+3	; 0x03
 a32:	f6 01       	movw	r30, r12
 a34:	93 fd       	sbrc	r25, 3
 a36:	85 91       	lpm	r24, Z+
 a38:	93 ff       	sbrs	r25, 3
 a3a:	81 91       	ld	r24, Z+
 a3c:	6f 01       	movw	r12, r30
 a3e:	88 23       	and	r24, r24
 a40:	09 f4       	brne	.+2      	; 0xa44 <vfprintf+0x3a>
 a42:	ab c1       	rjmp	.+854    	; 0xd9a <vfprintf+0x390>
 a44:	85 32       	cpi	r24, 0x25	; 37
 a46:	39 f4       	brne	.+14     	; 0xa56 <vfprintf+0x4c>
 a48:	93 fd       	sbrc	r25, 3
 a4a:	85 91       	lpm	r24, Z+
 a4c:	93 ff       	sbrs	r25, 3
 a4e:	81 91       	ld	r24, Z+
 a50:	6f 01       	movw	r12, r30
 a52:	85 32       	cpi	r24, 0x25	; 37
 a54:	29 f4       	brne	.+10     	; 0xa60 <vfprintf+0x56>
 a56:	b7 01       	movw	r22, r14
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 a5e:	e7 cf       	rjmp	.-50     	; 0xa2e <vfprintf+0x24>
 a60:	51 2c       	mov	r5, r1
 a62:	31 2c       	mov	r3, r1
 a64:	20 e0       	ldi	r18, 0x00	; 0
 a66:	20 32       	cpi	r18, 0x20	; 32
 a68:	a0 f4       	brcc	.+40     	; 0xa92 <vfprintf+0x88>
 a6a:	8b 32       	cpi	r24, 0x2B	; 43
 a6c:	69 f0       	breq	.+26     	; 0xa88 <vfprintf+0x7e>
 a6e:	30 f4       	brcc	.+12     	; 0xa7c <vfprintf+0x72>
 a70:	80 32       	cpi	r24, 0x20	; 32
 a72:	59 f0       	breq	.+22     	; 0xa8a <vfprintf+0x80>
 a74:	83 32       	cpi	r24, 0x23	; 35
 a76:	69 f4       	brne	.+26     	; 0xa92 <vfprintf+0x88>
 a78:	20 61       	ori	r18, 0x10	; 16
 a7a:	2c c0       	rjmp	.+88     	; 0xad4 <vfprintf+0xca>
 a7c:	8d 32       	cpi	r24, 0x2D	; 45
 a7e:	39 f0       	breq	.+14     	; 0xa8e <vfprintf+0x84>
 a80:	80 33       	cpi	r24, 0x30	; 48
 a82:	39 f4       	brne	.+14     	; 0xa92 <vfprintf+0x88>
 a84:	21 60       	ori	r18, 0x01	; 1
 a86:	26 c0       	rjmp	.+76     	; 0xad4 <vfprintf+0xca>
 a88:	22 60       	ori	r18, 0x02	; 2
 a8a:	24 60       	ori	r18, 0x04	; 4
 a8c:	23 c0       	rjmp	.+70     	; 0xad4 <vfprintf+0xca>
 a8e:	28 60       	ori	r18, 0x08	; 8
 a90:	21 c0       	rjmp	.+66     	; 0xad4 <vfprintf+0xca>
 a92:	27 fd       	sbrc	r18, 7
 a94:	27 c0       	rjmp	.+78     	; 0xae4 <vfprintf+0xda>
 a96:	30 ed       	ldi	r19, 0xD0	; 208
 a98:	38 0f       	add	r19, r24
 a9a:	3a 30       	cpi	r19, 0x0A	; 10
 a9c:	78 f4       	brcc	.+30     	; 0xabc <vfprintf+0xb2>
 a9e:	26 ff       	sbrs	r18, 6
 aa0:	06 c0       	rjmp	.+12     	; 0xaae <vfprintf+0xa4>
 aa2:	fa e0       	ldi	r31, 0x0A	; 10
 aa4:	5f 9e       	mul	r5, r31
 aa6:	30 0d       	add	r19, r0
 aa8:	11 24       	eor	r1, r1
 aaa:	53 2e       	mov	r5, r19
 aac:	13 c0       	rjmp	.+38     	; 0xad4 <vfprintf+0xca>
 aae:	8a e0       	ldi	r24, 0x0A	; 10
 ab0:	38 9e       	mul	r3, r24
 ab2:	30 0d       	add	r19, r0
 ab4:	11 24       	eor	r1, r1
 ab6:	33 2e       	mov	r3, r19
 ab8:	20 62       	ori	r18, 0x20	; 32
 aba:	0c c0       	rjmp	.+24     	; 0xad4 <vfprintf+0xca>
 abc:	8e 32       	cpi	r24, 0x2E	; 46
 abe:	21 f4       	brne	.+8      	; 0xac8 <vfprintf+0xbe>
 ac0:	26 fd       	sbrc	r18, 6
 ac2:	6b c1       	rjmp	.+726    	; 0xd9a <vfprintf+0x390>
 ac4:	20 64       	ori	r18, 0x40	; 64
 ac6:	06 c0       	rjmp	.+12     	; 0xad4 <vfprintf+0xca>
 ac8:	8c 36       	cpi	r24, 0x6C	; 108
 aca:	11 f4       	brne	.+4      	; 0xad0 <vfprintf+0xc6>
 acc:	20 68       	ori	r18, 0x80	; 128
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <vfprintf+0xca>
 ad0:	88 36       	cpi	r24, 0x68	; 104
 ad2:	41 f4       	brne	.+16     	; 0xae4 <vfprintf+0xda>
 ad4:	f6 01       	movw	r30, r12
 ad6:	93 fd       	sbrc	r25, 3
 ad8:	85 91       	lpm	r24, Z+
 ada:	93 ff       	sbrs	r25, 3
 adc:	81 91       	ld	r24, Z+
 ade:	6f 01       	movw	r12, r30
 ae0:	81 11       	cpse	r24, r1
 ae2:	c1 cf       	rjmp	.-126    	; 0xa66 <vfprintf+0x5c>
 ae4:	98 2f       	mov	r25, r24
 ae6:	9f 7d       	andi	r25, 0xDF	; 223
 ae8:	95 54       	subi	r25, 0x45	; 69
 aea:	93 30       	cpi	r25, 0x03	; 3
 aec:	28 f4       	brcc	.+10     	; 0xaf8 <vfprintf+0xee>
 aee:	0c 5f       	subi	r16, 0xFC	; 252
 af0:	1f 4f       	sbci	r17, 0xFF	; 255
 af2:	ff e3       	ldi	r31, 0x3F	; 63
 af4:	f9 83       	std	Y+1, r31	; 0x01
 af6:	0d c0       	rjmp	.+26     	; 0xb12 <vfprintf+0x108>
 af8:	83 36       	cpi	r24, 0x63	; 99
 afa:	31 f0       	breq	.+12     	; 0xb08 <vfprintf+0xfe>
 afc:	83 37       	cpi	r24, 0x73	; 115
 afe:	71 f0       	breq	.+28     	; 0xb1c <vfprintf+0x112>
 b00:	83 35       	cpi	r24, 0x53	; 83
 b02:	09 f0       	breq	.+2      	; 0xb06 <vfprintf+0xfc>
 b04:	5b c0       	rjmp	.+182    	; 0xbbc <vfprintf+0x1b2>
 b06:	22 c0       	rjmp	.+68     	; 0xb4c <vfprintf+0x142>
 b08:	f8 01       	movw	r30, r16
 b0a:	80 81       	ld	r24, Z
 b0c:	89 83       	std	Y+1, r24	; 0x01
 b0e:	0e 5f       	subi	r16, 0xFE	; 254
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	44 24       	eor	r4, r4
 b14:	43 94       	inc	r4
 b16:	51 2c       	mov	r5, r1
 b18:	54 01       	movw	r10, r8
 b1a:	15 c0       	rjmp	.+42     	; 0xb46 <vfprintf+0x13c>
 b1c:	38 01       	movw	r6, r16
 b1e:	f2 e0       	ldi	r31, 0x02	; 2
 b20:	6f 0e       	add	r6, r31
 b22:	71 1c       	adc	r7, r1
 b24:	f8 01       	movw	r30, r16
 b26:	a0 80       	ld	r10, Z
 b28:	b1 80       	ldd	r11, Z+1	; 0x01
 b2a:	26 ff       	sbrs	r18, 6
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <vfprintf+0x12a>
 b2e:	65 2d       	mov	r22, r5
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x12e>
 b34:	6f ef       	ldi	r22, 0xFF	; 255
 b36:	7f ef       	ldi	r23, 0xFF	; 255
 b38:	c5 01       	movw	r24, r10
 b3a:	2c 87       	std	Y+12, r18	; 0x0c
 b3c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <strnlen>
 b40:	2c 01       	movw	r4, r24
 b42:	83 01       	movw	r16, r6
 b44:	2c 85       	ldd	r18, Y+12	; 0x0c
 b46:	2f 77       	andi	r18, 0x7F	; 127
 b48:	22 2e       	mov	r2, r18
 b4a:	17 c0       	rjmp	.+46     	; 0xb7a <vfprintf+0x170>
 b4c:	38 01       	movw	r6, r16
 b4e:	f2 e0       	ldi	r31, 0x02	; 2
 b50:	6f 0e       	add	r6, r31
 b52:	71 1c       	adc	r7, r1
 b54:	f8 01       	movw	r30, r16
 b56:	a0 80       	ld	r10, Z
 b58:	b1 80       	ldd	r11, Z+1	; 0x01
 b5a:	26 ff       	sbrs	r18, 6
 b5c:	03 c0       	rjmp	.+6      	; 0xb64 <vfprintf+0x15a>
 b5e:	65 2d       	mov	r22, r5
 b60:	70 e0       	ldi	r23, 0x00	; 0
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <vfprintf+0x15e>
 b64:	6f ef       	ldi	r22, 0xFF	; 255
 b66:	7f ef       	ldi	r23, 0xFF	; 255
 b68:	c5 01       	movw	r24, r10
 b6a:	2c 87       	std	Y+12, r18	; 0x0c
 b6c:	0e 94 d7 06 	call	0xdae	; 0xdae <strnlen_P>
 b70:	2c 01       	movw	r4, r24
 b72:	2c 85       	ldd	r18, Y+12	; 0x0c
 b74:	20 68       	ori	r18, 0x80	; 128
 b76:	22 2e       	mov	r2, r18
 b78:	83 01       	movw	r16, r6
 b7a:	23 fc       	sbrc	r2, 3
 b7c:	1b c0       	rjmp	.+54     	; 0xbb4 <vfprintf+0x1aa>
 b7e:	83 2d       	mov	r24, r3
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	48 16       	cp	r4, r24
 b84:	59 06       	cpc	r5, r25
 b86:	b0 f4       	brcc	.+44     	; 0xbb4 <vfprintf+0x1aa>
 b88:	b7 01       	movw	r22, r14
 b8a:	80 e2       	ldi	r24, 0x20	; 32
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 b92:	3a 94       	dec	r3
 b94:	f4 cf       	rjmp	.-24     	; 0xb7e <vfprintf+0x174>
 b96:	f5 01       	movw	r30, r10
 b98:	27 fc       	sbrc	r2, 7
 b9a:	85 91       	lpm	r24, Z+
 b9c:	27 fe       	sbrs	r2, 7
 b9e:	81 91       	ld	r24, Z+
 ba0:	5f 01       	movw	r10, r30
 ba2:	b7 01       	movw	r22, r14
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 baa:	31 10       	cpse	r3, r1
 bac:	3a 94       	dec	r3
 bae:	f1 e0       	ldi	r31, 0x01	; 1
 bb0:	4f 1a       	sub	r4, r31
 bb2:	51 08       	sbc	r5, r1
 bb4:	41 14       	cp	r4, r1
 bb6:	51 04       	cpc	r5, r1
 bb8:	71 f7       	brne	.-36     	; 0xb96 <vfprintf+0x18c>
 bba:	e5 c0       	rjmp	.+458    	; 0xd86 <vfprintf+0x37c>
 bbc:	84 36       	cpi	r24, 0x64	; 100
 bbe:	11 f0       	breq	.+4      	; 0xbc4 <vfprintf+0x1ba>
 bc0:	89 36       	cpi	r24, 0x69	; 105
 bc2:	39 f5       	brne	.+78     	; 0xc12 <vfprintf+0x208>
 bc4:	f8 01       	movw	r30, r16
 bc6:	27 ff       	sbrs	r18, 7
 bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <vfprintf+0x1ce>
 bca:	60 81       	ld	r22, Z
 bcc:	71 81       	ldd	r23, Z+1	; 0x01
 bce:	82 81       	ldd	r24, Z+2	; 0x02
 bd0:	93 81       	ldd	r25, Z+3	; 0x03
 bd2:	0c 5f       	subi	r16, 0xFC	; 252
 bd4:	1f 4f       	sbci	r17, 0xFF	; 255
 bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <vfprintf+0x1de>
 bd8:	60 81       	ld	r22, Z
 bda:	71 81       	ldd	r23, Z+1	; 0x01
 bdc:	88 27       	eor	r24, r24
 bde:	77 fd       	sbrc	r23, 7
 be0:	80 95       	com	r24
 be2:	98 2f       	mov	r25, r24
 be4:	0e 5f       	subi	r16, 0xFE	; 254
 be6:	1f 4f       	sbci	r17, 0xFF	; 255
 be8:	2f 76       	andi	r18, 0x6F	; 111
 bea:	b2 2e       	mov	r11, r18
 bec:	97 ff       	sbrs	r25, 7
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <vfprintf+0x1f8>
 bf0:	90 95       	com	r25
 bf2:	80 95       	com	r24
 bf4:	70 95       	com	r23
 bf6:	61 95       	neg	r22
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	20 68       	ori	r18, 0x80	; 128
 c00:	b2 2e       	mov	r11, r18
 c02:	2a e0       	ldi	r18, 0x0A	; 10
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	a4 01       	movw	r20, r8
 c08:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__ultoa_invert>
 c0c:	a8 2e       	mov	r10, r24
 c0e:	a8 18       	sub	r10, r8
 c10:	44 c0       	rjmp	.+136    	; 0xc9a <vfprintf+0x290>
 c12:	85 37       	cpi	r24, 0x75	; 117
 c14:	29 f4       	brne	.+10     	; 0xc20 <vfprintf+0x216>
 c16:	2f 7e       	andi	r18, 0xEF	; 239
 c18:	b2 2e       	mov	r11, r18
 c1a:	2a e0       	ldi	r18, 0x0A	; 10
 c1c:	30 e0       	ldi	r19, 0x00	; 0
 c1e:	25 c0       	rjmp	.+74     	; 0xc6a <vfprintf+0x260>
 c20:	f2 2f       	mov	r31, r18
 c22:	f9 7f       	andi	r31, 0xF9	; 249
 c24:	bf 2e       	mov	r11, r31
 c26:	8f 36       	cpi	r24, 0x6F	; 111
 c28:	c1 f0       	breq	.+48     	; 0xc5a <vfprintf+0x250>
 c2a:	18 f4       	brcc	.+6      	; 0xc32 <vfprintf+0x228>
 c2c:	88 35       	cpi	r24, 0x58	; 88
 c2e:	79 f0       	breq	.+30     	; 0xc4e <vfprintf+0x244>
 c30:	b4 c0       	rjmp	.+360    	; 0xd9a <vfprintf+0x390>
 c32:	80 37       	cpi	r24, 0x70	; 112
 c34:	19 f0       	breq	.+6      	; 0xc3c <vfprintf+0x232>
 c36:	88 37       	cpi	r24, 0x78	; 120
 c38:	21 f0       	breq	.+8      	; 0xc42 <vfprintf+0x238>
 c3a:	af c0       	rjmp	.+350    	; 0xd9a <vfprintf+0x390>
 c3c:	2f 2f       	mov	r18, r31
 c3e:	20 61       	ori	r18, 0x10	; 16
 c40:	b2 2e       	mov	r11, r18
 c42:	b4 fe       	sbrs	r11, 4
 c44:	0d c0       	rjmp	.+26     	; 0xc60 <vfprintf+0x256>
 c46:	8b 2d       	mov	r24, r11
 c48:	84 60       	ori	r24, 0x04	; 4
 c4a:	b8 2e       	mov	r11, r24
 c4c:	09 c0       	rjmp	.+18     	; 0xc60 <vfprintf+0x256>
 c4e:	24 ff       	sbrs	r18, 4
 c50:	0a c0       	rjmp	.+20     	; 0xc66 <vfprintf+0x25c>
 c52:	9f 2f       	mov	r25, r31
 c54:	96 60       	ori	r25, 0x06	; 6
 c56:	b9 2e       	mov	r11, r25
 c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0x25c>
 c5a:	28 e0       	ldi	r18, 0x08	; 8
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	05 c0       	rjmp	.+10     	; 0xc6a <vfprintf+0x260>
 c60:	20 e1       	ldi	r18, 0x10	; 16
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0x260>
 c66:	20 e1       	ldi	r18, 0x10	; 16
 c68:	32 e0       	ldi	r19, 0x02	; 2
 c6a:	f8 01       	movw	r30, r16
 c6c:	b7 fe       	sbrs	r11, 7
 c6e:	07 c0       	rjmp	.+14     	; 0xc7e <vfprintf+0x274>
 c70:	60 81       	ld	r22, Z
 c72:	71 81       	ldd	r23, Z+1	; 0x01
 c74:	82 81       	ldd	r24, Z+2	; 0x02
 c76:	93 81       	ldd	r25, Z+3	; 0x03
 c78:	0c 5f       	subi	r16, 0xFC	; 252
 c7a:	1f 4f       	sbci	r17, 0xFF	; 255
 c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0x280>
 c7e:	60 81       	ld	r22, Z
 c80:	71 81       	ldd	r23, Z+1	; 0x01
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 5f       	subi	r16, 0xFE	; 254
 c88:	1f 4f       	sbci	r17, 0xFF	; 255
 c8a:	a4 01       	movw	r20, r8
 c8c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__ultoa_invert>
 c90:	a8 2e       	mov	r10, r24
 c92:	a8 18       	sub	r10, r8
 c94:	fb 2d       	mov	r31, r11
 c96:	ff 77       	andi	r31, 0x7F	; 127
 c98:	bf 2e       	mov	r11, r31
 c9a:	b6 fe       	sbrs	r11, 6
 c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <vfprintf+0x2aa>
 c9e:	2b 2d       	mov	r18, r11
 ca0:	2e 7f       	andi	r18, 0xFE	; 254
 ca2:	a5 14       	cp	r10, r5
 ca4:	50 f4       	brcc	.+20     	; 0xcba <vfprintf+0x2b0>
 ca6:	b4 fe       	sbrs	r11, 4
 ca8:	0a c0       	rjmp	.+20     	; 0xcbe <vfprintf+0x2b4>
 caa:	b2 fc       	sbrc	r11, 2
 cac:	08 c0       	rjmp	.+16     	; 0xcbe <vfprintf+0x2b4>
 cae:	2b 2d       	mov	r18, r11
 cb0:	2e 7e       	andi	r18, 0xEE	; 238
 cb2:	05 c0       	rjmp	.+10     	; 0xcbe <vfprintf+0x2b4>
 cb4:	7a 2c       	mov	r7, r10
 cb6:	2b 2d       	mov	r18, r11
 cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <vfprintf+0x2b6>
 cba:	7a 2c       	mov	r7, r10
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <vfprintf+0x2b6>
 cbe:	75 2c       	mov	r7, r5
 cc0:	24 ff       	sbrs	r18, 4
 cc2:	0d c0       	rjmp	.+26     	; 0xcde <vfprintf+0x2d4>
 cc4:	fe 01       	movw	r30, r28
 cc6:	ea 0d       	add	r30, r10
 cc8:	f1 1d       	adc	r31, r1
 cca:	80 81       	ld	r24, Z
 ccc:	80 33       	cpi	r24, 0x30	; 48
 cce:	11 f4       	brne	.+4      	; 0xcd4 <vfprintf+0x2ca>
 cd0:	29 7e       	andi	r18, 0xE9	; 233
 cd2:	09 c0       	rjmp	.+18     	; 0xce6 <vfprintf+0x2dc>
 cd4:	22 ff       	sbrs	r18, 2
 cd6:	06 c0       	rjmp	.+12     	; 0xce4 <vfprintf+0x2da>
 cd8:	73 94       	inc	r7
 cda:	73 94       	inc	r7
 cdc:	04 c0       	rjmp	.+8      	; 0xce6 <vfprintf+0x2dc>
 cde:	82 2f       	mov	r24, r18
 ce0:	86 78       	andi	r24, 0x86	; 134
 ce2:	09 f0       	breq	.+2      	; 0xce6 <vfprintf+0x2dc>
 ce4:	73 94       	inc	r7
 ce6:	23 fd       	sbrc	r18, 3
 ce8:	13 c0       	rjmp	.+38     	; 0xd10 <vfprintf+0x306>
 cea:	20 ff       	sbrs	r18, 0
 cec:	06 c0       	rjmp	.+12     	; 0xcfa <vfprintf+0x2f0>
 cee:	5a 2c       	mov	r5, r10
 cf0:	73 14       	cp	r7, r3
 cf2:	18 f4       	brcc	.+6      	; 0xcfa <vfprintf+0x2f0>
 cf4:	53 0c       	add	r5, r3
 cf6:	57 18       	sub	r5, r7
 cf8:	73 2c       	mov	r7, r3
 cfa:	73 14       	cp	r7, r3
 cfc:	68 f4       	brcc	.+26     	; 0xd18 <vfprintf+0x30e>
 cfe:	b7 01       	movw	r22, r14
 d00:	80 e2       	ldi	r24, 0x20	; 32
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	2c 87       	std	Y+12, r18	; 0x0c
 d06:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d0a:	73 94       	inc	r7
 d0c:	2c 85       	ldd	r18, Y+12	; 0x0c
 d0e:	f5 cf       	rjmp	.-22     	; 0xcfa <vfprintf+0x2f0>
 d10:	73 14       	cp	r7, r3
 d12:	10 f4       	brcc	.+4      	; 0xd18 <vfprintf+0x30e>
 d14:	37 18       	sub	r3, r7
 d16:	01 c0       	rjmp	.+2      	; 0xd1a <vfprintf+0x310>
 d18:	31 2c       	mov	r3, r1
 d1a:	24 ff       	sbrs	r18, 4
 d1c:	12 c0       	rjmp	.+36     	; 0xd42 <vfprintf+0x338>
 d1e:	b7 01       	movw	r22, r14
 d20:	80 e3       	ldi	r24, 0x30	; 48
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	2c 87       	std	Y+12, r18	; 0x0c
 d26:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d2a:	2c 85       	ldd	r18, Y+12	; 0x0c
 d2c:	22 ff       	sbrs	r18, 2
 d2e:	17 c0       	rjmp	.+46     	; 0xd5e <vfprintf+0x354>
 d30:	21 ff       	sbrs	r18, 1
 d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x330>
 d34:	88 e5       	ldi	r24, 0x58	; 88
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x334>
 d3a:	88 e7       	ldi	r24, 0x78	; 120
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	b7 01       	movw	r22, r14
 d40:	0c c0       	rjmp	.+24     	; 0xd5a <vfprintf+0x350>
 d42:	82 2f       	mov	r24, r18
 d44:	86 78       	andi	r24, 0x86	; 134
 d46:	59 f0       	breq	.+22     	; 0xd5e <vfprintf+0x354>
 d48:	21 fd       	sbrc	r18, 1
 d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x346>
 d4c:	80 e2       	ldi	r24, 0x20	; 32
 d4e:	01 c0       	rjmp	.+2      	; 0xd52 <vfprintf+0x348>
 d50:	8b e2       	ldi	r24, 0x2B	; 43
 d52:	27 fd       	sbrc	r18, 7
 d54:	8d e2       	ldi	r24, 0x2D	; 45
 d56:	b7 01       	movw	r22, r14
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d5e:	a5 14       	cp	r10, r5
 d60:	38 f4       	brcc	.+14     	; 0xd70 <vfprintf+0x366>
 d62:	b7 01       	movw	r22, r14
 d64:	80 e3       	ldi	r24, 0x30	; 48
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d6c:	5a 94       	dec	r5
 d6e:	f7 cf       	rjmp	.-18     	; 0xd5e <vfprintf+0x354>
 d70:	aa 94       	dec	r10
 d72:	f4 01       	movw	r30, r8
 d74:	ea 0d       	add	r30, r10
 d76:	f1 1d       	adc	r31, r1
 d78:	80 81       	ld	r24, Z
 d7a:	b7 01       	movw	r22, r14
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d82:	a1 10       	cpse	r10, r1
 d84:	f5 cf       	rjmp	.-22     	; 0xd70 <vfprintf+0x366>
 d86:	33 20       	and	r3, r3
 d88:	09 f4       	brne	.+2      	; 0xd8c <vfprintf+0x382>
 d8a:	51 ce       	rjmp	.-862    	; 0xa2e <vfprintf+0x24>
 d8c:	b7 01       	movw	r22, r14
 d8e:	80 e2       	ldi	r24, 0x20	; 32
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d96:	3a 94       	dec	r3
 d98:	f6 cf       	rjmp	.-20     	; 0xd86 <vfprintf+0x37c>
 d9a:	f7 01       	movw	r30, r14
 d9c:	86 81       	ldd	r24, Z+6	; 0x06
 d9e:	97 81       	ldd	r25, Z+7	; 0x07
 da0:	02 c0       	rjmp	.+4      	; 0xda6 <vfprintf+0x39c>
 da2:	8f ef       	ldi	r24, 0xFF	; 255
 da4:	9f ef       	ldi	r25, 0xFF	; 255
 da6:	2c 96       	adiw	r28, 0x0c	; 12
 da8:	e2 e1       	ldi	r30, 0x12	; 18
 daa:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__epilogue_restores__>

00000dae <strnlen_P>:
 dae:	fc 01       	movw	r30, r24
 db0:	05 90       	lpm	r0, Z+
 db2:	61 50       	subi	r22, 0x01	; 1
 db4:	70 40       	sbci	r23, 0x00	; 0
 db6:	01 10       	cpse	r0, r1
 db8:	d8 f7       	brcc	.-10     	; 0xdb0 <strnlen_P+0x2>
 dba:	80 95       	com	r24
 dbc:	90 95       	com	r25
 dbe:	8e 0f       	add	r24, r30
 dc0:	9f 1f       	adc	r25, r31
 dc2:	08 95       	ret

00000dc4 <strnlen>:
 dc4:	fc 01       	movw	r30, r24
 dc6:	61 50       	subi	r22, 0x01	; 1
 dc8:	70 40       	sbci	r23, 0x00	; 0
 dca:	01 90       	ld	r0, Z+
 dcc:	01 10       	cpse	r0, r1
 dce:	d8 f7       	brcc	.-10     	; 0xdc6 <strnlen+0x2>
 dd0:	80 95       	com	r24
 dd2:	90 95       	com	r25
 dd4:	8e 0f       	add	r24, r30
 dd6:	9f 1f       	adc	r25, r31
 dd8:	08 95       	ret

00000dda <fputc>:
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	18 2f       	mov	r17, r24
 de4:	09 2f       	mov	r16, r25
 de6:	eb 01       	movw	r28, r22
 de8:	8b 81       	ldd	r24, Y+3	; 0x03
 dea:	81 fd       	sbrc	r24, 1
 dec:	03 c0       	rjmp	.+6      	; 0xdf4 <fputc+0x1a>
 dee:	8f ef       	ldi	r24, 0xFF	; 255
 df0:	9f ef       	ldi	r25, 0xFF	; 255
 df2:	20 c0       	rjmp	.+64     	; 0xe34 <fputc+0x5a>
 df4:	82 ff       	sbrs	r24, 2
 df6:	10 c0       	rjmp	.+32     	; 0xe18 <fputc+0x3e>
 df8:	4e 81       	ldd	r20, Y+6	; 0x06
 dfa:	5f 81       	ldd	r21, Y+7	; 0x07
 dfc:	2c 81       	ldd	r18, Y+4	; 0x04
 dfe:	3d 81       	ldd	r19, Y+5	; 0x05
 e00:	42 17       	cp	r20, r18
 e02:	53 07       	cpc	r21, r19
 e04:	7c f4       	brge	.+30     	; 0xe24 <fputc+0x4a>
 e06:	e8 81       	ld	r30, Y
 e08:	f9 81       	ldd	r31, Y+1	; 0x01
 e0a:	9f 01       	movw	r18, r30
 e0c:	2f 5f       	subi	r18, 0xFF	; 255
 e0e:	3f 4f       	sbci	r19, 0xFF	; 255
 e10:	39 83       	std	Y+1, r19	; 0x01
 e12:	28 83       	st	Y, r18
 e14:	10 83       	st	Z, r17
 e16:	06 c0       	rjmp	.+12     	; 0xe24 <fputc+0x4a>
 e18:	e8 85       	ldd	r30, Y+8	; 0x08
 e1a:	f9 85       	ldd	r31, Y+9	; 0x09
 e1c:	81 2f       	mov	r24, r17
 e1e:	09 95       	icall
 e20:	89 2b       	or	r24, r25
 e22:	29 f7       	brne	.-54     	; 0xdee <fputc+0x14>
 e24:	2e 81       	ldd	r18, Y+6	; 0x06
 e26:	3f 81       	ldd	r19, Y+7	; 0x07
 e28:	2f 5f       	subi	r18, 0xFF	; 255
 e2a:	3f 4f       	sbci	r19, 0xFF	; 255
 e2c:	3f 83       	std	Y+7, r19	; 0x07
 e2e:	2e 83       	std	Y+6, r18	; 0x06
 e30:	81 2f       	mov	r24, r17
 e32:	90 2f       	mov	r25, r16
 e34:	df 91       	pop	r29
 e36:	cf 91       	pop	r28
 e38:	1f 91       	pop	r17
 e3a:	0f 91       	pop	r16
 e3c:	08 95       	ret

00000e3e <__ultoa_invert>:
 e3e:	fa 01       	movw	r30, r20
 e40:	aa 27       	eor	r26, r26
 e42:	28 30       	cpi	r18, 0x08	; 8
 e44:	51 f1       	breq	.+84     	; 0xe9a <__ultoa_invert+0x5c>
 e46:	20 31       	cpi	r18, 0x10	; 16
 e48:	81 f1       	breq	.+96     	; 0xeaa <__ultoa_invert+0x6c>
 e4a:	e8 94       	clt
 e4c:	6f 93       	push	r22
 e4e:	6e 7f       	andi	r22, 0xFE	; 254
 e50:	6e 5f       	subi	r22, 0xFE	; 254
 e52:	7f 4f       	sbci	r23, 0xFF	; 255
 e54:	8f 4f       	sbci	r24, 0xFF	; 255
 e56:	9f 4f       	sbci	r25, 0xFF	; 255
 e58:	af 4f       	sbci	r26, 0xFF	; 255
 e5a:	b1 e0       	ldi	r27, 0x01	; 1
 e5c:	3e d0       	rcall	.+124    	; 0xeda <__ultoa_invert+0x9c>
 e5e:	b4 e0       	ldi	r27, 0x04	; 4
 e60:	3c d0       	rcall	.+120    	; 0xeda <__ultoa_invert+0x9c>
 e62:	67 0f       	add	r22, r23
 e64:	78 1f       	adc	r23, r24
 e66:	89 1f       	adc	r24, r25
 e68:	9a 1f       	adc	r25, r26
 e6a:	a1 1d       	adc	r26, r1
 e6c:	68 0f       	add	r22, r24
 e6e:	79 1f       	adc	r23, r25
 e70:	8a 1f       	adc	r24, r26
 e72:	91 1d       	adc	r25, r1
 e74:	a1 1d       	adc	r26, r1
 e76:	6a 0f       	add	r22, r26
 e78:	71 1d       	adc	r23, r1
 e7a:	81 1d       	adc	r24, r1
 e7c:	91 1d       	adc	r25, r1
 e7e:	a1 1d       	adc	r26, r1
 e80:	20 d0       	rcall	.+64     	; 0xec2 <__ultoa_invert+0x84>
 e82:	09 f4       	brne	.+2      	; 0xe86 <__ultoa_invert+0x48>
 e84:	68 94       	set
 e86:	3f 91       	pop	r19
 e88:	2a e0       	ldi	r18, 0x0A	; 10
 e8a:	26 9f       	mul	r18, r22
 e8c:	11 24       	eor	r1, r1
 e8e:	30 19       	sub	r19, r0
 e90:	30 5d       	subi	r19, 0xD0	; 208
 e92:	31 93       	st	Z+, r19
 e94:	de f6       	brtc	.-74     	; 0xe4c <__ultoa_invert+0xe>
 e96:	cf 01       	movw	r24, r30
 e98:	08 95       	ret
 e9a:	46 2f       	mov	r20, r22
 e9c:	47 70       	andi	r20, 0x07	; 7
 e9e:	40 5d       	subi	r20, 0xD0	; 208
 ea0:	41 93       	st	Z+, r20
 ea2:	b3 e0       	ldi	r27, 0x03	; 3
 ea4:	0f d0       	rcall	.+30     	; 0xec4 <__ultoa_invert+0x86>
 ea6:	c9 f7       	brne	.-14     	; 0xe9a <__ultoa_invert+0x5c>
 ea8:	f6 cf       	rjmp	.-20     	; 0xe96 <__ultoa_invert+0x58>
 eaa:	46 2f       	mov	r20, r22
 eac:	4f 70       	andi	r20, 0x0F	; 15
 eae:	40 5d       	subi	r20, 0xD0	; 208
 eb0:	4a 33       	cpi	r20, 0x3A	; 58
 eb2:	18 f0       	brcs	.+6      	; 0xeba <__ultoa_invert+0x7c>
 eb4:	49 5d       	subi	r20, 0xD9	; 217
 eb6:	31 fd       	sbrc	r19, 1
 eb8:	40 52       	subi	r20, 0x20	; 32
 eba:	41 93       	st	Z+, r20
 ebc:	02 d0       	rcall	.+4      	; 0xec2 <__ultoa_invert+0x84>
 ebe:	a9 f7       	brne	.-22     	; 0xeaa <__ultoa_invert+0x6c>
 ec0:	ea cf       	rjmp	.-44     	; 0xe96 <__ultoa_invert+0x58>
 ec2:	b4 e0       	ldi	r27, 0x04	; 4
 ec4:	a6 95       	lsr	r26
 ec6:	97 95       	ror	r25
 ec8:	87 95       	ror	r24
 eca:	77 95       	ror	r23
 ecc:	67 95       	ror	r22
 ece:	ba 95       	dec	r27
 ed0:	c9 f7       	brne	.-14     	; 0xec4 <__ultoa_invert+0x86>
 ed2:	00 97       	sbiw	r24, 0x00	; 0
 ed4:	61 05       	cpc	r22, r1
 ed6:	71 05       	cpc	r23, r1
 ed8:	08 95       	ret
 eda:	9b 01       	movw	r18, r22
 edc:	ac 01       	movw	r20, r24
 ede:	0a 2e       	mov	r0, r26
 ee0:	06 94       	lsr	r0
 ee2:	57 95       	ror	r21
 ee4:	47 95       	ror	r20
 ee6:	37 95       	ror	r19
 ee8:	27 95       	ror	r18
 eea:	ba 95       	dec	r27
 eec:	c9 f7       	brne	.-14     	; 0xee0 <__ultoa_invert+0xa2>
 eee:	62 0f       	add	r22, r18
 ef0:	73 1f       	adc	r23, r19
 ef2:	84 1f       	adc	r24, r20
 ef4:	95 1f       	adc	r25, r21
 ef6:	a0 1d       	adc	r26, r0
 ef8:	08 95       	ret

00000efa <__prologue_saves__>:
 efa:	2f 92       	push	r2
 efc:	3f 92       	push	r3
 efe:	4f 92       	push	r4
 f00:	5f 92       	push	r5
 f02:	6f 92       	push	r6
 f04:	7f 92       	push	r7
 f06:	8f 92       	push	r8
 f08:	9f 92       	push	r9
 f0a:	af 92       	push	r10
 f0c:	bf 92       	push	r11
 f0e:	cf 92       	push	r12
 f10:	df 92       	push	r13
 f12:	ef 92       	push	r14
 f14:	ff 92       	push	r15
 f16:	0f 93       	push	r16
 f18:	1f 93       	push	r17
 f1a:	cf 93       	push	r28
 f1c:	df 93       	push	r29
 f1e:	cd b7       	in	r28, 0x3d	; 61
 f20:	de b7       	in	r29, 0x3e	; 62
 f22:	ca 1b       	sub	r28, r26
 f24:	db 0b       	sbc	r29, r27
 f26:	0f b6       	in	r0, 0x3f	; 63
 f28:	f8 94       	cli
 f2a:	de bf       	out	0x3e, r29	; 62
 f2c:	0f be       	out	0x3f, r0	; 63
 f2e:	cd bf       	out	0x3d, r28	; 61
 f30:	09 94       	ijmp

00000f32 <__epilogue_restores__>:
 f32:	2a 88       	ldd	r2, Y+18	; 0x12
 f34:	39 88       	ldd	r3, Y+17	; 0x11
 f36:	48 88       	ldd	r4, Y+16	; 0x10
 f38:	5f 84       	ldd	r5, Y+15	; 0x0f
 f3a:	6e 84       	ldd	r6, Y+14	; 0x0e
 f3c:	7d 84       	ldd	r7, Y+13	; 0x0d
 f3e:	8c 84       	ldd	r8, Y+12	; 0x0c
 f40:	9b 84       	ldd	r9, Y+11	; 0x0b
 f42:	aa 84       	ldd	r10, Y+10	; 0x0a
 f44:	b9 84       	ldd	r11, Y+9	; 0x09
 f46:	c8 84       	ldd	r12, Y+8	; 0x08
 f48:	df 80       	ldd	r13, Y+7	; 0x07
 f4a:	ee 80       	ldd	r14, Y+6	; 0x06
 f4c:	fd 80       	ldd	r15, Y+5	; 0x05
 f4e:	0c 81       	ldd	r16, Y+4	; 0x04
 f50:	1b 81       	ldd	r17, Y+3	; 0x03
 f52:	aa 81       	ldd	r26, Y+2	; 0x02
 f54:	b9 81       	ldd	r27, Y+1	; 0x01
 f56:	ce 0f       	add	r28, r30
 f58:	d1 1d       	adc	r29, r1
 f5a:	0f b6       	in	r0, 0x3f	; 63
 f5c:	f8 94       	cli
 f5e:	de bf       	out	0x3e, r29	; 62
 f60:	0f be       	out	0x3f, r0	; 63
 f62:	cd bf       	out	0x3d, r28	; 61
 f64:	ed 01       	movw	r28, r26
 f66:	08 95       	ret

00000f68 <_exit>:
 f68:	f8 94       	cli

00000f6a <__stop_program>:
 f6a:	ff cf       	rjmp	.-2      	; 0xf6a <__stop_program>
