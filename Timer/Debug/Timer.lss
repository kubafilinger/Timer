
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000faa  0000103e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080006a  0080006a  00001048  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b3  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ff  00000000  00000000  00001b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000477  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b05  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000340d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	e1 00       	.word	0x00e1	; ????
  56:	f5 00       	.word	0x00f5	; ????
  58:	e3 00       	.word	0x00e3	; ????
  5a:	e5 00       	.word	0x00e5	; ????
  5c:	e7 00       	.word	0x00e7	; ????
  5e:	e9 00       	.word	0x00e9	; ????
  60:	eb 00       	.word	0x00eb	; ????
  62:	ed 00       	.word	0x00ed	; ????
  64:	ef 00       	.word	0x00ef	; ????
  66:	f1 00       	.word	0x00f1	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 36       	cpi	r26, 0x6A	; 106
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	aa e6       	ldi	r26, 0x6A	; 106
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 38       	cpi	r26, 0x86	; 134
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 03 	call	0x720	; 0x720 <main>
  9e:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	static volatile int src_nr = 0, counter = 0;
	
	if(counter++ == 10)
  c8:	80 91 6c 00 	lds	r24, 0x006C
  cc:	90 91 6d 00 	lds	r25, 0x006D
  d0:	9c 01       	movw	r18, r24
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	30 93 6d 00 	sts	0x006D, r19
  da:	20 93 6c 00 	sts	0x006C, r18
  de:	0a 97       	sbiw	r24, 0x0a	; 10
  e0:	09 f0       	breq	.+2      	; 0xe4 <__vector_9+0x3e>
  e2:	3f c0       	rjmp	.+126    	; 0x162 <__vector_9+0xbc>
	{
		src_nr = (src_nr + 1) % total_displays;
  e4:	80 91 6a 00 	lds	r24, 0x006A
  e8:	90 91 6b 00 	lds	r25, 0x006B
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	60 91 83 00 	lds	r22, 0x0083
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 9c 04 	call	0x938	; 0x938 <__divmodhi4>
  f8:	90 93 6b 00 	sts	0x006B, r25
  fc:	80 93 6a 00 	sts	0x006A, r24
		
		*display_port = (led_type & KATODA) ? (1 << src_nr) : ~(1 << src_nr);
 100:	e0 91 75 00 	lds	r30, 0x0075
 104:	f0 91 76 00 	lds	r31, 0x0076
 108:	80 91 73 00 	lds	r24, 0x0073
 10c:	80 ff       	sbrs	r24, 0
 10e:	0a c0       	rjmp	.+20     	; 0x124 <__vector_9+0x7e>
 110:	20 91 6a 00 	lds	r18, 0x006A
 114:	30 91 6b 00 	lds	r19, 0x006B
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	01 c0       	rjmp	.+2      	; 0x11e <__vector_9+0x78>
 11c:	88 0f       	add	r24, r24
 11e:	2a 95       	dec	r18
 120:	ea f7       	brpl	.-6      	; 0x11c <__vector_9+0x76>
 122:	0e c0       	rjmp	.+28     	; 0x140 <__vector_9+0x9a>
 124:	80 91 6a 00 	lds	r24, 0x006A
 128:	90 91 6b 00 	lds	r25, 0x006B
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	a9 01       	movw	r20, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <__vector_9+0x92>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <__vector_9+0x8e>
 13c:	ca 01       	movw	r24, r20
 13e:	80 95       	com	r24
 140:	80 83       	st	Z, r24
		*digit_port = number[src_nr];
 142:	e0 91 7f 00 	lds	r30, 0x007F
 146:	f0 91 80 00 	lds	r31, 0x0080
 14a:	a0 91 6a 00 	lds	r26, 0x006A
 14e:	b0 91 6b 00 	lds	r27, 0x006B
 152:	a9 58       	subi	r26, 0x89	; 137
 154:	bf 4f       	sbci	r27, 0xFF	; 255
 156:	8c 91       	ld	r24, X
 158:	80 83       	st	Z, r24
	
		counter = 0;
 15a:	10 92 6d 00 	sts	0x006D, r1
 15e:	10 92 6c 00 	sts	0x006C, r1
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <clearDisplay>:

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 184:	20 91 83 00 	lds	r18, 0x0083
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	12 16       	cp	r1, r18
 18c:	13 06       	cpc	r1, r19
 18e:	74 f4       	brge	.+28     	; 0x1ac <clearDisplay+0x28>
		number[i] = (led_type & KATODA) ? ~0 : 0;
 190:	40 91 73 00 	lds	r20, 0x0073
 194:	41 70       	andi	r20, 0x01	; 1
 196:	41 95       	neg	r20

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
		number[i] = (led_type & KATODA) ? ~0 : 0;
 19c:	fc 01       	movw	r30, r24
 19e:	e9 58       	subi	r30, 0x89	; 137
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	40 83       	st	Z, r20

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	c4 f3       	brlt	.-16     	; 0x19c <clearDisplay+0x18>
 1ac:	08 95       	ret

000001ae <convertChar>:

uint8_t convertChar(char s)
{
	uint8_t result = 0;
	
	switch(s)
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	f0 97       	sbiw	r30, 0x30	; 48
 1b4:	ea 30       	cpi	r30, 0x0A	; 10
 1b6:	f1 05       	cpc	r31, r1
 1b8:	b0 f4       	brcc	.+44     	; 0x1e6 <convertChar+0x38>
 1ba:	e6 5d       	subi	r30, 0xD6	; 214
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__tablejump2__>
	{
		case '0':
			result = 0b00111111;
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	08 95       	ret
		case '1':
			result = 0b00000110;
			break;
		
		case '2':
			result = 0b01011011;
 1c6:	8b e5       	ldi	r24, 0x5B	; 91
			break;
 1c8:	08 95       	ret
		
		case '3':
			result = 0b01001111;
 1ca:	8f e4       	ldi	r24, 0x4F	; 79
			break;
 1cc:	08 95       	ret
		
		case '4':
			result = 0b01100110;
 1ce:	86 e6       	ldi	r24, 0x66	; 102
			break;
 1d0:	08 95       	ret
		
		case '5':
			result = 0b01101101;
 1d2:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 1d4:	08 95       	ret
		
		case '6':
			result = 0b01111101;
 1d6:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 1d8:	08 95       	ret
		
		case '7':
			result = 0b00000111;
 1da:	87 e0       	ldi	r24, 0x07	; 7
			break;
 1dc:	08 95       	ret
		
		case '8':
			result = 0b01111111;
 1de:	8f e7       	ldi	r24, 0x7F	; 127
			break;
 1e0:	08 95       	ret
		
		case '9':
			result = 0b01101111;
 1e2:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 1e4:	08 95       	ret
			
		default:
			result = 0;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1e8:	08 95       	ret
		case '0':
			result = 0b00111111;
			break;
		
		case '1':
			result = 0b00000110;
 1ea:	86 e0       	ldi	r24, 0x06	; 6
			result = 0;
			break;
	}
	
	return result;
}
 1ec:	08 95       	ret

000001ee <LEDSetValue>:
	position = 0;
	set_timer0();
}

void LEDSetValue(char *val)
{
 1ee:	9f 92       	push	r9
 1f0:	af 92       	push	r10
 1f2:	bf 92       	push	r11
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	fc 01       	movw	r30, r24
	int i;
	
	for(i = 0; i < total_displays; i++)
 206:	00 91 83 00 	lds	r16, 0x0083
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	10 16       	cp	r1, r16
 20e:	11 06       	cpc	r1, r17
 210:	7c f5       	brge	.+94     	; 0x270 <LEDSetValue+0x82>
	{
		if(val[i] == '\0')
 212:	20 81       	ld	r18, Z
 214:	22 23       	and	r18, r18
 216:	61 f1       	breq	.+88     	; 0x270 <LEDSetValue+0x82>
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
 218:	a0 90 74 00 	lds	r10, 0x0074
 21c:	80 91 73 00 	lds	r24, 0x0073
 220:	81 70       	andi	r24, 0x01	; 1
 222:	98 2e       	mov	r9, r24
 224:	6f 01       	movw	r12, r30
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	c8 1a       	sub	r12, r24
 22a:	d8 0a       	sbc	r13, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	b1 2c       	mov	r11, r1
 232:	05 c0       	rjmp	.+10     	; 0x23e <LEDSetValue+0x50>
	{
		if(val[i] == '\0')
 234:	f6 01       	movw	r30, r12
 236:	21 91       	ld	r18, Z+
 238:	6f 01       	movw	r12, r30
 23a:	22 23       	and	r18, r18
 23c:	c9 f0       	breq	.+50     	; 0x270 <LEDSetValue+0x82>
 23e:	ce 01       	movw	r24, r28
 240:	8a 0d       	add	r24, r10
 242:	9b 1d       	adc	r25, r11
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
 244:	b8 01       	movw	r22, r16
 246:	0e 94 9c 04 	call	0x938	; 0x938 <__divmodhi4>
 24a:	7c 01       	movw	r14, r24
 24c:	99 20       	and	r9, r9
 24e:	29 f0       	breq	.+10     	; 0x25a <LEDSetValue+0x6c>
 250:	82 2f       	mov	r24, r18
 252:	0e 94 d7 00 	call	0x1ae	; 0x1ae <convertChar>
 256:	80 95       	com	r24
 258:	03 c0       	rjmp	.+6      	; 0x260 <LEDSetValue+0x72>
 25a:	82 2f       	mov	r24, r18
 25c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <convertChar>
 260:	f7 01       	movw	r30, r14
 262:	e9 58       	subi	r30, 0x89	; 137
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	80 83       	st	Z, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	c0 17       	cp	r28, r16
 26c:	d1 07       	cpc	r29, r17
 26e:	14 f3       	brlt	.-60     	; 0x234 <LEDSetValue+0x46>
		if(val[i] == '\0')
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	9f 90       	pop	r9
 286:	08 95       	ret

00000288 <LEDSetNumberWithZero>:
	sprintf(s, "%d\0", nr);
	LEDSetValue(s);
}

void LEDSetNumberWithZero(int nr)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	29 97       	sbiw	r28, 0x09	; 9
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
	char s[MAX_NUM_DISPLAY + 1]; // +1 end char
	
	if(nr < 10)
 29c:	8a 30       	cpi	r24, 0x0A	; 10
 29e:	91 05       	cpc	r25, r1
 2a0:	9c f4       	brge	.+38     	; 0x2c8 <LEDSetNumberWithZero+0x40>
		sprintf(s, "0%d\0", nr);
 2a2:	9f 93       	push	r25
 2a4:	8f 93       	push	r24
 2a6:	84 e6       	ldi	r24, 0x64	; 100
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9f 93       	push	r25
 2ac:	8f 93       	push	r24
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	9f 93       	push	r25
 2b4:	8f 93       	push	r24
 2b6:	0e 94 02 05 	call	0xa04	; 0xa04 <sprintf>
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	12 c0       	rjmp	.+36     	; 0x2ec <LEDSetNumberWithZero+0x64>
	else
		sprintf(s, "%d\0", nr);
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	80 e6       	ldi	r24, 0x60	; 96
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	9f 93       	push	r25
 2d2:	8f 93       	push	r24
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	9f 93       	push	r25
 2da:	8f 93       	push	r24
 2dc:	0e 94 02 05 	call	0xa04	; 0xa04 <sprintf>
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
	
	LEDSetValue(s);
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LEDSetValue>
}
 2f4:	29 96       	adiw	r28, 0x09	; 9
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <set_timer0>:
	return result;
}

void set_timer0()
{
	TCCR0 = 1 << CS01;
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
 30a:	89 b7       	in	r24, 0x39	; 57
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	89 bf       	out	0x39, r24	; 57
 310:	08 95       	ret

00000312 <LEDInit>:
		counter = 0;
	}
}

void LEDInit(uint8_t total_displays_f, uint8_t led_type_f, volatile uint8_t *digit_ddr_wsk, volatile uint8_t *digit_port_wsk, volatile uint8_t *display_ddr_wsk, volatile uint8_t *display_port_wsk)
{
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
	total_displays = total_displays_f;
 31a:	80 93 83 00 	sts	0x0083, r24
	led_type = led_type_f % 2;
 31e:	61 70       	andi	r22, 0x01	; 1
 320:	60 93 73 00 	sts	0x0073, r22
	digit_ddr = digit_ddr_wsk;
 324:	50 93 85 00 	sts	0x0085, r21
 328:	40 93 84 00 	sts	0x0084, r20
	digit_port = digit_port_wsk;
 32c:	30 93 80 00 	sts	0x0080, r19
 330:	20 93 7f 00 	sts	0x007F, r18
	display_ddr = display_ddr_wsk;
 334:	10 93 82 00 	sts	0x0082, r17
 338:	00 93 81 00 	sts	0x0081, r16
	display_port = display_port_wsk;
 33c:	f0 92 76 00 	sts	0x0076, r15
 340:	e0 92 75 00 	sts	0x0075, r14
	
	*digit_ddr = 0xFF;
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	fa 01       	movw	r30, r20
 348:	80 83       	st	Z, r24
	*digit_port = 0;
 34a:	e0 91 7f 00 	lds	r30, 0x007F
 34e:	f0 91 80 00 	lds	r31, 0x0080
 352:	10 82       	st	Z, r1
	*display_ddr = 0;
 354:	e0 91 81 00 	lds	r30, 0x0081
 358:	f0 91 82 00 	lds	r31, 0x0082
 35c:	10 82       	st	Z, r1
	*display_port = 0xFF;
 35e:	e0 91 75 00 	lds	r30, 0x0075
 362:	f0 91 76 00 	lds	r31, 0x0076
 366:	80 83       	st	Z, r24
	
	int i;
	for(i = 0; i < total_displays; i++)
 368:	80 91 83 00 	lds	r24, 0x0083
 36c:	88 23       	and	r24, r24
 36e:	c9 f0       	breq	.+50     	; 0x3a2 <LEDInit+0x90>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
	{
		*display_ddr |= (1 << i);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	e0 91 81 00 	lds	r30, 0x0081
 37c:	f0 91 82 00 	lds	r31, 0x0082
 380:	60 81       	ld	r22, Z
 382:	9a 01       	movw	r18, r20
 384:	08 2e       	mov	r0, r24
 386:	02 c0       	rjmp	.+4      	; 0x38c <LEDInit+0x7a>
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <LEDInit+0x76>
 390:	26 2b       	or	r18, r22
 392:	20 83       	st	Z, r18
	*digit_port = 0;
	*display_ddr = 0;
	*display_port = 0xFF;
	
	int i;
	for(i = 0; i < total_displays; i++)
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	20 91 83 00 	lds	r18, 0x0083
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	82 17       	cp	r24, r18
 39e:	93 07       	cpc	r25, r19
 3a0:	5c f3       	brlt	.-42     	; 0x378 <LEDInit+0x66>
	{
		*display_ddr |= (1 << i);
	}
	
	position = 0;
 3a2:	10 92 74 00 	sts	0x0074, r1
	set_timer0();
 3a6:	0e 94 83 01 	call	0x306	; 0x306 <set_timer0>
}
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	08 95       	ret

000003b4 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
	TCCR2 = (1 << CS22) | (1 << CS20);
 3c6:	85 e0       	ldi	r24, 0x05	; 5
 3c8:	85 bd       	out	0x25, r24	; 37
	
	if(CLOCKStatus & (1 << ACTIVE_STATUS))
 3ca:	80 91 6e 00 	lds	r24, 0x006E
 3ce:	81 ff       	sbrs	r24, 1
 3d0:	40 c0       	rjmp	.+128    	; 0x452 <__vector_4+0x9e>
	{
		if(CLOCKStatus & (1 << REVERSE_CLOCK))
 3d2:	80 91 6e 00 	lds	r24, 0x006E
 3d6:	82 ff       	sbrs	r24, 2
 3d8:	20 c0       	rjmp	.+64     	; 0x41a <__vector_4+0x66>
		{
			if(CLOCKTime > 0)
 3da:	80 91 6f 00 	lds	r24, 0x006F
 3de:	90 91 70 00 	lds	r25, 0x0070
 3e2:	a0 91 71 00 	lds	r26, 0x0071
 3e6:	b0 91 72 00 	lds	r27, 0x0072
 3ea:	89 2b       	or	r24, r25
 3ec:	8a 2b       	or	r24, r26
 3ee:	8b 2b       	or	r24, r27
 3f0:	39 f1       	breq	.+78     	; 0x440 <__vector_4+0x8c>
			CLOCKTime -= 1;
 3f2:	80 91 6f 00 	lds	r24, 0x006F
 3f6:	90 91 70 00 	lds	r25, 0x0070
 3fa:	a0 91 71 00 	lds	r26, 0x0071
 3fe:	b0 91 72 00 	lds	r27, 0x0072
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	a1 09       	sbc	r26, r1
 406:	b1 09       	sbc	r27, r1
 408:	80 93 6f 00 	sts	0x006F, r24
 40c:	90 93 70 00 	sts	0x0070, r25
 410:	a0 93 71 00 	sts	0x0071, r26
 414:	b0 93 72 00 	sts	0x0072, r27
 418:	13 c0       	rjmp	.+38     	; 0x440 <__vector_4+0x8c>
		}
		else
			CLOCKTime = (CLOCKTime + 1);
 41a:	80 91 6f 00 	lds	r24, 0x006F
 41e:	90 91 70 00 	lds	r25, 0x0070
 422:	a0 91 71 00 	lds	r26, 0x0071
 426:	b0 91 72 00 	lds	r27, 0x0072
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	a1 1d       	adc	r26, r1
 42e:	b1 1d       	adc	r27, r1
 430:	80 93 6f 00 	sts	0x006F, r24
 434:	90 93 70 00 	sts	0x0070, r25
 438:	a0 93 71 00 	sts	0x0071, r26
 43c:	b0 93 72 00 	sts	0x0072, r27
		
		if(!(CLOCKStatus & (1 << CHANGE_STATUS)))
 440:	80 91 6e 00 	lds	r24, 0x006E
 444:	80 fd       	sbrc	r24, 0
 446:	05 c0       	rjmp	.+10     	; 0x452 <__vector_4+0x9e>
			CLOCKStatus |= (1 << CHANGE_STATUS);	
 448:	80 91 6e 00 	lds	r24, 0x006E
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	80 93 6e 00 	sts	0x006E, r24
	}
}
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <getSeconds>:

int getSeconds()
{
	return (int)((CLOCKTime % HOUR_SECONDS) % MINUTE_SECONDS);
 464:	60 91 6f 00 	lds	r22, 0x006F
 468:	70 91 70 00 	lds	r23, 0x0070
 46c:	80 91 71 00 	lds	r24, 0x0071
 470:	90 91 72 00 	lds	r25, 0x0072
 474:	20 e1       	ldi	r18, 0x10	; 16
 476:	3e e0       	ldi	r19, 0x0E	; 14
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
 480:	2c e3       	ldi	r18, 0x3C	; 60
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
}
 48c:	cb 01       	movw	r24, r22
 48e:	08 95       	ret

00000490 <getMinutes>:

int getMinutes()
{
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
 490:	60 91 6f 00 	lds	r22, 0x006F
 494:	70 91 70 00 	lds	r23, 0x0070
 498:	80 91 71 00 	lds	r24, 0x0071
 49c:	90 91 72 00 	lds	r25, 0x0072
 4a0:	20 e1       	ldi	r18, 0x10	; 16
 4a2:	3e e0       	ldi	r19, 0x0E	; 14
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
 4ac:	2c e3       	ldi	r18, 0x3C	; 60
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
}
 4b8:	c9 01       	movw	r24, r18
 4ba:	08 95       	ret

000004bc <setSeconds>:
{
	return (int)(CLOCKTime / HOUR_SECONDS);
}

void setSeconds(int new_seconds)
{
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <setSeconds+0xe>
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <setSeconds+0x10>
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	7c 01       	movw	r14, r24
	int seconds = getSeconds();
 4d2:	0e 94 32 02 	call	0x464	; 0x464 <getSeconds>
 4d6:	8c 01       	movw	r16, r24
	volatile uint32_t tmpTime = CLOCKTime;
 4d8:	40 91 6f 00 	lds	r20, 0x006F
 4dc:	50 91 70 00 	lds	r21, 0x0070
 4e0:	60 91 71 00 	lds	r22, 0x0071
 4e4:	70 91 72 00 	lds	r23, 0x0072
 4e8:	49 83       	std	Y+1, r20	; 0x01
 4ea:	5a 83       	std	Y+2, r21	; 0x02
 4ec:	6b 83       	std	Y+3, r22	; 0x03
 4ee:	7c 83       	std	Y+4, r23	; 0x04
	
	new_seconds %= 60;
 4f0:	c7 01       	movw	r24, r14
 4f2:	6c e3       	ldi	r22, 0x3C	; 60
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	0e 94 9c 04 	call	0x938	; 0x938 <__divmodhi4>
	
	if(new_seconds < 0)
 4fa:	99 23       	and	r25, r25
 4fc:	64 f1       	brlt	.+88     	; 0x556 <setSeconds+0x9a>
		return;
	
	tmpTime -= (uint32_t)seconds;
 4fe:	49 81       	ldd	r20, Y+1	; 0x01
 500:	5a 81       	ldd	r21, Y+2	; 0x02
 502:	6b 81       	ldd	r22, Y+3	; 0x03
 504:	7c 81       	ldd	r23, Y+4	; 0x04
 506:	22 27       	eor	r18, r18
 508:	17 fd       	sbrc	r17, 7
 50a:	20 95       	com	r18
 50c:	32 2f       	mov	r19, r18
 50e:	40 1b       	sub	r20, r16
 510:	51 0b       	sbc	r21, r17
 512:	62 0b       	sbc	r22, r18
 514:	73 0b       	sbc	r23, r19
 516:	49 83       	std	Y+1, r20	; 0x01
 518:	5a 83       	std	Y+2, r21	; 0x02
 51a:	6b 83       	std	Y+3, r22	; 0x03
 51c:	7c 83       	std	Y+4, r23	; 0x04
	tmpTime += (uint32_t)new_seconds;
 51e:	49 81       	ldd	r20, Y+1	; 0x01
 520:	5a 81       	ldd	r21, Y+2	; 0x02
 522:	6b 81       	ldd	r22, Y+3	; 0x03
 524:	7c 81       	ldd	r23, Y+4	; 0x04
 526:	aa 27       	eor	r26, r26
 528:	97 fd       	sbrc	r25, 7
 52a:	a0 95       	com	r26
 52c:	ba 2f       	mov	r27, r26
 52e:	84 0f       	add	r24, r20
 530:	95 1f       	adc	r25, r21
 532:	a6 1f       	adc	r26, r22
 534:	b7 1f       	adc	r27, r23
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	9a 83       	std	Y+2, r25	; 0x02
 53a:	ab 83       	std	Y+3, r26	; 0x03
 53c:	bc 83       	std	Y+4, r27	; 0x04
	
	CLOCKTime = tmpTime;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	ab 81       	ldd	r26, Y+3	; 0x03
 544:	bc 81       	ldd	r27, Y+4	; 0x04
 546:	80 93 6f 00 	sts	0x006F, r24
 54a:	90 93 70 00 	sts	0x0070, r25
 54e:	a0 93 71 00 	sts	0x0071, r26
 552:	b0 93 72 00 	sts	0x0072, r27
}
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	08 95       	ret

0000056c <setMinutes>:

void setMinutes(int new_minutes)
{
 56c:	cf 92       	push	r12
 56e:	df 92       	push	r13
 570:	ef 92       	push	r14
 572:	ff 92       	push	r15
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	00 d0       	rcall	.+0      	; 0x57a <setMinutes+0xe>
 57a:	00 d0       	rcall	.+0      	; 0x57c <setMinutes+0x10>
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	7c 01       	movw	r14, r24
	int minutes = getMinutes();
 582:	0e 94 48 02 	call	0x490	; 0x490 <getMinutes>
 586:	fc 01       	movw	r30, r24
	volatile uint32_t tmpTime = CLOCKTime;
 588:	40 91 6f 00 	lds	r20, 0x006F
 58c:	50 91 70 00 	lds	r21, 0x0070
 590:	60 91 71 00 	lds	r22, 0x0071
 594:	70 91 72 00 	lds	r23, 0x0072
 598:	49 83       	std	Y+1, r20	; 0x01
 59a:	5a 83       	std	Y+2, r21	; 0x02
 59c:	6b 83       	std	Y+3, r22	; 0x03
 59e:	7c 83       	std	Y+4, r23	; 0x04
	
	new_minutes %= 60;
 5a0:	c7 01       	movw	r24, r14
 5a2:	6c e3       	ldi	r22, 0x3C	; 60
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	0e 94 9c 04 	call	0x938	; 0x938 <__divmodhi4>
 5aa:	ac 01       	movw	r20, r24
	
	if(new_minutes < 0)
 5ac:	99 23       	and	r25, r25
 5ae:	64 f1       	brlt	.+88     	; 0x608 <setMinutes+0x9c>
		return;
	
	tmpTime -= (uint32_t)minutes * MINUTE_SECONDS;
 5b0:	c9 80       	ldd	r12, Y+1	; 0x01
 5b2:	da 80       	ldd	r13, Y+2	; 0x02
 5b4:	eb 80       	ldd	r14, Y+3	; 0x03
 5b6:	fc 80       	ldd	r15, Y+4	; 0x04
 5b8:	2c e3       	ldi	r18, 0x3C	; 60
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	df 01       	movw	r26, r30
 5be:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__usmulhisi3>
 5c2:	c6 1a       	sub	r12, r22
 5c4:	d7 0a       	sbc	r13, r23
 5c6:	e8 0a       	sbc	r14, r24
 5c8:	f9 0a       	sbc	r15, r25
 5ca:	c9 82       	std	Y+1, r12	; 0x01
 5cc:	da 82       	std	Y+2, r13	; 0x02
 5ce:	eb 82       	std	Y+3, r14	; 0x03
 5d0:	fc 82       	std	Y+4, r15	; 0x04
	tmpTime += (uint32_t)new_minutes * MINUTE_SECONDS;
 5d2:	c9 80       	ldd	r12, Y+1	; 0x01
 5d4:	da 80       	ldd	r13, Y+2	; 0x02
 5d6:	eb 80       	ldd	r14, Y+3	; 0x03
 5d8:	fc 80       	ldd	r15, Y+4	; 0x04
 5da:	da 01       	movw	r26, r20
 5dc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__usmulhisi3>
 5e0:	c6 0e       	add	r12, r22
 5e2:	d7 1e       	adc	r13, r23
 5e4:	e8 1e       	adc	r14, r24
 5e6:	f9 1e       	adc	r15, r25
 5e8:	c9 82       	std	Y+1, r12	; 0x01
 5ea:	da 82       	std	Y+2, r13	; 0x02
 5ec:	eb 82       	std	Y+3, r14	; 0x03
 5ee:	fc 82       	std	Y+4, r15	; 0x04
	
	CLOCKTime = tmpTime;
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	9a 81       	ldd	r25, Y+2	; 0x02
 5f4:	ab 81       	ldd	r26, Y+3	; 0x03
 5f6:	bc 81       	ldd	r27, Y+4	; 0x04
 5f8:	80 93 6f 00 	sts	0x006F, r24
 5fc:	90 93 70 00 	sts	0x0070, r25
 600:	a0 93 71 00 	sts	0x0071, r26
 604:	b0 93 72 00 	sts	0x0072, r27
}
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	ff 90       	pop	r15
 616:	ef 90       	pop	r14
 618:	df 90       	pop	r13
 61a:	cf 90       	pop	r12
 61c:	08 95       	ret

0000061e <setHours>:

void setHours(int new_hours)
{
 61e:	cf 92       	push	r12
 620:	df 92       	push	r13
 622:	ef 92       	push	r14
 624:	ff 92       	push	r15
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	00 d0       	rcall	.+0      	; 0x630 <setHours+0x12>
 630:	00 d0       	rcall	.+0      	; 0x632 <setHours+0x14>
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	8c 01       	movw	r16, r24
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
}

int getHours()
{
	return (int)(CLOCKTime / HOUR_SECONDS);
 638:	60 91 6f 00 	lds	r22, 0x006F
 63c:	70 91 70 00 	lds	r23, 0x0070
 640:	80 91 71 00 	lds	r24, 0x0071
 644:	90 91 72 00 	lds	r25, 0x0072
 648:	20 e1       	ldi	r18, 0x10	; 16
 64a:	3e e0       	ldi	r19, 0x0E	; 14
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
}

void setHours(int new_hours)
{
	int hours = getHours();
	volatile uint32_t tmpTime = CLOCKTime;
 654:	80 91 6f 00 	lds	r24, 0x006F
 658:	90 91 70 00 	lds	r25, 0x0070
 65c:	a0 91 71 00 	lds	r26, 0x0071
 660:	b0 91 72 00 	lds	r27, 0x0072
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	9a 83       	std	Y+2, r25	; 0x02
 668:	ab 83       	std	Y+3, r26	; 0x03
 66a:	bc 83       	std	Y+4, r27	; 0x04
	
	if(new_hours < 0)
 66c:	11 23       	and	r17, r17
 66e:	64 f1       	brlt	.+88     	; 0x6c8 <setHours+0xaa>
		return;
		
	tmpTime -= (uint32_t)hours * HOUR_SECONDS;	
 670:	c9 80       	ldd	r12, Y+1	; 0x01
 672:	da 80       	ldd	r13, Y+2	; 0x02
 674:	eb 80       	ldd	r14, Y+3	; 0x03
 676:	fc 80       	ldd	r15, Y+4	; 0x04
 678:	d9 01       	movw	r26, r18
 67a:	20 e1       	ldi	r18, 0x10	; 16
 67c:	3e e0       	ldi	r19, 0x0E	; 14
 67e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__usmulhisi3>
 682:	c6 1a       	sub	r12, r22
 684:	d7 0a       	sbc	r13, r23
 686:	e8 0a       	sbc	r14, r24
 688:	f9 0a       	sbc	r15, r25
 68a:	c9 82       	std	Y+1, r12	; 0x01
 68c:	da 82       	std	Y+2, r13	; 0x02
 68e:	eb 82       	std	Y+3, r14	; 0x03
 690:	fc 82       	std	Y+4, r15	; 0x04
	tmpTime += (uint32_t)new_hours * HOUR_SECONDS;
 692:	c9 80       	ldd	r12, Y+1	; 0x01
 694:	da 80       	ldd	r13, Y+2	; 0x02
 696:	eb 80       	ldd	r14, Y+3	; 0x03
 698:	fc 80       	ldd	r15, Y+4	; 0x04
 69a:	d8 01       	movw	r26, r16
 69c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__usmulhisi3>
 6a0:	c6 0e       	add	r12, r22
 6a2:	d7 1e       	adc	r13, r23
 6a4:	e8 1e       	adc	r14, r24
 6a6:	f9 1e       	adc	r15, r25
 6a8:	c9 82       	std	Y+1, r12	; 0x01
 6aa:	da 82       	std	Y+2, r13	; 0x02
 6ac:	eb 82       	std	Y+3, r14	; 0x03
 6ae:	fc 82       	std	Y+4, r15	; 0x04
	
	CLOCKTime = tmpTime;
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	9a 81       	ldd	r25, Y+2	; 0x02
 6b4:	ab 81       	ldd	r26, Y+3	; 0x03
 6b6:	bc 81       	ldd	r27, Y+4	; 0x04
 6b8:	80 93 6f 00 	sts	0x006F, r24
 6bc:	90 93 70 00 	sts	0x0070, r25
 6c0:	a0 93 71 00 	sts	0x0071, r26
 6c4:	b0 93 72 00 	sts	0x0072, r27
}
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	1f 91       	pop	r17
 6d6:	0f 91       	pop	r16
 6d8:	ff 90       	pop	r15
 6da:	ef 90       	pop	r14
 6dc:	df 90       	pop	r13
 6de:	cf 90       	pop	r12
 6e0:	08 95       	ret

000006e2 <CLOCKStart>:
void CLOCKStart()
{
	/*
		this must be before set CLOCKStatus, because in otherwise timer will increase its value twice
	*/
	TIMSK |= (1 << TOIE2);
 6e2:	89 b7       	in	r24, 0x39	; 57
 6e4:	80 64       	ori	r24, 0x40	; 64
 6e6:	89 bf       	out	0x39, r24	; 57
	CLOCKStatus |= (1 << ACTIVE_STATUS);
 6e8:	80 91 6e 00 	lds	r24, 0x006E
 6ec:	82 60       	ori	r24, 0x02	; 2
 6ee:	80 93 6e 00 	sts	0x006E, r24
 6f2:	08 95       	ret

000006f4 <CLOCKStop>:
void CLOCKStop()
{
	/*
		this must be before set CLOCKStatus, because in otherwise timer will increase its value twice
	*/
	TIMSK &= ~(1 << TOIE2);
 6f4:	89 b7       	in	r24, 0x39	; 57
 6f6:	8f 7b       	andi	r24, 0xBF	; 191
 6f8:	89 bf       	out	0x39, r24	; 57
	CLOCKStatus &= ~(1 << ACTIVE_STATUS);
 6fa:	80 91 6e 00 	lds	r24, 0x006E
 6fe:	8d 7f       	andi	r24, 0xFD	; 253
 700:	80 93 6e 00 	sts	0x006E, r24
 704:	08 95       	ret

00000706 <CLOCKIsActive>:
}

int CLOCKIsActive()
{
	if(CLOCKStatus & (1 << ACTIVE_STATUS))
 706:	80 91 6e 00 	lds	r24, 0x006E
		return 1;
	else
		return 0;
}
 70a:	86 95       	lsr	r24
 70c:	81 70       	andi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	08 95       	ret

00000712 <CLOCKInit>:

void CLOCKInit()
{
	ASSR |= (1 << AS2); // set timer in async mode
 712:	82 b5       	in	r24, 0x22	; 34
 714:	88 60       	ori	r24, 0x08	; 8
 716:	82 bd       	out	0x22, r24	; 34
	
	TCNT2 = 0;
 718:	14 bc       	out	0x24, r1	; 36
	TCCR2 = (1 << CS22) | (1 << CS20);
 71a:	85 e0       	ldi	r24, 0x05	; 5
 71c:	85 bd       	out	0x25, r24	; 37
 71e:	08 95       	ret

00000720 <main>:
#include <util/delay.h>

int main(void)
{
	// przekaznik
	DDRB = 0x00000001;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
 724:	18 ba       	out	0x18, r1	; 24
	
	uint8_t set_time_mode = 1; // set default: hour_mod
	uint8_t modyfi_mode = 1; // set default: true
	
	LEDInit(6, 1, &DDRD, &PORTD, &DDRC, &PORTC);
 726:	0f 2e       	mov	r0, r31
 728:	f5 e3       	ldi	r31, 0x35	; 53
 72a:	ef 2e       	mov	r14, r31
 72c:	f1 2c       	mov	r15, r1
 72e:	f0 2d       	mov	r31, r0
 730:	04 e3       	ldi	r16, 0x34	; 52
 732:	10 e0       	ldi	r17, 0x00	; 0
 734:	22 e3       	ldi	r18, 0x32	; 50
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	41 e3       	ldi	r20, 0x31	; 49
 73a:	50 e0       	ldi	r21, 0x00	; 0
 73c:	61 e0       	ldi	r22, 0x01	; 1
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	0e 94 89 01 	call	0x312	; 0x312 <LEDInit>
	CLOCKInit();
 744:	0e 94 89 03 	call	0x712	; 0x712 <CLOCKInit>
	CLOCKStatus |= (1 << REVERSE_CLOCK);
 748:	80 91 6e 00 	lds	r24, 0x006E
 74c:	84 60       	ori	r24, 0x04	; 4
 74e:	80 93 6e 00 	sts	0x006E, r24
	setHours(12);
 752:	8c e0       	ldi	r24, 0x0C	; 12
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 0f 03 	call	0x61e	; 0x61e <setHours>
	
	sei();
 75a:	78 94       	sei
	
	clearDisplay();
 75c:	0e 94 c2 00 	call	0x184	; 0x184 <clearDisplay>
	// przekaznik
	DDRB = 0x00000001;
	PORTB = 0;
	
	uint8_t set_time_mode = 1; // set default: hour_mod
	uint8_t modyfi_mode = 1; // set default: true
 760:	01 e0       	ldi	r16, 0x01	; 1
{
	// przekaznik
	DDRB = 0x00000001;
	PORTB = 0;
	
	uint8_t set_time_mode = 1; // set default: hour_mod
 762:	11 e0       	ldi	r17, 0x01	; 1
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
			modyfi_mode = 1;
 764:	bb 24       	eor	r11, r11
 766:	b3 94       	inc	r11
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
}

int getHours()
{
	return (int)(CLOCKTime / HOUR_SECONDS);
 768:	0f 2e       	mov	r0, r31
 76a:	f0 e1       	ldi	r31, 0x10	; 16
 76c:	cf 2e       	mov	r12, r31
 76e:	fe e0       	ldi	r31, 0x0E	; 14
 770:	df 2e       	mov	r13, r31
 772:	e1 2c       	mov	r14, r1
 774:	f1 2c       	mov	r15, r1
 776:	f0 2d       	mov	r31, r0
	}
}

void LEDSetPosition(uint8_t pos)
{
	position = pos % MAX_NUM_DISPLAY;
 778:	d2 e0       	ldi	r29, 0x02	; 2
 77a:	c4 e0       	ldi	r28, 0x04	; 4
	clearDisplay();
	
	while(1)
	{
		// finish time
		if(CLOCKTime == 0 && CLOCKIsActive())
 77c:	80 91 6f 00 	lds	r24, 0x006F
 780:	90 91 70 00 	lds	r25, 0x0070
 784:	a0 91 71 00 	lds	r26, 0x0071
 788:	b0 91 72 00 	lds	r27, 0x0072
 78c:	89 2b       	or	r24, r25
 78e:	8a 2b       	or	r24, r26
 790:	8b 2b       	or	r24, r27
 792:	49 f4       	brne	.+18     	; 0x7a6 <main+0x86>
 794:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 798:	89 2b       	or	r24, r25
 79a:	29 f0       	breq	.+10     	; 0x7a6 <main+0x86>
		{
			CLOCKStop();
 79c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <CLOCKStop>
			
			set_time_mode = 1;
			modyfi_mode = 1;
			
			PORTB |= (1 << RELAY);
 7a0:	c0 9a       	sbi	0x18, 0	; 24
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
			modyfi_mode = 1;
 7a2:	0b 2d       	mov	r16, r11
		// finish time
		if(CLOCKTime == 0 && CLOCKIsActive())
		{
			CLOCKStop();
			
			set_time_mode = 1;
 7a4:	1b 2d       	mov	r17, r11
 7a6:	10 92 74 00 	sts	0x0074, r1
 7aa:	60 91 6f 00 	lds	r22, 0x006F
 7ae:	70 91 70 00 	lds	r23, 0x0070
 7b2:	80 91 71 00 	lds	r24, 0x0071
 7b6:	90 91 72 00 	lds	r25, 0x0072
 7ba:	a7 01       	movw	r20, r14
 7bc:	96 01       	movw	r18, r12
 7be:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
			PORTB |= (1 << RELAY);
		}
		
		// LED
		LEDSetPosition(0);
		LEDSetNumberWithZero(getHours());
 7c2:	c9 01       	movw	r24, r18
 7c4:	0e 94 44 01 	call	0x288	; 0x288 <LEDSetNumberWithZero>
 7c8:	d0 93 74 00 	sts	0x0074, r29
		
		LEDSetPosition(2);
		LEDSetNumberWithZero(getMinutes());
 7cc:	0e 94 48 02 	call	0x490	; 0x490 <getMinutes>
 7d0:	0e 94 44 01 	call	0x288	; 0x288 <LEDSetNumberWithZero>
 7d4:	c0 93 74 00 	sts	0x0074, r28
		
		LEDSetPosition(4);
		LEDSetNumberWithZero(getSeconds());
 7d8:	0e 94 32 02 	call	0x464	; 0x464 <getSeconds>
 7dc:	0e 94 44 01 	call	0x288	; 0x288 <LEDSetNumberWithZero>
		
		// Switches
		if(!(PINB & (1 << 1))) // RST
 7e0:	b1 99       	sbic	0x16, 1	; 22
 7e2:	16 c0       	rjmp	.+44     	; 0x810 <main+0xf0>
		{
			CLOCKStop();
 7e4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <CLOCKStop>
	CLOCKTime = tmpTime;
}

void CLOCKReset()
{
	CLOCKTime = 0;
 7e8:	10 92 6f 00 	sts	0x006F, r1
 7ec:	10 92 70 00 	sts	0x0070, r1
 7f0:	10 92 71 00 	sts	0x0071, r1
 7f4:	10 92 72 00 	sts	0x0072, r1
			CLOCKReset();
			clearDisplay();
 7f8:	0e 94 c2 00 	call	0x184	; 0x184 <clearDisplay>

			PORTB &= ~(1 << RELAY);
 7fc:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7fe:	8f e3       	ldi	r24, 0x3F	; 63
 800:	9c e9       	ldi	r25, 0x9C	; 156
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	f1 f7       	brne	.-4      	; 0x802 <main+0xe2>
 806:	00 c0       	rjmp	.+0      	; 0x808 <main+0xe8>
 808:	00 00       	nop

			_delay_ms(20);
			while(!(PINB & (1 << 1)));
 80a:	b1 9b       	sbis	0x16, 1	; 22
 80c:	fe cf       	rjmp	.-4      	; 0x80a <main+0xea>
 80e:	b6 cf       	rjmp	.-148    	; 0x77c <main+0x5c>
		}
		else if(!(PINB & (1 << 2)) && !CLOCKIsActive()) // UP
 810:	b2 99       	sbic	0x16, 2	; 22
 812:	38 c0       	rjmp	.+112    	; 0x884 <main+0x164>
 814:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 818:	89 2b       	or	r24, r25
 81a:	a1 f5       	brne	.+104    	; 0x884 <main+0x164>
		{
			if(!CLOCKIsActive())
 81c:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 820:	89 2b       	or	r24, r25
 822:	39 f5       	brne	.+78     	; 0x872 <main+0x152>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
 824:	10 ff       	sbrs	r17, 0
 826:	12 c0       	rjmp	.+36     	; 0x84c <main+0x12c>
	return (int)((CLOCKTime % HOUR_SECONDS) / MINUTE_SECONDS);
}

int getHours()
{
	return (int)(CLOCKTime / HOUR_SECONDS);
 828:	60 91 6f 00 	lds	r22, 0x006F
 82c:	70 91 70 00 	lds	r23, 0x0070
 830:	80 91 71 00 	lds	r24, 0x0071
 834:	90 91 72 00 	lds	r25, 0x0072
 838:	a7 01       	movw	r20, r14
 83a:	96 01       	movw	r18, r12
 83c:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
				setHours(getHours() + 1);
 840:	c9 01       	movw	r24, r18
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	0e 94 0f 03 	call	0x61e	; 0x61e <setHours>
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() + 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() + 1);

				modyfi_mode = 1;
 848:	0b 2d       	mov	r16, r11
 84a:	13 c0       	rjmp	.+38     	; 0x872 <main+0x152>
		{
			if(!CLOCKIsActive())
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() + 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
 84c:	11 ff       	sbrs	r17, 1
 84e:	07 c0       	rjmp	.+14     	; 0x85e <main+0x13e>
				setMinutes(getMinutes() + 1);
 850:	0e 94 48 02 	call	0x490	; 0x490 <getMinutes>
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	0e 94 b6 02 	call	0x56c	; 0x56c <setMinutes>
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() + 1);

				modyfi_mode = 1;
 85a:	0b 2d       	mov	r16, r11
 85c:	0a c0       	rjmp	.+20     	; 0x872 <main+0x152>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() + 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() + 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
 85e:	12 ff       	sbrs	r17, 2
 860:	07 c0       	rjmp	.+14     	; 0x870 <main+0x150>
				setSeconds(getSeconds() + 1);
 862:	0e 94 32 02 	call	0x464	; 0x464 <getSeconds>
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	0e 94 5e 02 	call	0x4bc	; 0x4bc <setSeconds>

				modyfi_mode = 1;
 86c:	0b 2d       	mov	r16, r11
 86e:	01 c0       	rjmp	.+2      	; 0x872 <main+0x152>
 870:	0b 2d       	mov	r16, r11
 872:	8f e3       	ldi	r24, 0x3F	; 63
 874:	9c e9       	ldi	r25, 0x9C	; 156
 876:	01 97       	sbiw	r24, 0x01	; 1
 878:	f1 f7       	brne	.-4      	; 0x876 <main+0x156>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <main+0x15c>
 87c:	00 00       	nop
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 2)));
 87e:	b2 9b       	sbis	0x16, 2	; 22
 880:	fe cf       	rjmp	.-4      	; 0x87e <main+0x15e>
 882:	7c cf       	rjmp	.-264    	; 0x77c <main+0x5c>
		}
		else if(!(PINB & (1 << 3)) && !CLOCKIsActive()) // DOWN
 884:	b3 99       	sbic	0x16, 3	; 22
 886:	38 c0       	rjmp	.+112    	; 0x8f8 <main+0x1d8>
 888:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 88c:	89 2b       	or	r24, r25
 88e:	a1 f5       	brne	.+104    	; 0x8f8 <main+0x1d8>
		{
			if(!CLOCKIsActive())
 890:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 894:	89 2b       	or	r24, r25
 896:	39 f5       	brne	.+78     	; 0x8e6 <main+0x1c6>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
 898:	10 ff       	sbrs	r17, 0
 89a:	12 c0       	rjmp	.+36     	; 0x8c0 <main+0x1a0>
 89c:	60 91 6f 00 	lds	r22, 0x006F
 8a0:	70 91 70 00 	lds	r23, 0x0070
 8a4:	80 91 71 00 	lds	r24, 0x0071
 8a8:	90 91 72 00 	lds	r25, 0x0072
 8ac:	a7 01       	movw	r20, r14
 8ae:	96 01       	movw	r18, r12
 8b0:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
				setHours(getHours() - 1);
 8b4:	c9 01       	movw	r24, r18
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	0e 94 0f 03 	call	0x61e	; 0x61e <setHours>
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() - 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() - 1);

				modyfi_mode = 1;
 8bc:	0b 2d       	mov	r16, r11
 8be:	13 c0       	rjmp	.+38     	; 0x8e6 <main+0x1c6>
		{
			if(!CLOCKIsActive())
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() - 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
 8c0:	11 ff       	sbrs	r17, 1
 8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <main+0x1b2>
				setMinutes(getMinutes() - 1);
 8c4:	0e 94 48 02 	call	0x490	; 0x490 <getMinutes>
 8c8:	01 97       	sbiw	r24, 0x01	; 1
 8ca:	0e 94 b6 02 	call	0x56c	; 0x56c <setMinutes>
				else if(set_time_mode & (1 << SET_SEC_MOD))
				setSeconds(getSeconds() - 1);

				modyfi_mode = 1;
 8ce:	0b 2d       	mov	r16, r11
 8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <main+0x1c6>
			{
				if(set_time_mode & (1 << SET_HOUR_MOD))
				setHours(getHours() - 1);
				else if(set_time_mode & (1 << SET_MIN_MOD))
				setMinutes(getMinutes() - 1);
				else if(set_time_mode & (1 << SET_SEC_MOD))
 8d2:	12 ff       	sbrs	r17, 2
 8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <main+0x1c4>
				setSeconds(getSeconds() - 1);
 8d6:	0e 94 32 02 	call	0x464	; 0x464 <getSeconds>
 8da:	01 97       	sbiw	r24, 0x01	; 1
 8dc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <setSeconds>

				modyfi_mode = 1;
 8e0:	0b 2d       	mov	r16, r11
 8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <main+0x1c6>
 8e4:	0b 2d       	mov	r16, r11
 8e6:	8f e3       	ldi	r24, 0x3F	; 63
 8e8:	9c e9       	ldi	r25, 0x9C	; 156
 8ea:	01 97       	sbiw	r24, 0x01	; 1
 8ec:	f1 f7       	brne	.-4      	; 0x8ea <main+0x1ca>
 8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <main+0x1d0>
 8f0:	00 00       	nop
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 3)));
 8f2:	b3 9b       	sbis	0x16, 3	; 22
 8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <main+0x1d2>
 8f6:	42 cf       	rjmp	.-380    	; 0x77c <main+0x5c>
		}
		else if(!(PINB & (1 << 4))) // OK, STOP, START
 8f8:	b4 99       	sbic	0x16, 4	; 22
 8fa:	40 cf       	rjmp	.-384    	; 0x77c <main+0x5c>
		{
			if(CLOCKIsActive())
 8fc:	0e 94 83 03 	call	0x706	; 0x706 <CLOCKIsActive>
 900:	89 2b       	or	r24, r25
 902:	29 f0       	breq	.+10     	; 0x90e <main+0x1ee>
			{
				CLOCKStop();
 904:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <CLOCKStop>
				
				set_time_mode = 1;
				modyfi_mode = 1;
 908:	0b 2d       	mov	r16, r11
		{
			if(CLOCKIsActive())
			{
				CLOCKStop();
				
				set_time_mode = 1;
 90a:	1b 2d       	mov	r17, r11
 90c:	0c c0       	rjmp	.+24     	; 0x926 <main+0x206>
				modyfi_mode = 1;
			}
			else
			{
				if(modyfi_mode)
 90e:	00 23       	and	r16, r16
 910:	41 f0       	breq	.+16     	; 0x922 <main+0x202>
				{
					set_time_mode <<= 1;
 912:	11 0f       	add	r17, r17
					
					if(set_time_mode & (1 << SET_END_MOD))
 914:	13 ff       	sbrs	r17, 3
 916:	07 c0       	rjmp	.+14     	; 0x926 <main+0x206>
					{
						set_time_mode = 0;
						modyfi_mode = 0;
						
						CLOCKStart();
 918:	0e 94 71 03 	call	0x6e2	; 0x6e2 <CLOCKStart>
					set_time_mode <<= 1;
					
					if(set_time_mode & (1 << SET_END_MOD))
					{
						set_time_mode = 0;
						modyfi_mode = 0;
 91c:	00 e0       	ldi	r16, 0x00	; 0
				{
					set_time_mode <<= 1;
					
					if(set_time_mode & (1 << SET_END_MOD))
					{
						set_time_mode = 0;
 91e:	10 e0       	ldi	r17, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <main+0x206>
						
						CLOCKStart();
					}
				}
				else
				CLOCKStart();
 922:	0e 94 71 03 	call	0x6e2	; 0x6e2 <CLOCKStart>
 926:	8f e3       	ldi	r24, 0x3F	; 63
 928:	9c e9       	ldi	r25, 0x9C	; 156
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	f1 f7       	brne	.-4      	; 0x92a <main+0x20a>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <main+0x210>
 930:	00 00       	nop
			}
			
			_delay_ms(20);
			while(!(PINB & (1 << 4)));
 932:	b4 9b       	sbis	0x16, 4	; 22
 934:	fe cf       	rjmp	.-4      	; 0x932 <main+0x212>
 936:	22 cf       	rjmp	.-444    	; 0x77c <main+0x5c>

00000938 <__divmodhi4>:
 938:	97 fb       	bst	r25, 7
 93a:	07 2e       	mov	r0, r23
 93c:	16 f4       	brtc	.+4      	; 0x942 <__divmodhi4+0xa>
 93e:	00 94       	com	r0
 940:	07 d0       	rcall	.+14     	; 0x950 <__divmodhi4_neg1>
 942:	77 fd       	sbrc	r23, 7
 944:	09 d0       	rcall	.+18     	; 0x958 <__divmodhi4_neg2>
 946:	0e 94 df 04 	call	0x9be	; 0x9be <__udivmodhi4>
 94a:	07 fc       	sbrc	r0, 7
 94c:	05 d0       	rcall	.+10     	; 0x958 <__divmodhi4_neg2>
 94e:	3e f4       	brtc	.+14     	; 0x95e <__divmodhi4_exit>

00000950 <__divmodhi4_neg1>:
 950:	90 95       	com	r25
 952:	81 95       	neg	r24
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <__divmodhi4_neg2>:
 958:	70 95       	com	r23
 95a:	61 95       	neg	r22
 95c:	7f 4f       	sbci	r23, 0xFF	; 255

0000095e <__divmodhi4_exit>:
 95e:	08 95       	ret

00000960 <__udivmodsi4>:
 960:	a1 e2       	ldi	r26, 0x21	; 33
 962:	1a 2e       	mov	r1, r26
 964:	aa 1b       	sub	r26, r26
 966:	bb 1b       	sub	r27, r27
 968:	fd 01       	movw	r30, r26
 96a:	0d c0       	rjmp	.+26     	; 0x986 <__udivmodsi4_ep>

0000096c <__udivmodsi4_loop>:
 96c:	aa 1f       	adc	r26, r26
 96e:	bb 1f       	adc	r27, r27
 970:	ee 1f       	adc	r30, r30
 972:	ff 1f       	adc	r31, r31
 974:	a2 17       	cp	r26, r18
 976:	b3 07       	cpc	r27, r19
 978:	e4 07       	cpc	r30, r20
 97a:	f5 07       	cpc	r31, r21
 97c:	20 f0       	brcs	.+8      	; 0x986 <__udivmodsi4_ep>
 97e:	a2 1b       	sub	r26, r18
 980:	b3 0b       	sbc	r27, r19
 982:	e4 0b       	sbc	r30, r20
 984:	f5 0b       	sbc	r31, r21

00000986 <__udivmodsi4_ep>:
 986:	66 1f       	adc	r22, r22
 988:	77 1f       	adc	r23, r23
 98a:	88 1f       	adc	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	1a 94       	dec	r1
 990:	69 f7       	brne	.-38     	; 0x96c <__udivmodsi4_loop>
 992:	60 95       	com	r22
 994:	70 95       	com	r23
 996:	80 95       	com	r24
 998:	90 95       	com	r25
 99a:	9b 01       	movw	r18, r22
 99c:	ac 01       	movw	r20, r24
 99e:	bd 01       	movw	r22, r26
 9a0:	cf 01       	movw	r24, r30
 9a2:	08 95       	ret

000009a4 <__tablejump2__>:
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31

000009a8 <__tablejump__>:
 9a8:	05 90       	lpm	r0, Z+
 9aa:	f4 91       	lpm	r31, Z
 9ac:	e0 2d       	mov	r30, r0
 9ae:	09 94       	ijmp

000009b0 <__usmulhisi3>:
 9b0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__umulhisi3>

000009b4 <__usmulhisi3_tail>:
 9b4:	b7 ff       	sbrs	r27, 7
 9b6:	08 95       	ret
 9b8:	82 1b       	sub	r24, r18
 9ba:	93 0b       	sbc	r25, r19
 9bc:	08 95       	ret

000009be <__udivmodhi4>:
 9be:	aa 1b       	sub	r26, r26
 9c0:	bb 1b       	sub	r27, r27
 9c2:	51 e1       	ldi	r21, 0x11	; 17
 9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <__udivmodhi4_ep>

000009c6 <__udivmodhi4_loop>:
 9c6:	aa 1f       	adc	r26, r26
 9c8:	bb 1f       	adc	r27, r27
 9ca:	a6 17       	cp	r26, r22
 9cc:	b7 07       	cpc	r27, r23
 9ce:	10 f0       	brcs	.+4      	; 0x9d4 <__udivmodhi4_ep>
 9d0:	a6 1b       	sub	r26, r22
 9d2:	b7 0b       	sbc	r27, r23

000009d4 <__udivmodhi4_ep>:
 9d4:	88 1f       	adc	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	5a 95       	dec	r21
 9da:	a9 f7       	brne	.-22     	; 0x9c6 <__udivmodhi4_loop>
 9dc:	80 95       	com	r24
 9de:	90 95       	com	r25
 9e0:	bc 01       	movw	r22, r24
 9e2:	cd 01       	movw	r24, r26
 9e4:	08 95       	ret

000009e6 <__umulhisi3>:
 9e6:	a2 9f       	mul	r26, r18
 9e8:	b0 01       	movw	r22, r0
 9ea:	b3 9f       	mul	r27, r19
 9ec:	c0 01       	movw	r24, r0
 9ee:	a3 9f       	mul	r26, r19
 9f0:	70 0d       	add	r23, r0
 9f2:	81 1d       	adc	r24, r1
 9f4:	11 24       	eor	r1, r1
 9f6:	91 1d       	adc	r25, r1
 9f8:	b2 9f       	mul	r27, r18
 9fa:	70 0d       	add	r23, r0
 9fc:	81 1d       	adc	r24, r1
 9fe:	11 24       	eor	r1, r1
 a00:	91 1d       	adc	r25, r1
 a02:	08 95       	ret

00000a04 <sprintf>:
 a04:	ae e0       	ldi	r26, 0x0E	; 14
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	e8 e0       	ldi	r30, 0x08	; 8
 a0a:	f5 e0       	ldi	r31, 0x05	; 5
 a0c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__prologue_saves__+0x1c>
 a10:	0d 89       	ldd	r16, Y+21	; 0x15
 a12:	1e 89       	ldd	r17, Y+22	; 0x16
 a14:	86 e0       	ldi	r24, 0x06	; 6
 a16:	8c 83       	std	Y+4, r24	; 0x04
 a18:	1a 83       	std	Y+2, r17	; 0x02
 a1a:	09 83       	std	Y+1, r16	; 0x01
 a1c:	8f ef       	ldi	r24, 0xFF	; 255
 a1e:	9f e7       	ldi	r25, 0x7F	; 127
 a20:	9e 83       	std	Y+6, r25	; 0x06
 a22:	8d 83       	std	Y+5, r24	; 0x05
 a24:	ae 01       	movw	r20, r28
 a26:	47 5e       	subi	r20, 0xE7	; 231
 a28:	5f 4f       	sbci	r21, 0xFF	; 255
 a2a:	6f 89       	ldd	r22, Y+23	; 0x17
 a2c:	78 8d       	ldd	r23, Y+24	; 0x18
 a2e:	ce 01       	movw	r24, r28
 a30:	01 96       	adiw	r24, 0x01	; 1
 a32:	0e 94 24 05 	call	0xa48	; 0xa48 <vfprintf>
 a36:	ef 81       	ldd	r30, Y+7	; 0x07
 a38:	f8 85       	ldd	r31, Y+8	; 0x08
 a3a:	e0 0f       	add	r30, r16
 a3c:	f1 1f       	adc	r31, r17
 a3e:	10 82       	st	Z, r1
 a40:	2e 96       	adiw	r28, 0x0e	; 14
 a42:	e4 e0       	ldi	r30, 0x04	; 4
 a44:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__epilogue_restores__+0x1c>

00000a48 <vfprintf>:
 a48:	ac e0       	ldi	r26, 0x0C	; 12
 a4a:	b0 e0       	ldi	r27, 0x00	; 0
 a4c:	ea e2       	ldi	r30, 0x2A	; 42
 a4e:	f5 e0       	ldi	r31, 0x05	; 5
 a50:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__prologue_saves__>
 a54:	7c 01       	movw	r14, r24
 a56:	6b 01       	movw	r12, r22
 a58:	8a 01       	movw	r16, r20
 a5a:	fc 01       	movw	r30, r24
 a5c:	17 82       	std	Z+7, r1	; 0x07
 a5e:	16 82       	std	Z+6, r1	; 0x06
 a60:	83 81       	ldd	r24, Z+3	; 0x03
 a62:	81 ff       	sbrs	r24, 1
 a64:	bd c1       	rjmp	.+890    	; 0xde0 <vfprintf+0x398>
 a66:	ce 01       	movw	r24, r28
 a68:	01 96       	adiw	r24, 0x01	; 1
 a6a:	4c 01       	movw	r8, r24
 a6c:	f7 01       	movw	r30, r14
 a6e:	93 81       	ldd	r25, Z+3	; 0x03
 a70:	f6 01       	movw	r30, r12
 a72:	93 fd       	sbrc	r25, 3
 a74:	85 91       	lpm	r24, Z+
 a76:	93 ff       	sbrs	r25, 3
 a78:	81 91       	ld	r24, Z+
 a7a:	6f 01       	movw	r12, r30
 a7c:	88 23       	and	r24, r24
 a7e:	09 f4       	brne	.+2      	; 0xa82 <vfprintf+0x3a>
 a80:	ab c1       	rjmp	.+854    	; 0xdd8 <vfprintf+0x390>
 a82:	85 32       	cpi	r24, 0x25	; 37
 a84:	39 f4       	brne	.+14     	; 0xa94 <vfprintf+0x4c>
 a86:	93 fd       	sbrc	r25, 3
 a88:	85 91       	lpm	r24, Z+
 a8a:	93 ff       	sbrs	r25, 3
 a8c:	81 91       	ld	r24, Z+
 a8e:	6f 01       	movw	r12, r30
 a90:	85 32       	cpi	r24, 0x25	; 37
 a92:	29 f4       	brne	.+10     	; 0xa9e <vfprintf+0x56>
 a94:	b7 01       	movw	r22, r14
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 a9c:	e7 cf       	rjmp	.-50     	; 0xa6c <vfprintf+0x24>
 a9e:	51 2c       	mov	r5, r1
 aa0:	31 2c       	mov	r3, r1
 aa2:	20 e0       	ldi	r18, 0x00	; 0
 aa4:	20 32       	cpi	r18, 0x20	; 32
 aa6:	a0 f4       	brcc	.+40     	; 0xad0 <vfprintf+0x88>
 aa8:	8b 32       	cpi	r24, 0x2B	; 43
 aaa:	69 f0       	breq	.+26     	; 0xac6 <vfprintf+0x7e>
 aac:	30 f4       	brcc	.+12     	; 0xaba <vfprintf+0x72>
 aae:	80 32       	cpi	r24, 0x20	; 32
 ab0:	59 f0       	breq	.+22     	; 0xac8 <vfprintf+0x80>
 ab2:	83 32       	cpi	r24, 0x23	; 35
 ab4:	69 f4       	brne	.+26     	; 0xad0 <vfprintf+0x88>
 ab6:	20 61       	ori	r18, 0x10	; 16
 ab8:	2c c0       	rjmp	.+88     	; 0xb12 <vfprintf+0xca>
 aba:	8d 32       	cpi	r24, 0x2D	; 45
 abc:	39 f0       	breq	.+14     	; 0xacc <vfprintf+0x84>
 abe:	80 33       	cpi	r24, 0x30	; 48
 ac0:	39 f4       	brne	.+14     	; 0xad0 <vfprintf+0x88>
 ac2:	21 60       	ori	r18, 0x01	; 1
 ac4:	26 c0       	rjmp	.+76     	; 0xb12 <vfprintf+0xca>
 ac6:	22 60       	ori	r18, 0x02	; 2
 ac8:	24 60       	ori	r18, 0x04	; 4
 aca:	23 c0       	rjmp	.+70     	; 0xb12 <vfprintf+0xca>
 acc:	28 60       	ori	r18, 0x08	; 8
 ace:	21 c0       	rjmp	.+66     	; 0xb12 <vfprintf+0xca>
 ad0:	27 fd       	sbrc	r18, 7
 ad2:	27 c0       	rjmp	.+78     	; 0xb22 <vfprintf+0xda>
 ad4:	30 ed       	ldi	r19, 0xD0	; 208
 ad6:	38 0f       	add	r19, r24
 ad8:	3a 30       	cpi	r19, 0x0A	; 10
 ada:	78 f4       	brcc	.+30     	; 0xafa <vfprintf+0xb2>
 adc:	26 ff       	sbrs	r18, 6
 ade:	06 c0       	rjmp	.+12     	; 0xaec <vfprintf+0xa4>
 ae0:	fa e0       	ldi	r31, 0x0A	; 10
 ae2:	5f 9e       	mul	r5, r31
 ae4:	30 0d       	add	r19, r0
 ae6:	11 24       	eor	r1, r1
 ae8:	53 2e       	mov	r5, r19
 aea:	13 c0       	rjmp	.+38     	; 0xb12 <vfprintf+0xca>
 aec:	8a e0       	ldi	r24, 0x0A	; 10
 aee:	38 9e       	mul	r3, r24
 af0:	30 0d       	add	r19, r0
 af2:	11 24       	eor	r1, r1
 af4:	33 2e       	mov	r3, r19
 af6:	20 62       	ori	r18, 0x20	; 32
 af8:	0c c0       	rjmp	.+24     	; 0xb12 <vfprintf+0xca>
 afa:	8e 32       	cpi	r24, 0x2E	; 46
 afc:	21 f4       	brne	.+8      	; 0xb06 <vfprintf+0xbe>
 afe:	26 fd       	sbrc	r18, 6
 b00:	6b c1       	rjmp	.+726    	; 0xdd8 <vfprintf+0x390>
 b02:	20 64       	ori	r18, 0x40	; 64
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <vfprintf+0xca>
 b06:	8c 36       	cpi	r24, 0x6C	; 108
 b08:	11 f4       	brne	.+4      	; 0xb0e <vfprintf+0xc6>
 b0a:	20 68       	ori	r18, 0x80	; 128
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <vfprintf+0xca>
 b0e:	88 36       	cpi	r24, 0x68	; 104
 b10:	41 f4       	brne	.+16     	; 0xb22 <vfprintf+0xda>
 b12:	f6 01       	movw	r30, r12
 b14:	93 fd       	sbrc	r25, 3
 b16:	85 91       	lpm	r24, Z+
 b18:	93 ff       	sbrs	r25, 3
 b1a:	81 91       	ld	r24, Z+
 b1c:	6f 01       	movw	r12, r30
 b1e:	81 11       	cpse	r24, r1
 b20:	c1 cf       	rjmp	.-126    	; 0xaa4 <vfprintf+0x5c>
 b22:	98 2f       	mov	r25, r24
 b24:	9f 7d       	andi	r25, 0xDF	; 223
 b26:	95 54       	subi	r25, 0x45	; 69
 b28:	93 30       	cpi	r25, 0x03	; 3
 b2a:	28 f4       	brcc	.+10     	; 0xb36 <vfprintf+0xee>
 b2c:	0c 5f       	subi	r16, 0xFC	; 252
 b2e:	1f 4f       	sbci	r17, 0xFF	; 255
 b30:	ff e3       	ldi	r31, 0x3F	; 63
 b32:	f9 83       	std	Y+1, r31	; 0x01
 b34:	0d c0       	rjmp	.+26     	; 0xb50 <vfprintf+0x108>
 b36:	83 36       	cpi	r24, 0x63	; 99
 b38:	31 f0       	breq	.+12     	; 0xb46 <vfprintf+0xfe>
 b3a:	83 37       	cpi	r24, 0x73	; 115
 b3c:	71 f0       	breq	.+28     	; 0xb5a <vfprintf+0x112>
 b3e:	83 35       	cpi	r24, 0x53	; 83
 b40:	09 f0       	breq	.+2      	; 0xb44 <vfprintf+0xfc>
 b42:	5b c0       	rjmp	.+182    	; 0xbfa <vfprintf+0x1b2>
 b44:	22 c0       	rjmp	.+68     	; 0xb8a <vfprintf+0x142>
 b46:	f8 01       	movw	r30, r16
 b48:	80 81       	ld	r24, Z
 b4a:	89 83       	std	Y+1, r24	; 0x01
 b4c:	0e 5f       	subi	r16, 0xFE	; 254
 b4e:	1f 4f       	sbci	r17, 0xFF	; 255
 b50:	44 24       	eor	r4, r4
 b52:	43 94       	inc	r4
 b54:	51 2c       	mov	r5, r1
 b56:	54 01       	movw	r10, r8
 b58:	15 c0       	rjmp	.+42     	; 0xb84 <vfprintf+0x13c>
 b5a:	38 01       	movw	r6, r16
 b5c:	f2 e0       	ldi	r31, 0x02	; 2
 b5e:	6f 0e       	add	r6, r31
 b60:	71 1c       	adc	r7, r1
 b62:	f8 01       	movw	r30, r16
 b64:	a0 80       	ld	r10, Z
 b66:	b1 80       	ldd	r11, Z+1	; 0x01
 b68:	26 ff       	sbrs	r18, 6
 b6a:	03 c0       	rjmp	.+6      	; 0xb72 <vfprintf+0x12a>
 b6c:	65 2d       	mov	r22, r5
 b6e:	70 e0       	ldi	r23, 0x00	; 0
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <vfprintf+0x12e>
 b72:	6f ef       	ldi	r22, 0xFF	; 255
 b74:	7f ef       	ldi	r23, 0xFF	; 255
 b76:	c5 01       	movw	r24, r10
 b78:	2c 87       	std	Y+12, r18	; 0x0c
 b7a:	0e 94 01 07 	call	0xe02	; 0xe02 <strnlen>
 b7e:	2c 01       	movw	r4, r24
 b80:	83 01       	movw	r16, r6
 b82:	2c 85       	ldd	r18, Y+12	; 0x0c
 b84:	2f 77       	andi	r18, 0x7F	; 127
 b86:	22 2e       	mov	r2, r18
 b88:	17 c0       	rjmp	.+46     	; 0xbb8 <vfprintf+0x170>
 b8a:	38 01       	movw	r6, r16
 b8c:	f2 e0       	ldi	r31, 0x02	; 2
 b8e:	6f 0e       	add	r6, r31
 b90:	71 1c       	adc	r7, r1
 b92:	f8 01       	movw	r30, r16
 b94:	a0 80       	ld	r10, Z
 b96:	b1 80       	ldd	r11, Z+1	; 0x01
 b98:	26 ff       	sbrs	r18, 6
 b9a:	03 c0       	rjmp	.+6      	; 0xba2 <vfprintf+0x15a>
 b9c:	65 2d       	mov	r22, r5
 b9e:	70 e0       	ldi	r23, 0x00	; 0
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <vfprintf+0x15e>
 ba2:	6f ef       	ldi	r22, 0xFF	; 255
 ba4:	7f ef       	ldi	r23, 0xFF	; 255
 ba6:	c5 01       	movw	r24, r10
 ba8:	2c 87       	std	Y+12, r18	; 0x0c
 baa:	0e 94 f6 06 	call	0xdec	; 0xdec <strnlen_P>
 bae:	2c 01       	movw	r4, r24
 bb0:	2c 85       	ldd	r18, Y+12	; 0x0c
 bb2:	20 68       	ori	r18, 0x80	; 128
 bb4:	22 2e       	mov	r2, r18
 bb6:	83 01       	movw	r16, r6
 bb8:	23 fc       	sbrc	r2, 3
 bba:	1b c0       	rjmp	.+54     	; 0xbf2 <vfprintf+0x1aa>
 bbc:	83 2d       	mov	r24, r3
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	48 16       	cp	r4, r24
 bc2:	59 06       	cpc	r5, r25
 bc4:	b0 f4       	brcc	.+44     	; 0xbf2 <vfprintf+0x1aa>
 bc6:	b7 01       	movw	r22, r14
 bc8:	80 e2       	ldi	r24, 0x20	; 32
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 bd0:	3a 94       	dec	r3
 bd2:	f4 cf       	rjmp	.-24     	; 0xbbc <vfprintf+0x174>
 bd4:	f5 01       	movw	r30, r10
 bd6:	27 fc       	sbrc	r2, 7
 bd8:	85 91       	lpm	r24, Z+
 bda:	27 fe       	sbrs	r2, 7
 bdc:	81 91       	ld	r24, Z+
 bde:	5f 01       	movw	r10, r30
 be0:	b7 01       	movw	r22, r14
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 be8:	31 10       	cpse	r3, r1
 bea:	3a 94       	dec	r3
 bec:	f1 e0       	ldi	r31, 0x01	; 1
 bee:	4f 1a       	sub	r4, r31
 bf0:	51 08       	sbc	r5, r1
 bf2:	41 14       	cp	r4, r1
 bf4:	51 04       	cpc	r5, r1
 bf6:	71 f7       	brne	.-36     	; 0xbd4 <vfprintf+0x18c>
 bf8:	e5 c0       	rjmp	.+458    	; 0xdc4 <vfprintf+0x37c>
 bfa:	84 36       	cpi	r24, 0x64	; 100
 bfc:	11 f0       	breq	.+4      	; 0xc02 <vfprintf+0x1ba>
 bfe:	89 36       	cpi	r24, 0x69	; 105
 c00:	39 f5       	brne	.+78     	; 0xc50 <vfprintf+0x208>
 c02:	f8 01       	movw	r30, r16
 c04:	27 ff       	sbrs	r18, 7
 c06:	07 c0       	rjmp	.+14     	; 0xc16 <vfprintf+0x1ce>
 c08:	60 81       	ld	r22, Z
 c0a:	71 81       	ldd	r23, Z+1	; 0x01
 c0c:	82 81       	ldd	r24, Z+2	; 0x02
 c0e:	93 81       	ldd	r25, Z+3	; 0x03
 c10:	0c 5f       	subi	r16, 0xFC	; 252
 c12:	1f 4f       	sbci	r17, 0xFF	; 255
 c14:	08 c0       	rjmp	.+16     	; 0xc26 <vfprintf+0x1de>
 c16:	60 81       	ld	r22, Z
 c18:	71 81       	ldd	r23, Z+1	; 0x01
 c1a:	88 27       	eor	r24, r24
 c1c:	77 fd       	sbrc	r23, 7
 c1e:	80 95       	com	r24
 c20:	98 2f       	mov	r25, r24
 c22:	0e 5f       	subi	r16, 0xFE	; 254
 c24:	1f 4f       	sbci	r17, 0xFF	; 255
 c26:	2f 76       	andi	r18, 0x6F	; 111
 c28:	b2 2e       	mov	r11, r18
 c2a:	97 ff       	sbrs	r25, 7
 c2c:	09 c0       	rjmp	.+18     	; 0xc40 <vfprintf+0x1f8>
 c2e:	90 95       	com	r25
 c30:	80 95       	com	r24
 c32:	70 95       	com	r23
 c34:	61 95       	neg	r22
 c36:	7f 4f       	sbci	r23, 0xFF	; 255
 c38:	8f 4f       	sbci	r24, 0xFF	; 255
 c3a:	9f 4f       	sbci	r25, 0xFF	; 255
 c3c:	20 68       	ori	r18, 0x80	; 128
 c3e:	b2 2e       	mov	r11, r18
 c40:	2a e0       	ldi	r18, 0x0A	; 10
 c42:	30 e0       	ldi	r19, 0x00	; 0
 c44:	a4 01       	movw	r20, r8
 c46:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__ultoa_invert>
 c4a:	a8 2e       	mov	r10, r24
 c4c:	a8 18       	sub	r10, r8
 c4e:	44 c0       	rjmp	.+136    	; 0xcd8 <vfprintf+0x290>
 c50:	85 37       	cpi	r24, 0x75	; 117
 c52:	29 f4       	brne	.+10     	; 0xc5e <vfprintf+0x216>
 c54:	2f 7e       	andi	r18, 0xEF	; 239
 c56:	b2 2e       	mov	r11, r18
 c58:	2a e0       	ldi	r18, 0x0A	; 10
 c5a:	30 e0       	ldi	r19, 0x00	; 0
 c5c:	25 c0       	rjmp	.+74     	; 0xca8 <vfprintf+0x260>
 c5e:	f2 2f       	mov	r31, r18
 c60:	f9 7f       	andi	r31, 0xF9	; 249
 c62:	bf 2e       	mov	r11, r31
 c64:	8f 36       	cpi	r24, 0x6F	; 111
 c66:	c1 f0       	breq	.+48     	; 0xc98 <vfprintf+0x250>
 c68:	18 f4       	brcc	.+6      	; 0xc70 <vfprintf+0x228>
 c6a:	88 35       	cpi	r24, 0x58	; 88
 c6c:	79 f0       	breq	.+30     	; 0xc8c <vfprintf+0x244>
 c6e:	b4 c0       	rjmp	.+360    	; 0xdd8 <vfprintf+0x390>
 c70:	80 37       	cpi	r24, 0x70	; 112
 c72:	19 f0       	breq	.+6      	; 0xc7a <vfprintf+0x232>
 c74:	88 37       	cpi	r24, 0x78	; 120
 c76:	21 f0       	breq	.+8      	; 0xc80 <vfprintf+0x238>
 c78:	af c0       	rjmp	.+350    	; 0xdd8 <vfprintf+0x390>
 c7a:	2f 2f       	mov	r18, r31
 c7c:	20 61       	ori	r18, 0x10	; 16
 c7e:	b2 2e       	mov	r11, r18
 c80:	b4 fe       	sbrs	r11, 4
 c82:	0d c0       	rjmp	.+26     	; 0xc9e <vfprintf+0x256>
 c84:	8b 2d       	mov	r24, r11
 c86:	84 60       	ori	r24, 0x04	; 4
 c88:	b8 2e       	mov	r11, r24
 c8a:	09 c0       	rjmp	.+18     	; 0xc9e <vfprintf+0x256>
 c8c:	24 ff       	sbrs	r18, 4
 c8e:	0a c0       	rjmp	.+20     	; 0xca4 <vfprintf+0x25c>
 c90:	9f 2f       	mov	r25, r31
 c92:	96 60       	ori	r25, 0x06	; 6
 c94:	b9 2e       	mov	r11, r25
 c96:	06 c0       	rjmp	.+12     	; 0xca4 <vfprintf+0x25c>
 c98:	28 e0       	ldi	r18, 0x08	; 8
 c9a:	30 e0       	ldi	r19, 0x00	; 0
 c9c:	05 c0       	rjmp	.+10     	; 0xca8 <vfprintf+0x260>
 c9e:	20 e1       	ldi	r18, 0x10	; 16
 ca0:	30 e0       	ldi	r19, 0x00	; 0
 ca2:	02 c0       	rjmp	.+4      	; 0xca8 <vfprintf+0x260>
 ca4:	20 e1       	ldi	r18, 0x10	; 16
 ca6:	32 e0       	ldi	r19, 0x02	; 2
 ca8:	f8 01       	movw	r30, r16
 caa:	b7 fe       	sbrs	r11, 7
 cac:	07 c0       	rjmp	.+14     	; 0xcbc <vfprintf+0x274>
 cae:	60 81       	ld	r22, Z
 cb0:	71 81       	ldd	r23, Z+1	; 0x01
 cb2:	82 81       	ldd	r24, Z+2	; 0x02
 cb4:	93 81       	ldd	r25, Z+3	; 0x03
 cb6:	0c 5f       	subi	r16, 0xFC	; 252
 cb8:	1f 4f       	sbci	r17, 0xFF	; 255
 cba:	06 c0       	rjmp	.+12     	; 0xcc8 <vfprintf+0x280>
 cbc:	60 81       	ld	r22, Z
 cbe:	71 81       	ldd	r23, Z+1	; 0x01
 cc0:	80 e0       	ldi	r24, 0x00	; 0
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	0e 5f       	subi	r16, 0xFE	; 254
 cc6:	1f 4f       	sbci	r17, 0xFF	; 255
 cc8:	a4 01       	movw	r20, r8
 cca:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__ultoa_invert>
 cce:	a8 2e       	mov	r10, r24
 cd0:	a8 18       	sub	r10, r8
 cd2:	fb 2d       	mov	r31, r11
 cd4:	ff 77       	andi	r31, 0x7F	; 127
 cd6:	bf 2e       	mov	r11, r31
 cd8:	b6 fe       	sbrs	r11, 6
 cda:	0b c0       	rjmp	.+22     	; 0xcf2 <vfprintf+0x2aa>
 cdc:	2b 2d       	mov	r18, r11
 cde:	2e 7f       	andi	r18, 0xFE	; 254
 ce0:	a5 14       	cp	r10, r5
 ce2:	50 f4       	brcc	.+20     	; 0xcf8 <vfprintf+0x2b0>
 ce4:	b4 fe       	sbrs	r11, 4
 ce6:	0a c0       	rjmp	.+20     	; 0xcfc <vfprintf+0x2b4>
 ce8:	b2 fc       	sbrc	r11, 2
 cea:	08 c0       	rjmp	.+16     	; 0xcfc <vfprintf+0x2b4>
 cec:	2b 2d       	mov	r18, r11
 cee:	2e 7e       	andi	r18, 0xEE	; 238
 cf0:	05 c0       	rjmp	.+10     	; 0xcfc <vfprintf+0x2b4>
 cf2:	7a 2c       	mov	r7, r10
 cf4:	2b 2d       	mov	r18, r11
 cf6:	03 c0       	rjmp	.+6      	; 0xcfe <vfprintf+0x2b6>
 cf8:	7a 2c       	mov	r7, r10
 cfa:	01 c0       	rjmp	.+2      	; 0xcfe <vfprintf+0x2b6>
 cfc:	75 2c       	mov	r7, r5
 cfe:	24 ff       	sbrs	r18, 4
 d00:	0d c0       	rjmp	.+26     	; 0xd1c <vfprintf+0x2d4>
 d02:	fe 01       	movw	r30, r28
 d04:	ea 0d       	add	r30, r10
 d06:	f1 1d       	adc	r31, r1
 d08:	80 81       	ld	r24, Z
 d0a:	80 33       	cpi	r24, 0x30	; 48
 d0c:	11 f4       	brne	.+4      	; 0xd12 <vfprintf+0x2ca>
 d0e:	29 7e       	andi	r18, 0xE9	; 233
 d10:	09 c0       	rjmp	.+18     	; 0xd24 <vfprintf+0x2dc>
 d12:	22 ff       	sbrs	r18, 2
 d14:	06 c0       	rjmp	.+12     	; 0xd22 <vfprintf+0x2da>
 d16:	73 94       	inc	r7
 d18:	73 94       	inc	r7
 d1a:	04 c0       	rjmp	.+8      	; 0xd24 <vfprintf+0x2dc>
 d1c:	82 2f       	mov	r24, r18
 d1e:	86 78       	andi	r24, 0x86	; 134
 d20:	09 f0       	breq	.+2      	; 0xd24 <vfprintf+0x2dc>
 d22:	73 94       	inc	r7
 d24:	23 fd       	sbrc	r18, 3
 d26:	13 c0       	rjmp	.+38     	; 0xd4e <vfprintf+0x306>
 d28:	20 ff       	sbrs	r18, 0
 d2a:	06 c0       	rjmp	.+12     	; 0xd38 <vfprintf+0x2f0>
 d2c:	5a 2c       	mov	r5, r10
 d2e:	73 14       	cp	r7, r3
 d30:	18 f4       	brcc	.+6      	; 0xd38 <vfprintf+0x2f0>
 d32:	53 0c       	add	r5, r3
 d34:	57 18       	sub	r5, r7
 d36:	73 2c       	mov	r7, r3
 d38:	73 14       	cp	r7, r3
 d3a:	68 f4       	brcc	.+26     	; 0xd56 <vfprintf+0x30e>
 d3c:	b7 01       	movw	r22, r14
 d3e:	80 e2       	ldi	r24, 0x20	; 32
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	2c 87       	std	Y+12, r18	; 0x0c
 d44:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 d48:	73 94       	inc	r7
 d4a:	2c 85       	ldd	r18, Y+12	; 0x0c
 d4c:	f5 cf       	rjmp	.-22     	; 0xd38 <vfprintf+0x2f0>
 d4e:	73 14       	cp	r7, r3
 d50:	10 f4       	brcc	.+4      	; 0xd56 <vfprintf+0x30e>
 d52:	37 18       	sub	r3, r7
 d54:	01 c0       	rjmp	.+2      	; 0xd58 <vfprintf+0x310>
 d56:	31 2c       	mov	r3, r1
 d58:	24 ff       	sbrs	r18, 4
 d5a:	12 c0       	rjmp	.+36     	; 0xd80 <vfprintf+0x338>
 d5c:	b7 01       	movw	r22, r14
 d5e:	80 e3       	ldi	r24, 0x30	; 48
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	2c 87       	std	Y+12, r18	; 0x0c
 d64:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 d68:	2c 85       	ldd	r18, Y+12	; 0x0c
 d6a:	22 ff       	sbrs	r18, 2
 d6c:	17 c0       	rjmp	.+46     	; 0xd9c <vfprintf+0x354>
 d6e:	21 ff       	sbrs	r18, 1
 d70:	03 c0       	rjmp	.+6      	; 0xd78 <vfprintf+0x330>
 d72:	88 e5       	ldi	r24, 0x58	; 88
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x334>
 d78:	88 e7       	ldi	r24, 0x78	; 120
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	b7 01       	movw	r22, r14
 d7e:	0c c0       	rjmp	.+24     	; 0xd98 <vfprintf+0x350>
 d80:	82 2f       	mov	r24, r18
 d82:	86 78       	andi	r24, 0x86	; 134
 d84:	59 f0       	breq	.+22     	; 0xd9c <vfprintf+0x354>
 d86:	21 fd       	sbrc	r18, 1
 d88:	02 c0       	rjmp	.+4      	; 0xd8e <vfprintf+0x346>
 d8a:	80 e2       	ldi	r24, 0x20	; 32
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <vfprintf+0x348>
 d8e:	8b e2       	ldi	r24, 0x2B	; 43
 d90:	27 fd       	sbrc	r18, 7
 d92:	8d e2       	ldi	r24, 0x2D	; 45
 d94:	b7 01       	movw	r22, r14
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 d9c:	a5 14       	cp	r10, r5
 d9e:	38 f4       	brcc	.+14     	; 0xdae <vfprintf+0x366>
 da0:	b7 01       	movw	r22, r14
 da2:	80 e3       	ldi	r24, 0x30	; 48
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 daa:	5a 94       	dec	r5
 dac:	f7 cf       	rjmp	.-18     	; 0xd9c <vfprintf+0x354>
 dae:	aa 94       	dec	r10
 db0:	f4 01       	movw	r30, r8
 db2:	ea 0d       	add	r30, r10
 db4:	f1 1d       	adc	r31, r1
 db6:	80 81       	ld	r24, Z
 db8:	b7 01       	movw	r22, r14
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 dc0:	a1 10       	cpse	r10, r1
 dc2:	f5 cf       	rjmp	.-22     	; 0xdae <vfprintf+0x366>
 dc4:	33 20       	and	r3, r3
 dc6:	09 f4       	brne	.+2      	; 0xdca <vfprintf+0x382>
 dc8:	51 ce       	rjmp	.-862    	; 0xa6c <vfprintf+0x24>
 dca:	b7 01       	movw	r22, r14
 dcc:	80 e2       	ldi	r24, 0x20	; 32
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	0e 94 0c 07 	call	0xe18	; 0xe18 <fputc>
 dd4:	3a 94       	dec	r3
 dd6:	f6 cf       	rjmp	.-20     	; 0xdc4 <vfprintf+0x37c>
 dd8:	f7 01       	movw	r30, r14
 dda:	86 81       	ldd	r24, Z+6	; 0x06
 ddc:	97 81       	ldd	r25, Z+7	; 0x07
 dde:	02 c0       	rjmp	.+4      	; 0xde4 <vfprintf+0x39c>
 de0:	8f ef       	ldi	r24, 0xFF	; 255
 de2:	9f ef       	ldi	r25, 0xFF	; 255
 de4:	2c 96       	adiw	r28, 0x0c	; 12
 de6:	e2 e1       	ldi	r30, 0x12	; 18
 de8:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__epilogue_restores__>

00000dec <strnlen_P>:
 dec:	fc 01       	movw	r30, r24
 dee:	05 90       	lpm	r0, Z+
 df0:	61 50       	subi	r22, 0x01	; 1
 df2:	70 40       	sbci	r23, 0x00	; 0
 df4:	01 10       	cpse	r0, r1
 df6:	d8 f7       	brcc	.-10     	; 0xdee <strnlen_P+0x2>
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	8e 0f       	add	r24, r30
 dfe:	9f 1f       	adc	r25, r31
 e00:	08 95       	ret

00000e02 <strnlen>:
 e02:	fc 01       	movw	r30, r24
 e04:	61 50       	subi	r22, 0x01	; 1
 e06:	70 40       	sbci	r23, 0x00	; 0
 e08:	01 90       	ld	r0, Z+
 e0a:	01 10       	cpse	r0, r1
 e0c:	d8 f7       	brcc	.-10     	; 0xe04 <strnlen+0x2>
 e0e:	80 95       	com	r24
 e10:	90 95       	com	r25
 e12:	8e 0f       	add	r24, r30
 e14:	9f 1f       	adc	r25, r31
 e16:	08 95       	ret

00000e18 <fputc>:
 e18:	0f 93       	push	r16
 e1a:	1f 93       	push	r17
 e1c:	cf 93       	push	r28
 e1e:	df 93       	push	r29
 e20:	18 2f       	mov	r17, r24
 e22:	09 2f       	mov	r16, r25
 e24:	eb 01       	movw	r28, r22
 e26:	8b 81       	ldd	r24, Y+3	; 0x03
 e28:	81 fd       	sbrc	r24, 1
 e2a:	03 c0       	rjmp	.+6      	; 0xe32 <fputc+0x1a>
 e2c:	8f ef       	ldi	r24, 0xFF	; 255
 e2e:	9f ef       	ldi	r25, 0xFF	; 255
 e30:	20 c0       	rjmp	.+64     	; 0xe72 <fputc+0x5a>
 e32:	82 ff       	sbrs	r24, 2
 e34:	10 c0       	rjmp	.+32     	; 0xe56 <fputc+0x3e>
 e36:	4e 81       	ldd	r20, Y+6	; 0x06
 e38:	5f 81       	ldd	r21, Y+7	; 0x07
 e3a:	2c 81       	ldd	r18, Y+4	; 0x04
 e3c:	3d 81       	ldd	r19, Y+5	; 0x05
 e3e:	42 17       	cp	r20, r18
 e40:	53 07       	cpc	r21, r19
 e42:	7c f4       	brge	.+30     	; 0xe62 <fputc+0x4a>
 e44:	e8 81       	ld	r30, Y
 e46:	f9 81       	ldd	r31, Y+1	; 0x01
 e48:	9f 01       	movw	r18, r30
 e4a:	2f 5f       	subi	r18, 0xFF	; 255
 e4c:	3f 4f       	sbci	r19, 0xFF	; 255
 e4e:	39 83       	std	Y+1, r19	; 0x01
 e50:	28 83       	st	Y, r18
 e52:	10 83       	st	Z, r17
 e54:	06 c0       	rjmp	.+12     	; 0xe62 <fputc+0x4a>
 e56:	e8 85       	ldd	r30, Y+8	; 0x08
 e58:	f9 85       	ldd	r31, Y+9	; 0x09
 e5a:	81 2f       	mov	r24, r17
 e5c:	09 95       	icall
 e5e:	89 2b       	or	r24, r25
 e60:	29 f7       	brne	.-54     	; 0xe2c <fputc+0x14>
 e62:	2e 81       	ldd	r18, Y+6	; 0x06
 e64:	3f 81       	ldd	r19, Y+7	; 0x07
 e66:	2f 5f       	subi	r18, 0xFF	; 255
 e68:	3f 4f       	sbci	r19, 0xFF	; 255
 e6a:	3f 83       	std	Y+7, r19	; 0x07
 e6c:	2e 83       	std	Y+6, r18	; 0x06
 e6e:	81 2f       	mov	r24, r17
 e70:	90 2f       	mov	r25, r16
 e72:	df 91       	pop	r29
 e74:	cf 91       	pop	r28
 e76:	1f 91       	pop	r17
 e78:	0f 91       	pop	r16
 e7a:	08 95       	ret

00000e7c <__ultoa_invert>:
 e7c:	fa 01       	movw	r30, r20
 e7e:	aa 27       	eor	r26, r26
 e80:	28 30       	cpi	r18, 0x08	; 8
 e82:	51 f1       	breq	.+84     	; 0xed8 <__ultoa_invert+0x5c>
 e84:	20 31       	cpi	r18, 0x10	; 16
 e86:	81 f1       	breq	.+96     	; 0xee8 <__ultoa_invert+0x6c>
 e88:	e8 94       	clt
 e8a:	6f 93       	push	r22
 e8c:	6e 7f       	andi	r22, 0xFE	; 254
 e8e:	6e 5f       	subi	r22, 0xFE	; 254
 e90:	7f 4f       	sbci	r23, 0xFF	; 255
 e92:	8f 4f       	sbci	r24, 0xFF	; 255
 e94:	9f 4f       	sbci	r25, 0xFF	; 255
 e96:	af 4f       	sbci	r26, 0xFF	; 255
 e98:	b1 e0       	ldi	r27, 0x01	; 1
 e9a:	3e d0       	rcall	.+124    	; 0xf18 <__ultoa_invert+0x9c>
 e9c:	b4 e0       	ldi	r27, 0x04	; 4
 e9e:	3c d0       	rcall	.+120    	; 0xf18 <__ultoa_invert+0x9c>
 ea0:	67 0f       	add	r22, r23
 ea2:	78 1f       	adc	r23, r24
 ea4:	89 1f       	adc	r24, r25
 ea6:	9a 1f       	adc	r25, r26
 ea8:	a1 1d       	adc	r26, r1
 eaa:	68 0f       	add	r22, r24
 eac:	79 1f       	adc	r23, r25
 eae:	8a 1f       	adc	r24, r26
 eb0:	91 1d       	adc	r25, r1
 eb2:	a1 1d       	adc	r26, r1
 eb4:	6a 0f       	add	r22, r26
 eb6:	71 1d       	adc	r23, r1
 eb8:	81 1d       	adc	r24, r1
 eba:	91 1d       	adc	r25, r1
 ebc:	a1 1d       	adc	r26, r1
 ebe:	20 d0       	rcall	.+64     	; 0xf00 <__ultoa_invert+0x84>
 ec0:	09 f4       	brne	.+2      	; 0xec4 <__ultoa_invert+0x48>
 ec2:	68 94       	set
 ec4:	3f 91       	pop	r19
 ec6:	2a e0       	ldi	r18, 0x0A	; 10
 ec8:	26 9f       	mul	r18, r22
 eca:	11 24       	eor	r1, r1
 ecc:	30 19       	sub	r19, r0
 ece:	30 5d       	subi	r19, 0xD0	; 208
 ed0:	31 93       	st	Z+, r19
 ed2:	de f6       	brtc	.-74     	; 0xe8a <__ultoa_invert+0xe>
 ed4:	cf 01       	movw	r24, r30
 ed6:	08 95       	ret
 ed8:	46 2f       	mov	r20, r22
 eda:	47 70       	andi	r20, 0x07	; 7
 edc:	40 5d       	subi	r20, 0xD0	; 208
 ede:	41 93       	st	Z+, r20
 ee0:	b3 e0       	ldi	r27, 0x03	; 3
 ee2:	0f d0       	rcall	.+30     	; 0xf02 <__ultoa_invert+0x86>
 ee4:	c9 f7       	brne	.-14     	; 0xed8 <__ultoa_invert+0x5c>
 ee6:	f6 cf       	rjmp	.-20     	; 0xed4 <__ultoa_invert+0x58>
 ee8:	46 2f       	mov	r20, r22
 eea:	4f 70       	andi	r20, 0x0F	; 15
 eec:	40 5d       	subi	r20, 0xD0	; 208
 eee:	4a 33       	cpi	r20, 0x3A	; 58
 ef0:	18 f0       	brcs	.+6      	; 0xef8 <__ultoa_invert+0x7c>
 ef2:	49 5d       	subi	r20, 0xD9	; 217
 ef4:	31 fd       	sbrc	r19, 1
 ef6:	40 52       	subi	r20, 0x20	; 32
 ef8:	41 93       	st	Z+, r20
 efa:	02 d0       	rcall	.+4      	; 0xf00 <__ultoa_invert+0x84>
 efc:	a9 f7       	brne	.-22     	; 0xee8 <__ultoa_invert+0x6c>
 efe:	ea cf       	rjmp	.-44     	; 0xed4 <__ultoa_invert+0x58>
 f00:	b4 e0       	ldi	r27, 0x04	; 4
 f02:	a6 95       	lsr	r26
 f04:	97 95       	ror	r25
 f06:	87 95       	ror	r24
 f08:	77 95       	ror	r23
 f0a:	67 95       	ror	r22
 f0c:	ba 95       	dec	r27
 f0e:	c9 f7       	brne	.-14     	; 0xf02 <__ultoa_invert+0x86>
 f10:	00 97       	sbiw	r24, 0x00	; 0
 f12:	61 05       	cpc	r22, r1
 f14:	71 05       	cpc	r23, r1
 f16:	08 95       	ret
 f18:	9b 01       	movw	r18, r22
 f1a:	ac 01       	movw	r20, r24
 f1c:	0a 2e       	mov	r0, r26
 f1e:	06 94       	lsr	r0
 f20:	57 95       	ror	r21
 f22:	47 95       	ror	r20
 f24:	37 95       	ror	r19
 f26:	27 95       	ror	r18
 f28:	ba 95       	dec	r27
 f2a:	c9 f7       	brne	.-14     	; 0xf1e <__ultoa_invert+0xa2>
 f2c:	62 0f       	add	r22, r18
 f2e:	73 1f       	adc	r23, r19
 f30:	84 1f       	adc	r24, r20
 f32:	95 1f       	adc	r25, r21
 f34:	a0 1d       	adc	r26, r0
 f36:	08 95       	ret

00000f38 <__prologue_saves__>:
 f38:	2f 92       	push	r2
 f3a:	3f 92       	push	r3
 f3c:	4f 92       	push	r4
 f3e:	5f 92       	push	r5
 f40:	6f 92       	push	r6
 f42:	7f 92       	push	r7
 f44:	8f 92       	push	r8
 f46:	9f 92       	push	r9
 f48:	af 92       	push	r10
 f4a:	bf 92       	push	r11
 f4c:	cf 92       	push	r12
 f4e:	df 92       	push	r13
 f50:	ef 92       	push	r14
 f52:	ff 92       	push	r15
 f54:	0f 93       	push	r16
 f56:	1f 93       	push	r17
 f58:	cf 93       	push	r28
 f5a:	df 93       	push	r29
 f5c:	cd b7       	in	r28, 0x3d	; 61
 f5e:	de b7       	in	r29, 0x3e	; 62
 f60:	ca 1b       	sub	r28, r26
 f62:	db 0b       	sbc	r29, r27
 f64:	0f b6       	in	r0, 0x3f	; 63
 f66:	f8 94       	cli
 f68:	de bf       	out	0x3e, r29	; 62
 f6a:	0f be       	out	0x3f, r0	; 63
 f6c:	cd bf       	out	0x3d, r28	; 61
 f6e:	09 94       	ijmp

00000f70 <__epilogue_restores__>:
 f70:	2a 88       	ldd	r2, Y+18	; 0x12
 f72:	39 88       	ldd	r3, Y+17	; 0x11
 f74:	48 88       	ldd	r4, Y+16	; 0x10
 f76:	5f 84       	ldd	r5, Y+15	; 0x0f
 f78:	6e 84       	ldd	r6, Y+14	; 0x0e
 f7a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f7c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f7e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f80:	aa 84       	ldd	r10, Y+10	; 0x0a
 f82:	b9 84       	ldd	r11, Y+9	; 0x09
 f84:	c8 84       	ldd	r12, Y+8	; 0x08
 f86:	df 80       	ldd	r13, Y+7	; 0x07
 f88:	ee 80       	ldd	r14, Y+6	; 0x06
 f8a:	fd 80       	ldd	r15, Y+5	; 0x05
 f8c:	0c 81       	ldd	r16, Y+4	; 0x04
 f8e:	1b 81       	ldd	r17, Y+3	; 0x03
 f90:	aa 81       	ldd	r26, Y+2	; 0x02
 f92:	b9 81       	ldd	r27, Y+1	; 0x01
 f94:	ce 0f       	add	r28, r30
 f96:	d1 1d       	adc	r29, r1
 f98:	0f b6       	in	r0, 0x3f	; 63
 f9a:	f8 94       	cli
 f9c:	de bf       	out	0x3e, r29	; 62
 f9e:	0f be       	out	0x3f, r0	; 63
 fa0:	cd bf       	out	0x3d, r28	; 61
 fa2:	ed 01       	movw	r28, r26
 fa4:	08 95       	ret

00000fa6 <_exit>:
 fa6:	f8 94       	cli

00000fa8 <__stop_program>:
 fa8:	ff cf       	rjmp	.-2      	; 0xfa8 <__stop_program>
